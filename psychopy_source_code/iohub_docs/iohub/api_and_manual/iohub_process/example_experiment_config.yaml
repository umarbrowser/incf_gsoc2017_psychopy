# This text is being written in a YAML comment block. Looks familar right?
#
# Here are a few pointers to keep in mind about the confiuration file format
# that will help ensure they are created with proper YAML syntax:
# 
# * Think of the whole file as representing a python dictionary. Infact when the
#   the file is read by PyYAML, it results in the data from the file being returned as a Python dictionary.
# * If you have ever created a Python dictionary using the form
#
#   mydict={ 
#           'key1': 'value1',
#           'key2': 2
#           }
#
#   Then it should be quite easy to see that the YAML format for a file is very
#   similar, other than these differences:
#     + The file does not begin with a '{' or end with a '}'.
#     + key: value pairs are seperation by lines, not by ','s.  
# * The indendation level of the line in the file indicates the scope of the key:value pair, 
#     ( scope meaning the dictionary or list level that the key: value pair is associated with) 
#    Again, should be a familar idea. ;)
# * A key can have a dictionary as it;s value, by specifying the key name and
#   then providing the key's dictionary value starting on the nexxt line, indented by a soft tab.
# * Keys should only contain a-z,A-Z,and underscores. (This is an ioHub spec. more than a YAML one)
# * Keys never need to have quotes around them, and never should.
# * String values also do not need quotes around them.
# * Other system data types used in values can usually just be types as if you were entering the value
#   in a python script. For example:
#
#       dict_of_mixed_type_values:     # So a dict value is created by having each key: value pair for the key indented one soft tab.
#          str_type_param: This is the value for my str_type_param.
#          int_type_param: 10          # Converted into a Python int with value 10
#          float_type_param: 10.11     # Converted into a Python float with value 10.11
#          bool_type_param: True       # Converted into a Python bool == True
#          none_type_param:            # Converted into value of None
#          another_str_type: '10'      # By placing quotes around a type that would notmally not be a string, it is made one.
#          list_type_param: [1,2,3,Four,Five,Six]  # A Python list is created  [1,2,3,'Four','Five','Six']
#          list2_type_param:
#              - 1                      # This is another way to define a list value
#              - 2                      # each element is on a seperate line
#              - 3                      # indented by one from the key that the list is associated with.
#              - Four                   # will also equal [1,2,3,'Four','Five','Six'] in python
#              - Five
#              - Six
#
######

######
#
# This is an example experiment_config.yaml. Values that are also the default
# value for the setting are indicated as such. 

# tile: A short but non criptic name of the experiment. 
#       Similar to what you might title a paper about the experiment.   
#
title: Effect of Exogenous and Endogenous Cues on Saccadic Reaction Time

# code: A vert short, usually criptic, code for the experiment.
#       An experiment code is 'required' when using the ioHub DataStore.
#       While not technically inforced, it is a good practive to use a unique
#       code for each experiment you create.
#
code: sac_ee_cue

# version: The version of the experiment being run, in string format.
#       Each version on an experiment should have it's own experiment folder
#       that has the experiment source and configuaration.    
version: '1.1'

# description: Can be used to give longer, more informative text about what the experiment is for.
#       Can also be used to indicate anything important to remember about running the experiment.
#
description: This study looks at how central cues in the form of arrow graphics, and peripheral cues if the form of a flash of light, around the location of an upcoming target's interact to influence saccadic onset time.

# display_experiment_dialog: If True, a read-only dialog will be displayed 
#       each time the experiment starts stating the above four parameter values.
#       This can be useful so the person running the experiment can check that
#        they started the right one!
#
display_experiment_dialog: True    # Default if False

# session_defaults: This parameter is defined as a sub dictionary containing
# the experiment session metadata and user defined custom parameters.
#   
session_defaults:
    
    # name: Allows the entry of a short namefor the session. This can be the same across
    #       multiple sessions within the experiment.
    #
    name: Session Name

    # code: A short code for the experiment session. Each run of the experiment must have 
    #       a unique session code. It the code enteried already exists in the experiments DataStore
    #       An error is returned and a different code can be entered.
    #
    code: Sxxxxxx

    # comments: Can be used to give any information the experiment operator
    #       Thinks may be important to note about the session about to be run.
    #
    comments: Ensure the particpant's right eye is tracked and that the data collection room's light are turned off before the experiment begins.

    # user_variables: Allow for custom session data entry fields to be displayed in the Session Input Dialog.
    #   If no extra session variables are needed, this section can be removed. The default is no
    #   extra user defined variable.
    #   To create user defines variables, add one line for each variable wanted to the user_variables
    #   parameter section. The key of each line will be shown ad the label for the input.
    #   The value of each line specifies the default value for string field, 
    #   and the possible values to be shown for a list field, which is displayed as a dropdown list in the dialog.
    #   For list fileds, the first element of the list is the default. 
    #   Fields that have a boolean default are displayed as a checkbox.
    user_variables:
        participant_age: Unknown
        participant_gender: [ Select, Male, Female ]
        glasses: False
        contacts: False
        eye_color: Unknown
    
    # session_variable_order: This setting accepts a list value, each element of which
    #   is a session variable key (either built-in or custom). The order the keys
    #   are provided in the list will be the order that each appears in the Session Input Dialog.
    # 
    session_variable_order: [ name, code, comments, participant_age, participant_gender, glasses, contacts, eye_color ]

# To document....
#    
condition_variable_source:
    file:       
    blocking_variable:
    practice_block_values:
    randomization:
        seed:
        blocks: True
        trials: True
        
# display_session_dialog: If True, an input dialog is shown
#       each time the experiment starts allowing the operator to enter data for
#       The session_default parameters and any user_variables defined.
#
display_session_dialog: True        # Default

# process_affinity: Specifies the processing units / cpu's that the PsychoPy
#       Process should be allowed to run on. Not supported on OSX.
#       An empty list indicates that the process should be able
#       to run on any processing unit of the computer.
#
process_affinity: []                # Default

# remaining_processes_affinity: Lists the processing units / cpu's that
#       all other processes running on the computer (other than the ioHub Process)
#       should be allowed to run on.
#       An empty list indicates that the process should be able
#       to run on any processing unit of the computer.
#       Not supported on OSX.
#
remaining_processes_affinity: []    # Default

# event_buffer_length: The maximum number of events that can be in the
#       PsychoPy Process ioHub event cache. This is used when iohub.wait()
#       is called and new events are received from the ioHub process.        
#
event_buffer_length: 1024           # Default

# Settings for the ioHub Process itself.
#
ioHub:
    # Do you want the ioHub process to run ?  True == Yes
    # False == why are you creating an ioHub confiuration file then? ;)
    #                  
    enable: True                    # Default

    # process_affinity: Specifies the processing units / cpu's that the
    #       ioHub Process should be allowed to run on. 
    #       An empty list indicates that the process should be able
    #       to run on any processing unit of the computer.
    #       Not supported on OSX.
    #
    process_affinity: []            # Default


    # config: The name of the ioHub config file, specifying device 
    #       settings, etc
    #
    config: ioHub_config.yaml       # Default

####### End of experiment_config.yaml example ########
