    # The iohub_config.yaml includes settings for the iohub Process itself,
    # the ioHub DataStore, and the list of ioHub devices that will be monitored
    # for events with the ioHub Process runs.
    #
    # This is just an example of a properly defined iohub_config.yaml file,
    # with lots of comments. The settings included, other than for monitored devices, 
    # defines all possible parameters. If the default value, as shown here,
    # does not need to be changed for your experiment, then you do not need to
    # include that parameter in your experiment's iohub_config.yaml file.
    
    
    # global_event_buffer: Specifies the maximum number of events that can be stored in
    #       the ioHub Process's Global Event Buffer, which holds events as they are
    #       received from 'all' devices being monitored.
    #
    global_event_buffer: 2048
    
    # udp_port: This sets the port number the ioHub UDP Server uses to accept incoming
    #       message requests from.
    #
   udp_port: 9034


    # data_store: A dictionary for prefernces related to the ioHub DataStore.
    #
    data_store:    
        # enable: Should the ioHub DataStore to used while the ioHub process is running.
        #   True = the DataStore will be active and used by devices that have been configured to save events.
        #   False = Total disabling of the ioHub DataStore, regardless of any related device level preferences.
        #
        enable: False

        # filename: The name of the file that will be created by the DataStore.
        #           The full file name is the name given here + the '.hdf5' extension.
        #
        filename: events

        # multiple_experiments: The ioHub DataStore was deigned so that data 
        #   from multiple experiments could be saved in the same hdf5 file.
        #   However in practive this has never really been used, so keeping the default
        #   value of False (each experiment creates a different DataStore file) is
        #   likely a good idea.
        #
        multiple_experiments: False

        # flush_interval: As events are given to the DataStore to be saved peristantly,
        #   events are buffered to memory and then written to the hdf5 file every
        #   flush_interval number of events. A smaller flush_interval means it will ccur more often
        #   but take less time; a larger value means event flushing will occur less
        #   frequently, but take longer to perform when it is done.
        #
        flush_interval: 32
        
    # monitor_devices: specifies the list of devices that will be monitored for evenst while the ioHub
    #   Process is running. All available settings for each device is listed in the device's manual page.
    #   We only give any example of a possible device list here.
    #
    monitor_devices:
    
        # A Display device will be created by the ioHub Process
        #
        - Display:
            # The unique name to assign to the evice instance created.
            # The device is accessed from within the PsychoPy script 
            # using the name's value; therefore it must be a valid Python
            # variable name as well.
            #
            name: display
            
            # The coordinate , or unit, type that the Display's surface area should
            # be represented in. Valid values are pix, deg, norm, or cm.
            #
            reporting_unit_type: pix
            
            # The Display index to assign to the device. On a single Display
            # computer this must always be 0. On a computer with multiple displays, 
            # the value can be between 0 and display_count - 1.     
            #
            device_number: 0
            
            # This section of parameters defines the actual size of the Display's 
            # 2D stimulus surface. Both width and height values are the total length of each dimention.
            # The unit_type field must currently be in mm, and therefore so must 
            # the specified width and height.
            #
            physical_dimensions:
                width: 500
                height: 281
                unit_type: mm
                
            # Enter the expected, average, distance that the participants eye(s) will
            # be from the display's stimulus surface. Currently the only supported 
            # distance reference type is surface_center, and the distance must be specified in 
            # the unit_type of mm.
            #   
            default_eye_distance:
                surface_center: 550
                unit_type: mm
            
            # If the Display device should open a PsychoPy Monitor Configuration
            # file, provide the name of it here.
            #
            psychopy_monitor_name: default
            
            # If a valid PsychoPy Monitor Configuration file 
            # has been provided, specify if the physical parameters
            # stored in it should override any duplicate parameter types
            # defined in this Display device configuartion.
            # True == Use the PsychoPy settings and update the Display config with them.
            # False == Use the measurements provided in this file and update the
            # the PsychoPy Monitor Configuration with the values specified
            # in the ioHub Device configuration.
            #
            override_using_psycho_settings: False
        
        Keyboard:
            # name: The name you want to assign the keyboard device for the experiment
            #   This name is what will be used to access the device within the experiment
            #   script via the devices.[device_name] property of the ioHubConnection or
            #   ioHubExperimentRuntime classes.
            #
            name: keyboard
         
            # monitor_event_types: *If* the ioHubDataStore is enabled for the experiment, then
            #   indicate which KeyboardEvent types should be monitored
            #   for and therefore saved to the DataStore or sent to the Experiment Process.
            #
            monitor_event_types: [KeyboardPressEvent, KeyboardReleaseEvent, KeyboardCharEvent]

            # report_auto_repeat_press_events: Should the keyboard report key press events
            #   that are generated by the OS when a key is held down for an extended 
            #   period of time.
            #
            report_auto_repeat_press_events: False

            # event_buffer_length: Specify the maximum number of events (for each
            #   event type the device produces) that can be stored by the ioHub Server
            #   before each new event results in the oldest event of the same type being
            #   discarded from the ioHub device event buffer.
            #
            event_buffer_length: 256

        -xinput.Gamepad:
            # name: The name you want to assign the xinput.Gamepad device for the experiment
            #   This name is what will be used to access the device within the experiment
            #   script via the devices.[device_name] property of the ioHubConnection or
            #   ioHubExperimentRuntime classes.
            #
            name: gamepad
         
            # device_number: Up to 4 XInput 'users' can be connected to the computer at one time. The
            #   gamepad's user ID is based on how many other gamepads are already connected to the
            #   computer when the new gamepad turns on. If a gamepad with a lower user id
            #   the disconnects from the computer, other gamepad user ids remain the same.
            #   Therefore XInput user id is not equal to the index of the gamepad in a set 
            #   of gamepads. If the experiment should connect to the first active gamepad found, enter -1.
            #   Otherwise enter the user_id (1-4) of he gamepad you wish to connect to.
            device_number: -1

            # monitor_event_types: *If* the ioHubDataStore is enabled for the experiment, then
            #   indicate if events for this device should be saved to the
            #   monitor_event_types: Specified which xinput.Gamepad Event types should be monitored
            #   for and therefore saved to the DataStore or sent to the Experiment Process.
            #
            monitor_event_types:  [GamepadStateChangeEvent, GamepadDisconnectEvent]

            # save_events: Save xinput.Gamepad events to the data_collection/xinput.Gamepad event 
            #   group in the hdf5 event file.
            #   True = Save events for this device to the ioDataStore.
            #   False = Do not save events for this device in the ioDataStore.
            #
            save_events: True

            # streamEvents: Indicate if events from this device should be made available
            #   during experiment runtime to the Experiment / PsychoPy Process.
            #   True = Send events for this device to  the Experiment Process in real-time.
            #   False = Do *not* send events for this device to the Experiment Process in real-time.
            #
            stream_events: True

            # event_buffer_length: Specify the maximum number of events (for each
            #   event type the device produces) that can be stored by the ioHub Server
            #   before each new event results in the oldest event of the same type being
            #   discarded from the ioHub device event buffer.
            #
            event_buffer_length: 256

            # device_timer: Devices that require polling to read any new native events
            #   that have become available must specifiy a device_timer property, with an
            #   interval sub proerty that specifies how frequently the device would be polled
            #   by the ioHub Server. The time is specified in sec.msec format and is a 'requested'
            #   polling interval. The actual polling interval will vary from this somewhat, the 
            #   magnitude of which depends on the computer hardware and OS being used and the
            #   number of other polled devices being monitored. The 'configdence_interval'
            #   attribute of events that have a parent device that is polled often can be used to
            #   determine the actual polling rate being achieved by the ioHub Process.
            device_timer:
                interval: 0.005
