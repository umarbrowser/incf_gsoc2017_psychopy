ApertureComponent.order:['name', 'size', 'pos']
ApertureComponent.name.default:aperture
ApertureComponent.name.categ:Basic
ApertureComponent.name.allowedVals:[]
ApertureComponent.name.readOnly:False
ApertureComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'aperture', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
ApertureComponent.name.__weakref__:None
ApertureComponent.name.valType:code
ApertureComponent.name.staticUpdater:None
ApertureComponent.name.val:aperture
ApertureComponent.name.allowedTypes:[]
ApertureComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
ApertureComponent.name.allowedUpdates:None
ApertureComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
ApertureComponent.name.label:Name
ApertureComponent.stopVal.default:1.0
ApertureComponent.stopVal.categ:Basic
ApertureComponent.stopVal.allowedVals:[]
ApertureComponent.stopVal.readOnly:False
ApertureComponent.stopVal.updates:constant
ApertureComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1.0, 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
ApertureComponent.stopVal.__weakref__:None
ApertureComponent.stopVal.valType:code
ApertureComponent.stopVal.staticUpdater:None
ApertureComponent.stopVal.val:1.0
ApertureComponent.stopVal.allowedTypes:[]
ApertureComponent.stopVal.hint:When does the component end? (blank is endless)
ApertureComponent.stopVal.allowedUpdates:[]
ApertureComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
ApertureComponent.stopVal.label:Stop
ApertureComponent.durationEstim.default:
ApertureComponent.durationEstim.categ:Basic
ApertureComponent.durationEstim.allowedVals:[]
ApertureComponent.durationEstim.readOnly:False
ApertureComponent.durationEstim.updates:None
ApertureComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
ApertureComponent.durationEstim.__weakref__:None
ApertureComponent.durationEstim.valType:code
ApertureComponent.durationEstim.staticUpdater:None
ApertureComponent.durationEstim.val:
ApertureComponent.durationEstim.allowedTypes:[]
ApertureComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
ApertureComponent.durationEstim.allowedUpdates:None
ApertureComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
ApertureComponent.durationEstim.label:Expected duration (s)
ApertureComponent.pos.default:(0, 0)
ApertureComponent.pos.categ:Basic
ApertureComponent.pos.allowedVals:[]
ApertureComponent.pos.readOnly:False
ApertureComponent.pos.updates:constant
ApertureComponent.pos.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': (0, 0), 'hint': u'Where is the aperture centred?', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Position [x,y]', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
ApertureComponent.pos.__weakref__:None
ApertureComponent.pos.valType:code
ApertureComponent.pos.staticUpdater:None
ApertureComponent.pos.val:(0, 0)
ApertureComponent.pos.allowedTypes:[]
ApertureComponent.pos.hint:Where is the aperture centred?
ApertureComponent.pos.allowedUpdates:['constant', 'set every repeat', 'set every frame']
ApertureComponent.pos.__class__:<class 'psychopy.app.builder.experiment.Param'>
ApertureComponent.pos.label:Position [x,y]
ApertureComponent.startEstim.default:
ApertureComponent.startEstim.categ:Basic
ApertureComponent.startEstim.allowedVals:[]
ApertureComponent.startEstim.readOnly:False
ApertureComponent.startEstim.updates:None
ApertureComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
ApertureComponent.startEstim.__weakref__:None
ApertureComponent.startEstim.valType:code
ApertureComponent.startEstim.staticUpdater:None
ApertureComponent.startEstim.val:
ApertureComponent.startEstim.allowedTypes:[]
ApertureComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
ApertureComponent.startEstim.allowedUpdates:None
ApertureComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
ApertureComponent.startEstim.label:Expected start (s)
ApertureComponent.units.default:'norm'
ApertureComponent.units.categ:Basic
ApertureComponent.units.allowedVals:['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat']
ApertureComponent.units.readOnly:False
ApertureComponent.units.updates:None
ApertureComponent.units.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'norm', 'hint': u'Units of dimensions for this stimulus', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat'], 'label': u'Units', 'readOnly': False, 'updates': None, 'valType': 'str'}
ApertureComponent.units.__weakref__:None
ApertureComponent.units.valType:str
ApertureComponent.units.staticUpdater:None
ApertureComponent.units.val:norm
ApertureComponent.units.allowedTypes:[]
ApertureComponent.units.hint:Units of dimensions for this stimulus
ApertureComponent.units.allowedUpdates:None
ApertureComponent.units.__class__:<class 'psychopy.app.builder.experiment.Param'>
ApertureComponent.units.label:Units
ApertureComponent.startType.default:'time (s)'
ApertureComponent.startType.categ:Basic
ApertureComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
ApertureComponent.startType.readOnly:False
ApertureComponent.startType.updates:None
ApertureComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
ApertureComponent.startType.__weakref__:None
ApertureComponent.startType.valType:str
ApertureComponent.startType.staticUpdater:None
ApertureComponent.startType.val:time (s)
ApertureComponent.startType.allowedTypes:[]
ApertureComponent.startType.hint:How do you want to define your start point?
ApertureComponent.startType.allowedUpdates:None
ApertureComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
ApertureComponent.startType.label:start type
ApertureComponent.stopType.default:'duration (s)'
ApertureComponent.stopType.categ:Basic
ApertureComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
ApertureComponent.stopType.readOnly:False
ApertureComponent.stopType.updates:None
ApertureComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
ApertureComponent.stopType.__weakref__:None
ApertureComponent.stopType.valType:str
ApertureComponent.stopType.staticUpdater:None
ApertureComponent.stopType.val:duration (s)
ApertureComponent.stopType.allowedTypes:[]
ApertureComponent.stopType.hint:How do you want to define your end point?
ApertureComponent.stopType.allowedUpdates:None
ApertureComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
ApertureComponent.stopType.label:stop type
ApertureComponent.startVal.default:0.0
ApertureComponent.startVal.categ:Basic
ApertureComponent.startVal.allowedVals:[]
ApertureComponent.startVal.readOnly:False
ApertureComponent.startVal.updates:None
ApertureComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
ApertureComponent.startVal.__weakref__:None
ApertureComponent.startVal.valType:code
ApertureComponent.startVal.staticUpdater:None
ApertureComponent.startVal.val:0.0
ApertureComponent.startVal.allowedTypes:[]
ApertureComponent.startVal.hint:When does the component start?
ApertureComponent.startVal.allowedUpdates:None
ApertureComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
ApertureComponent.startVal.label:Start
ApertureComponent.size.default:1
ApertureComponent.size.categ:Basic
ApertureComponent.size.allowedVals:[]
ApertureComponent.size.readOnly:False
ApertureComponent.size.updates:constant
ApertureComponent.size.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1, 'hint': u'How big is the aperture? (a single number for diameter)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Size', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
ApertureComponent.size.__weakref__:None
ApertureComponent.size.valType:code
ApertureComponent.size.staticUpdater:None
ApertureComponent.size.val:1
ApertureComponent.size.allowedTypes:[]
ApertureComponent.size.hint:How big is the aperture? (a single number for diameter)
ApertureComponent.size.allowedUpdates:['constant', 'set every repeat', 'set every frame']
ApertureComponent.size.__class__:<class 'psychopy.app.builder.experiment.Param'>
ApertureComponent.size.label:Size
CodeComponent.order:['name', 'Begin Experiment', 'Begin Routine', 'Each Frame', 'End Routine', 'End Experiment']
CodeComponent.Begin Experiment.default:
CodeComponent.Begin Experiment.categ:Basic
CodeComponent.Begin Experiment.allowedVals:[]
CodeComponent.Begin Experiment.readOnly:False
CodeComponent.Begin Experiment.updates:constant
CodeComponent.Begin Experiment.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'Code at the start of the experiment (initialization); right-click checks syntax', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Begin Experiment', 'readOnly': False, 'updates': 'constant', 'valType': 'extendedCode'}
CodeComponent.Begin Experiment.__weakref__:None
CodeComponent.Begin Experiment.valType:extendedCode
CodeComponent.Begin Experiment.staticUpdater:None
CodeComponent.Begin Experiment.val:
CodeComponent.Begin Experiment.allowedTypes:[]
CodeComponent.Begin Experiment.hint:Code at the start of the experiment (initialization); right-click checks syntax
CodeComponent.Begin Experiment.allowedUpdates:[]
CodeComponent.Begin Experiment.__class__:<class 'psychopy.app.builder.experiment.Param'>
CodeComponent.Begin Experiment.label:Begin Experiment
CodeComponent.name.default:code
CodeComponent.name.categ:Basic
CodeComponent.name.allowedVals:[]
CodeComponent.name.readOnly:False
CodeComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'code', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
CodeComponent.name.__weakref__:None
CodeComponent.name.valType:code
CodeComponent.name.staticUpdater:None
CodeComponent.name.val:code
CodeComponent.name.allowedTypes:[]
CodeComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
CodeComponent.name.allowedUpdates:None
CodeComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
CodeComponent.name.label:Name
CodeComponent.Begin Routine.default:
CodeComponent.Begin Routine.categ:Basic
CodeComponent.Begin Routine.allowedVals:[]
CodeComponent.Begin Routine.readOnly:False
CodeComponent.Begin Routine.updates:constant
CodeComponent.Begin Routine.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'Code to be run at the start of each repeat of the Routine (e.g. each trial); right-click checks syntax', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Begin Routine', 'readOnly': False, 'updates': 'constant', 'valType': 'extendedCode'}
CodeComponent.Begin Routine.__weakref__:None
CodeComponent.Begin Routine.valType:extendedCode
CodeComponent.Begin Routine.staticUpdater:None
CodeComponent.Begin Routine.val:
CodeComponent.Begin Routine.allowedTypes:[]
CodeComponent.Begin Routine.hint:Code to be run at the start of each repeat of the Routine (e.g. each trial); right-click checks syntax
CodeComponent.Begin Routine.allowedUpdates:[]
CodeComponent.Begin Routine.__class__:<class 'psychopy.app.builder.experiment.Param'>
CodeComponent.Begin Routine.label:Begin Routine
CodeComponent.End Routine.default:
CodeComponent.End Routine.categ:Basic
CodeComponent.End Routine.allowedVals:[]
CodeComponent.End Routine.readOnly:False
CodeComponent.End Routine.updates:constant
CodeComponent.End Routine.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'Code at the end of this repeat of the Routine (e.g. getting/storing responses); right-click checks syntax', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'End Routine', 'readOnly': False, 'updates': 'constant', 'valType': 'extendedCode'}
CodeComponent.End Routine.__weakref__:None
CodeComponent.End Routine.valType:extendedCode
CodeComponent.End Routine.staticUpdater:None
CodeComponent.End Routine.val:
CodeComponent.End Routine.allowedTypes:[]
CodeComponent.End Routine.hint:Code at the end of this repeat of the Routine (e.g. getting/storing responses); right-click checks syntax
CodeComponent.End Routine.allowedUpdates:[]
CodeComponent.End Routine.__class__:<class 'psychopy.app.builder.experiment.Param'>
CodeComponent.End Routine.label:End Routine
CodeComponent.End Experiment.default:
CodeComponent.End Experiment.categ:Basic
CodeComponent.End Experiment.allowedVals:[]
CodeComponent.End Experiment.readOnly:False
CodeComponent.End Experiment.updates:constant
CodeComponent.End Experiment.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'Code at the end of the entire experiment (e.g. saving files, resetting computer); right-click checks syntax', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'End Experiment', 'readOnly': False, 'updates': 'constant', 'valType': 'extendedCode'}
CodeComponent.End Experiment.__weakref__:None
CodeComponent.End Experiment.valType:extendedCode
CodeComponent.End Experiment.staticUpdater:None
CodeComponent.End Experiment.val:
CodeComponent.End Experiment.allowedTypes:[]
CodeComponent.End Experiment.hint:Code at the end of the entire experiment (e.g. saving files, resetting computer); right-click checks syntax
CodeComponent.End Experiment.allowedUpdates:[]
CodeComponent.End Experiment.__class__:<class 'psychopy.app.builder.experiment.Param'>
CodeComponent.End Experiment.label:End Experiment
CodeComponent.Each Frame.default:
CodeComponent.Each Frame.categ:Basic
CodeComponent.Each Frame.allowedVals:[]
CodeComponent.Each Frame.readOnly:False
CodeComponent.Each Frame.updates:constant
CodeComponent.Each Frame.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'Code to be run on every video frame during for the duration of this Routine; right-click checks syntax', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Each Frame', 'readOnly': False, 'updates': 'constant', 'valType': 'extendedCode'}
CodeComponent.Each Frame.__weakref__:None
CodeComponent.Each Frame.valType:extendedCode
CodeComponent.Each Frame.staticUpdater:None
CodeComponent.Each Frame.val:
CodeComponent.Each Frame.allowedTypes:[]
CodeComponent.Each Frame.hint:Code to be run on every video frame during for the duration of this Routine; right-click checks syntax
CodeComponent.Each Frame.allowedUpdates:[]
CodeComponent.Each Frame.__class__:<class 'psychopy.app.builder.experiment.Param'>
CodeComponent.Each Frame.label:Each Frame
DotsComponent.order:['name']
DotsComponent.color.default:[1.0,1.0,1.0]
DotsComponent.color.categ:Basic
DotsComponent.color.allowedVals:[]
DotsComponent.color.readOnly:False
DotsComponent.color.updates:constant
DotsComponent.color.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '$[1.0,1.0,1.0]', 'hint': u'Color of this stimulus (e.g. $[1,1,0], red ); Right-click to bring up a color-picker (rgb only)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Color', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
DotsComponent.color.__weakref__:None
DotsComponent.color.valType:str
DotsComponent.color.staticUpdater:None
DotsComponent.color.val:$[1.0,1.0,1.0]
DotsComponent.color.allowedTypes:[]
DotsComponent.color.hint:Color of this stimulus (e.g. $[1,1,0], red ); Right-click to bring up a color-picker (rgb only)
DotsComponent.color.allowedUpdates:['constant', 'set every repeat', 'set every frame']
DotsComponent.color.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.color.label:Color
DotsComponent.colorSpace.default:'rgb'
DotsComponent.colorSpace.categ:Basic
DotsComponent.colorSpace.allowedVals:['rgb', 'dkl', 'lms', 'hsv']
DotsComponent.colorSpace.readOnly:False
DotsComponent.colorSpace.updates:constant
DotsComponent.colorSpace.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'rgb', 'hint': u'Choice of color space for the color (rgb, dkl, lms, hsv)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['rgb', 'dkl', 'lms', 'hsv'], 'label': u'Color space', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
DotsComponent.colorSpace.__weakref__:None
DotsComponent.colorSpace.valType:str
DotsComponent.colorSpace.staticUpdater:None
DotsComponent.colorSpace.val:rgb
DotsComponent.colorSpace.allowedTypes:[]
DotsComponent.colorSpace.hint:Choice of color space for the color (rgb, dkl, lms, hsv)
DotsComponent.colorSpace.allowedUpdates:None
DotsComponent.colorSpace.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.colorSpace.label:Color space
DotsComponent.startVal.default:0.0
DotsComponent.startVal.categ:Basic
DotsComponent.startVal.allowedVals:[]
DotsComponent.startVal.readOnly:False
DotsComponent.startVal.updates:None
DotsComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
DotsComponent.startVal.__weakref__:None
DotsComponent.startVal.valType:code
DotsComponent.startVal.staticUpdater:None
DotsComponent.startVal.val:0.0
DotsComponent.startVal.allowedTypes:[]
DotsComponent.startVal.hint:When does the component start?
DotsComponent.startVal.allowedUpdates:None
DotsComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.startVal.label:Start
DotsComponent.fieldPos.default:(0.0, 0.0)
DotsComponent.fieldPos.categ:Basic
DotsComponent.fieldPos.allowedVals:[]
DotsComponent.fieldPos.readOnly:False
DotsComponent.fieldPos.updates:constant
DotsComponent.fieldPos.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': (0.0, 0.0), 'hint': u'Where is the field centred (in the specified units)?', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Field position', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
DotsComponent.fieldPos.__weakref__:None
DotsComponent.fieldPos.valType:code
DotsComponent.fieldPos.staticUpdater:None
DotsComponent.fieldPos.val:(0.0, 0.0)
DotsComponent.fieldPos.allowedTypes:[]
DotsComponent.fieldPos.hint:Where is the field centred (in the specified units)?
DotsComponent.fieldPos.allowedUpdates:['constant', 'set every repeat', 'set every frame']
DotsComponent.fieldPos.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.fieldPos.label:Field position
DotsComponent.speed.default:0.1
DotsComponent.speed.categ:Dots
DotsComponent.speed.allowedVals:[]
DotsComponent.speed.readOnly:False
DotsComponent.speed.updates:constant
DotsComponent.speed.__dict__:{'staticUpdater': None, 'categ': 'Dots', 'val': 0.1, 'hint': u'Speed of the dots (displacement per frame in the specified units)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Speed', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
DotsComponent.speed.__weakref__:None
DotsComponent.speed.valType:code
DotsComponent.speed.staticUpdater:None
DotsComponent.speed.val:0.1
DotsComponent.speed.allowedTypes:[]
DotsComponent.speed.hint:Speed of the dots (displacement per frame in the specified units)
DotsComponent.speed.allowedUpdates:['constant', 'set every repeat', 'set every frame']
DotsComponent.speed.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.speed.label:Speed
DotsComponent.noiseDots.default:'direction'
DotsComponent.noiseDots.categ:Dots
DotsComponent.noiseDots.allowedVals:['direction', 'position', 'walk']
DotsComponent.noiseDots.readOnly:False
DotsComponent.noiseDots.updates:None
DotsComponent.noiseDots.__dict__:{'staticUpdater': None, 'categ': 'Dots', 'val': 'direction', 'hint': u'What governs the behaviour of the noise dots? See Scase et al.', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['direction', 'position', 'walk'], 'label': u'Noise dots', 'readOnly': False, 'updates': None, 'valType': 'str'}
DotsComponent.noiseDots.__weakref__:None
DotsComponent.noiseDots.valType:str
DotsComponent.noiseDots.staticUpdater:None
DotsComponent.noiseDots.val:direction
DotsComponent.noiseDots.allowedTypes:[]
DotsComponent.noiseDots.hint:What governs the behaviour of the noise dots? See Scase et al.
DotsComponent.noiseDots.allowedUpdates:None
DotsComponent.noiseDots.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.noiseDots.label:Noise dots
DotsComponent.dotLife.default:3
DotsComponent.dotLife.categ:Dots
DotsComponent.dotLife.allowedVals:[]
DotsComponent.dotLife.readOnly:False
DotsComponent.dotLife.updates:None
DotsComponent.dotLife.__dict__:{'staticUpdater': None, 'categ': 'Dots', 'val': 3, 'hint': u'Number of frames before each dot is killed and randomly assigned a new position', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Dot life-time', 'readOnly': False, 'updates': None, 'valType': 'code'}
DotsComponent.dotLife.__weakref__:None
DotsComponent.dotLife.valType:code
DotsComponent.dotLife.staticUpdater:None
DotsComponent.dotLife.val:3
DotsComponent.dotLife.allowedTypes:[]
DotsComponent.dotLife.hint:Number of frames before each dot is killed and randomly assigned a new position
DotsComponent.dotLife.allowedUpdates:None
DotsComponent.dotLife.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.dotLife.label:Dot life-time
DotsComponent.units.default:'from exp settings'
DotsComponent.units.categ:Basic
DotsComponent.units.allowedVals:['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat']
DotsComponent.units.readOnly:False
DotsComponent.units.updates:None
DotsComponent.units.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'from exp settings', 'hint': u'Units of dimensions for this stimulus', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat'], 'label': u'Units', 'readOnly': False, 'updates': None, 'valType': 'str'}
DotsComponent.units.__weakref__:None
DotsComponent.units.valType:str
DotsComponent.units.staticUpdater:None
DotsComponent.units.val:from exp settings
DotsComponent.units.allowedTypes:[]
DotsComponent.units.hint:Units of dimensions for this stimulus
DotsComponent.units.allowedUpdates:None
DotsComponent.units.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.units.label:Units
DotsComponent.refreshDots.default:'repeat'
DotsComponent.refreshDots.categ:Dots
DotsComponent.refreshDots.allowedVals:['none', 'repeat']
DotsComponent.refreshDots.readOnly:False
DotsComponent.refreshDots.updates:None
DotsComponent.refreshDots.__dict__:{'staticUpdater': None, 'categ': 'Dots', 'val': 'repeat', 'hint': u'When should the whole sample of dots be refreshed', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': ['none', 'repeat'], 'label': u'Dot refresh rule', 'readOnly': False, 'updates': None, 'valType': 'str'}
DotsComponent.refreshDots.__weakref__:None
DotsComponent.refreshDots.valType:str
DotsComponent.refreshDots.staticUpdater:None
DotsComponent.refreshDots.val:repeat
DotsComponent.refreshDots.allowedTypes:[]
DotsComponent.refreshDots.hint:When should the whole sample of dots be refreshed
DotsComponent.refreshDots.allowedUpdates:[]
DotsComponent.refreshDots.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.refreshDots.label:Dot refresh rule
DotsComponent.opacity.default:1
DotsComponent.opacity.categ:Basic
DotsComponent.opacity.allowedVals:[]
DotsComponent.opacity.readOnly:False
DotsComponent.opacity.updates:constant
DotsComponent.opacity.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1, 'hint': u'Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Opacity', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
DotsComponent.opacity.__weakref__:None
DotsComponent.opacity.valType:code
DotsComponent.opacity.staticUpdater:None
DotsComponent.opacity.val:1
DotsComponent.opacity.allowedTypes:[]
DotsComponent.opacity.hint:Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)
DotsComponent.opacity.allowedUpdates:['constant', 'set every repeat', 'set every frame']
DotsComponent.opacity.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.opacity.label:Opacity
DotsComponent.fieldShape.default:'circle'
DotsComponent.fieldShape.categ:Basic
DotsComponent.fieldShape.allowedVals:['circle', 'square']
DotsComponent.fieldShape.readOnly:False
DotsComponent.fieldShape.updates:constant
DotsComponent.fieldShape.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'circle', 'hint': u'What is the shape of the field?', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': ['circle', 'square'], 'label': u'Field shape', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
DotsComponent.fieldShape.__weakref__:None
DotsComponent.fieldShape.valType:str
DotsComponent.fieldShape.staticUpdater:None
DotsComponent.fieldShape.val:circle
DotsComponent.fieldShape.allowedTypes:[]
DotsComponent.fieldShape.hint:What is the shape of the field?
DotsComponent.fieldShape.allowedUpdates:['constant', 'set every repeat', 'set every frame']
DotsComponent.fieldShape.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.fieldShape.label:Field shape
DotsComponent.coherence.default:1.0
DotsComponent.coherence.categ:Dots
DotsComponent.coherence.allowedVals:[]
DotsComponent.coherence.readOnly:False
DotsComponent.coherence.updates:constant
DotsComponent.coherence.__dict__:{'staticUpdater': None, 'categ': 'Dots', 'val': 1.0, 'hint': u'Coherence of the dots (fraction moving in the signal direction on any one frame)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Coherence', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
DotsComponent.coherence.__weakref__:None
DotsComponent.coherence.valType:code
DotsComponent.coherence.staticUpdater:None
DotsComponent.coherence.val:1.0
DotsComponent.coherence.allowedTypes:[]
DotsComponent.coherence.hint:Coherence of the dots (fraction moving in the signal direction on any one frame)
DotsComponent.coherence.allowedUpdates:['constant', 'set every repeat', 'set every frame']
DotsComponent.coherence.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.coherence.label:Coherence
DotsComponent.nDots.default:100
DotsComponent.nDots.categ:Dots
DotsComponent.nDots.allowedVals:[]
DotsComponent.nDots.readOnly:False
DotsComponent.nDots.updates:constant
DotsComponent.nDots.__dict__:{'staticUpdater': None, 'categ': 'Dots', 'val': 100, 'hint': u'Number of dots in the field (for circular fields this will be average number of dots)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Number of dots', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
DotsComponent.nDots.__weakref__:None
DotsComponent.nDots.valType:code
DotsComponent.nDots.staticUpdater:None
DotsComponent.nDots.val:100
DotsComponent.nDots.allowedTypes:[]
DotsComponent.nDots.hint:Number of dots in the field (for circular fields this will be average number of dots)
DotsComponent.nDots.allowedUpdates:None
DotsComponent.nDots.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.nDots.label:Number of dots
DotsComponent.stopVal.default:1.0
DotsComponent.stopVal.categ:Basic
DotsComponent.stopVal.allowedVals:[]
DotsComponent.stopVal.readOnly:False
DotsComponent.stopVal.updates:constant
DotsComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1.0, 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
DotsComponent.stopVal.__weakref__:None
DotsComponent.stopVal.valType:code
DotsComponent.stopVal.staticUpdater:None
DotsComponent.stopVal.val:1.0
DotsComponent.stopVal.allowedTypes:[]
DotsComponent.stopVal.hint:When does the component end? (blank is endless)
DotsComponent.stopVal.allowedUpdates:[]
DotsComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.stopVal.label:Stop
DotsComponent.durationEstim.default:
DotsComponent.durationEstim.categ:Basic
DotsComponent.durationEstim.allowedVals:[]
DotsComponent.durationEstim.readOnly:False
DotsComponent.durationEstim.updates:None
DotsComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
DotsComponent.durationEstim.__weakref__:None
DotsComponent.durationEstim.valType:code
DotsComponent.durationEstim.staticUpdater:None
DotsComponent.durationEstim.val:
DotsComponent.durationEstim.allowedTypes:[]
DotsComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
DotsComponent.durationEstim.allowedUpdates:None
DotsComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.durationEstim.label:Expected duration (s)
DotsComponent.fieldSize.default:1.0
DotsComponent.fieldSize.categ:Basic
DotsComponent.fieldSize.allowedVals:[]
DotsComponent.fieldSize.readOnly:False
DotsComponent.fieldSize.updates:constant
DotsComponent.fieldSize.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1.0, 'hint': u'What is the size of the field (in the specified units)?', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Field size', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
DotsComponent.fieldSize.__weakref__:None
DotsComponent.fieldSize.valType:code
DotsComponent.fieldSize.staticUpdater:None
DotsComponent.fieldSize.val:1.0
DotsComponent.fieldSize.allowedTypes:[]
DotsComponent.fieldSize.hint:What is the size of the field (in the specified units)?
DotsComponent.fieldSize.allowedUpdates:['constant', 'set every repeat', 'set every frame']
DotsComponent.fieldSize.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.fieldSize.label:Field size
DotsComponent.startEstim.default:
DotsComponent.startEstim.categ:Basic
DotsComponent.startEstim.allowedVals:[]
DotsComponent.startEstim.readOnly:False
DotsComponent.startEstim.updates:None
DotsComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
DotsComponent.startEstim.__weakref__:None
DotsComponent.startEstim.valType:code
DotsComponent.startEstim.staticUpdater:None
DotsComponent.startEstim.val:
DotsComponent.startEstim.allowedTypes:[]
DotsComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
DotsComponent.startEstim.allowedUpdates:None
DotsComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.startEstim.label:Expected start (s)
DotsComponent.signalDots.default:'same'
DotsComponent.signalDots.categ:Dots
DotsComponent.signalDots.allowedVals:['same', 'different']
DotsComponent.signalDots.readOnly:False
DotsComponent.signalDots.updates:None
DotsComponent.signalDots.__dict__:{'staticUpdater': None, 'categ': 'Dots', 'val': 'same', 'hint': u'On each frame are the signals dots remaining the same or changing? See Scase et al.', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['same', 'different'], 'label': u'Signal dots', 'readOnly': False, 'updates': None, 'valType': 'str'}
DotsComponent.signalDots.__weakref__:None
DotsComponent.signalDots.valType:str
DotsComponent.signalDots.staticUpdater:None
DotsComponent.signalDots.val:same
DotsComponent.signalDots.allowedTypes:[]
DotsComponent.signalDots.hint:On each frame are the signals dots remaining the same or changing? See Scase et al.
DotsComponent.signalDots.allowedUpdates:None
DotsComponent.signalDots.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.signalDots.label:Signal dots
DotsComponent.startType.default:'time (s)'
DotsComponent.startType.categ:Basic
DotsComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
DotsComponent.startType.readOnly:False
DotsComponent.startType.updates:None
DotsComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
DotsComponent.startType.__weakref__:None
DotsComponent.startType.valType:str
DotsComponent.startType.staticUpdater:None
DotsComponent.startType.val:time (s)
DotsComponent.startType.allowedTypes:[]
DotsComponent.startType.hint:How do you want to define your start point?
DotsComponent.startType.allowedUpdates:None
DotsComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.startType.label:start type
DotsComponent.stopType.default:'duration (s)'
DotsComponent.stopType.categ:Basic
DotsComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
DotsComponent.stopType.readOnly:False
DotsComponent.stopType.updates:None
DotsComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
DotsComponent.stopType.__weakref__:None
DotsComponent.stopType.valType:str
DotsComponent.stopType.staticUpdater:None
DotsComponent.stopType.val:duration (s)
DotsComponent.stopType.allowedTypes:[]
DotsComponent.stopType.hint:How do you want to define your end point?
DotsComponent.stopType.allowedUpdates:None
DotsComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.stopType.label:stop type
DotsComponent.name.default:dots
DotsComponent.name.categ:Basic
DotsComponent.name.allowedVals:[]
DotsComponent.name.readOnly:False
DotsComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'dots', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
DotsComponent.name.__weakref__:None
DotsComponent.name.valType:code
DotsComponent.name.staticUpdater:None
DotsComponent.name.val:dots
DotsComponent.name.allowedTypes:[]
DotsComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
DotsComponent.name.allowedUpdates:None
DotsComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.name.label:Name
DotsComponent.dotSize.default:2
DotsComponent.dotSize.categ:Dots
DotsComponent.dotSize.allowedVals:[]
DotsComponent.dotSize.readOnly:False
DotsComponent.dotSize.updates:constant
DotsComponent.dotSize.__dict__:{'staticUpdater': None, 'categ': 'Dots', 'val': 2, 'hint': u'Size of the dots IN PIXELS regardless of the set units', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Dot size', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
DotsComponent.dotSize.__weakref__:None
DotsComponent.dotSize.valType:code
DotsComponent.dotSize.staticUpdater:None
DotsComponent.dotSize.val:2
DotsComponent.dotSize.allowedTypes:[]
DotsComponent.dotSize.hint:Size of the dots IN PIXELS regardless of the set units
DotsComponent.dotSize.allowedUpdates:['constant', 'set every repeat', 'set every frame']
DotsComponent.dotSize.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.dotSize.label:Dot size
DotsComponent.dir.default:0.0
DotsComponent.dir.categ:Dots
DotsComponent.dir.allowedVals:[]
DotsComponent.dir.readOnly:False
DotsComponent.dir.updates:constant
DotsComponent.dir.__dict__:{'staticUpdater': None, 'categ': 'Dots', 'val': 0.0, 'hint': u'Direction of motion for the signal dots (degrees)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Direction', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
DotsComponent.dir.__weakref__:None
DotsComponent.dir.valType:code
DotsComponent.dir.staticUpdater:None
DotsComponent.dir.val:0.0
DotsComponent.dir.allowedTypes:[]
DotsComponent.dir.hint:Direction of motion for the signal dots (degrees)
DotsComponent.dir.allowedUpdates:['constant', 'set every repeat', 'set every frame']
DotsComponent.dir.__class__:<class 'psychopy.app.builder.experiment.Param'>
DotsComponent.dir.label:Direction
EnvGratingComponent.order:['carrier', 'mask']
EnvGratingComponent.color.default:[1,1,1]
EnvGratingComponent.color.categ:Basic
EnvGratingComponent.color.allowedVals:[]
EnvGratingComponent.color.readOnly:False
EnvGratingComponent.color.updates:constant
EnvGratingComponent.color.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '$[1,1,1]', 'hint': u'Color of this stimulus (e.g. $[1,1,0], red ); Right-click to bring up a color-picker (rgb only)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Color', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
EnvGratingComponent.color.__weakref__:None
EnvGratingComponent.color.valType:str
EnvGratingComponent.color.staticUpdater:None
EnvGratingComponent.color.val:$[1,1,1]
EnvGratingComponent.color.allowedTypes:[]
EnvGratingComponent.color.hint:Color of this stimulus (e.g. $[1,1,0], red ); Right-click to bring up a color-picker (rgb only)
EnvGratingComponent.color.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.color.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.color.label:Color
EnvGratingComponent.colorSpace.default:'rgb'
EnvGratingComponent.colorSpace.categ:Basic
EnvGratingComponent.colorSpace.allowedVals:['rgb', 'dkl', 'lms', 'hsv']
EnvGratingComponent.colorSpace.readOnly:False
EnvGratingComponent.colorSpace.updates:constant
EnvGratingComponent.colorSpace.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'rgb', 'hint': u'Choice of color space for the color (rgb, dkl, lms, hsv)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['rgb', 'dkl', 'lms', 'hsv'], 'label': u'Color space', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
EnvGratingComponent.colorSpace.__weakref__:None
EnvGratingComponent.colorSpace.valType:str
EnvGratingComponent.colorSpace.staticUpdater:None
EnvGratingComponent.colorSpace.val:rgb
EnvGratingComponent.colorSpace.allowedTypes:[]
EnvGratingComponent.colorSpace.hint:Choice of color space for the color (rgb, dkl, lms, hsv)
EnvGratingComponent.colorSpace.allowedUpdates:None
EnvGratingComponent.colorSpace.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.colorSpace.label:Color space
EnvGratingComponent.pos.default:(0, 0)
EnvGratingComponent.pos.categ:Basic
EnvGratingComponent.pos.allowedVals:[]
EnvGratingComponent.pos.readOnly:False
EnvGratingComponent.pos.updates:constant
EnvGratingComponent.pos.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': (0, 0), 'hint': u'Position of this stimulus (e.g. [1,2] )', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Position [x,y]', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
EnvGratingComponent.pos.__weakref__:None
EnvGratingComponent.pos.valType:code
EnvGratingComponent.pos.staticUpdater:None
EnvGratingComponent.pos.val:(0, 0)
EnvGratingComponent.pos.allowedTypes:[]
EnvGratingComponent.pos.hint:Position of this stimulus (e.g. [1,2] )
EnvGratingComponent.pos.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.pos.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.pos.label:Position [x,y]
EnvGratingComponent.stopType.default:'duration (s)'
EnvGratingComponent.stopType.categ:Basic
EnvGratingComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
EnvGratingComponent.stopType.readOnly:False
EnvGratingComponent.stopType.updates:None
EnvGratingComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
EnvGratingComponent.stopType.__weakref__:None
EnvGratingComponent.stopType.valType:str
EnvGratingComponent.stopType.staticUpdater:None
EnvGratingComponent.stopType.val:duration (s)
EnvGratingComponent.stopType.allowedTypes:[]
EnvGratingComponent.stopType.hint:How do you want to define your end point?
EnvGratingComponent.stopType.allowedUpdates:None
EnvGratingComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.stopType.label:stop type
EnvGratingComponent.blendmode.default:'avg'
EnvGratingComponent.blendmode.categ:Basic
EnvGratingComponent.blendmode.allowedVals:[]
EnvGratingComponent.blendmode.readOnly:False
EnvGratingComponent.blendmode.updates:constant
EnvGratingComponent.blendmode.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'avg', 'hint': u'OpenGL Blendmode [avg, add (avg is most common mode in PsychoPy, add is useful if combining a beat with the carrier image or numpy array at point of display)]', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'OpenGL blend mode', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
EnvGratingComponent.blendmode.__weakref__:None
EnvGratingComponent.blendmode.valType:str
EnvGratingComponent.blendmode.staticUpdater:None
EnvGratingComponent.blendmode.val:avg
EnvGratingComponent.blendmode.allowedTypes:[]
EnvGratingComponent.blendmode.hint:OpenGL Blendmode [avg, add (avg is most common mode in PsychoPy, add is useful if combining a beat with the carrier image or numpy array at point of display)]
EnvGratingComponent.blendmode.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.blendmode.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.blendmode.label:OpenGL blend mode
EnvGratingComponent.startVal.default:0.0
EnvGratingComponent.startVal.categ:Basic
EnvGratingComponent.startVal.allowedVals:[]
EnvGratingComponent.startVal.readOnly:False
EnvGratingComponent.startVal.updates:None
EnvGratingComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
EnvGratingComponent.startVal.__weakref__:None
EnvGratingComponent.startVal.valType:code
EnvGratingComponent.startVal.staticUpdater:None
EnvGratingComponent.startVal.val:0.0
EnvGratingComponent.startVal.allowedTypes:[]
EnvGratingComponent.startVal.hint:When does the component start?
EnvGratingComponent.startVal.allowedUpdates:None
EnvGratingComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.startVal.label:Start
EnvGratingComponent.size.default:(0.5, 0.5)
EnvGratingComponent.size.categ:Basic
EnvGratingComponent.size.allowedVals:[]
EnvGratingComponent.size.readOnly:False
EnvGratingComponent.size.updates:constant
EnvGratingComponent.size.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': (0.5, 0.5), 'hint': u'Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Size [w,h]', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
EnvGratingComponent.size.__weakref__:None
EnvGratingComponent.size.valType:code
EnvGratingComponent.size.staticUpdater:None
EnvGratingComponent.size.val:(0.5, 0.5)
EnvGratingComponent.size.allowedTypes:[]
EnvGratingComponent.size.hint:Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2]
EnvGratingComponent.size.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.size.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.size.label:Size [w,h]
EnvGratingComponent.units.default:'from exp settings'
EnvGratingComponent.units.categ:Basic
EnvGratingComponent.units.allowedVals:['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat']
EnvGratingComponent.units.readOnly:False
EnvGratingComponent.units.updates:None
EnvGratingComponent.units.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'from exp settings', 'hint': u'Units of dimensions for this stimulus', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat'], 'label': u'Units', 'readOnly': False, 'updates': None, 'valType': 'str'}
EnvGratingComponent.units.__weakref__:None
EnvGratingComponent.units.valType:str
EnvGratingComponent.units.staticUpdater:None
EnvGratingComponent.units.val:from exp settings
EnvGratingComponent.units.allowedTypes:[]
EnvGratingComponent.units.hint:Units of dimensions for this stimulus
EnvGratingComponent.units.allowedUpdates:None
EnvGratingComponent.units.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.units.label:Units
EnvGratingComponent.contrast.default:0.5
EnvGratingComponent.contrast.categ:Carrier
EnvGratingComponent.contrast.allowedVals:[]
EnvGratingComponent.contrast.readOnly:False
EnvGratingComponent.contrast.updates:constant
EnvGratingComponent.contrast.__dict__:{'staticUpdater': None, 'categ': 'Carrier', 'val': 0.5, 'hint': u'Contrast of background carrier', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Carrier contrast', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
EnvGratingComponent.contrast.__weakref__:None
EnvGratingComponent.contrast.valType:code
EnvGratingComponent.contrast.staticUpdater:None
EnvGratingComponent.contrast.val:0.5
EnvGratingComponent.contrast.allowedTypes:[]
EnvGratingComponent.contrast.hint:Contrast of background carrier
EnvGratingComponent.contrast.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.contrast.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.contrast.label:Carrier contrast
EnvGratingComponent.opacity.default:1
EnvGratingComponent.opacity.categ:Basic
EnvGratingComponent.opacity.allowedVals:[]
EnvGratingComponent.opacity.readOnly:False
EnvGratingComponent.opacity.updates:constant
EnvGratingComponent.opacity.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1, 'hint': u'Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Opacity', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
EnvGratingComponent.opacity.__weakref__:None
EnvGratingComponent.opacity.valType:code
EnvGratingComponent.opacity.staticUpdater:None
EnvGratingComponent.opacity.val:1
EnvGratingComponent.opacity.allowedTypes:[]
EnvGratingComponent.opacity.hint:Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)
EnvGratingComponent.opacity.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.opacity.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.opacity.label:Opacity
EnvGratingComponent.moddepth.default:1.0
EnvGratingComponent.moddepth.categ:Envelope
EnvGratingComponent.moddepth.allowedVals:[]
EnvGratingComponent.moddepth.readOnly:False
EnvGratingComponent.moddepth.updates:constant
EnvGratingComponent.moddepth.__dict__:{'staticUpdater': None, 'categ': 'Envelope', 'val': 1.0, 'hint': u'Modulation depth of modulation envelope', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Envelope modulation depth', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
EnvGratingComponent.moddepth.__weakref__:None
EnvGratingComponent.moddepth.valType:code
EnvGratingComponent.moddepth.staticUpdater:None
EnvGratingComponent.moddepth.val:1.0
EnvGratingComponent.moddepth.allowedTypes:[]
EnvGratingComponent.moddepth.hint:Modulation depth of modulation envelope
EnvGratingComponent.moddepth.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.moddepth.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.moddepth.label:Envelope modulation depth
EnvGratingComponent.beat.default:False
EnvGratingComponent.beat.categ:Envelope
EnvGratingComponent.beat.allowedVals:[]
EnvGratingComponent.beat.readOnly:False
EnvGratingComponent.beat.updates:constant
EnvGratingComponent.beat.__dict__:{'staticUpdater': None, 'categ': 'Envelope', 'val': False, 'hint': u"Do you want a 'beat'? [beat = carrier*envelope, no beat = carrier*(1+envelope), True/False, Y/N]", 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Is modulation a beat', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
EnvGratingComponent.beat.__weakref__:None
EnvGratingComponent.beat.valType:str
EnvGratingComponent.beat.staticUpdater:None
EnvGratingComponent.beat.val:False
EnvGratingComponent.beat.allowedTypes:[]
EnvGratingComponent.beat.hint:Do you want a 'beat'? [beat = carrier*envelope, no beat = carrier*(1+envelope), True/False, Y/N]
EnvGratingComponent.beat.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.beat.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.beat.label:Is modulation a beat
EnvGratingComponent.envori.default:0.0
EnvGratingComponent.envori.categ:Envelope
EnvGratingComponent.envori.allowedVals:[]
EnvGratingComponent.envori.readOnly:False
EnvGratingComponent.envori.updates:constant
EnvGratingComponent.envori.__dict__:{'staticUpdater': None, 'categ': 'Envelope', 'val': 0.0, 'hint': u'Orientation of the modulation envelope(wraps in range 0-360)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Envelope orientation', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
EnvGratingComponent.envori.__weakref__:None
EnvGratingComponent.envori.valType:code
EnvGratingComponent.envori.staticUpdater:None
EnvGratingComponent.envori.val:0.0
EnvGratingComponent.envori.allowedTypes:[]
EnvGratingComponent.envori.hint:Orientation of the modulation envelope(wraps in range 0-360)
EnvGratingComponent.envori.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.envori.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.envori.label:Envelope orientation
EnvGratingComponent.stopVal.default:1.0
EnvGratingComponent.stopVal.categ:Basic
EnvGratingComponent.stopVal.allowedVals:[]
EnvGratingComponent.stopVal.readOnly:False
EnvGratingComponent.stopVal.updates:constant
EnvGratingComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1.0, 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
EnvGratingComponent.stopVal.__weakref__:None
EnvGratingComponent.stopVal.valType:code
EnvGratingComponent.stopVal.staticUpdater:None
EnvGratingComponent.stopVal.val:1.0
EnvGratingComponent.stopVal.allowedTypes:[]
EnvGratingComponent.stopVal.hint:When does the component end? (blank is endless)
EnvGratingComponent.stopVal.allowedUpdates:[]
EnvGratingComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.stopVal.label:Stop
EnvGratingComponent.durationEstim.default:
EnvGratingComponent.durationEstim.categ:Basic
EnvGratingComponent.durationEstim.allowedVals:[]
EnvGratingComponent.durationEstim.readOnly:False
EnvGratingComponent.durationEstim.updates:None
EnvGratingComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
EnvGratingComponent.durationEstim.__weakref__:None
EnvGratingComponent.durationEstim.valType:code
EnvGratingComponent.durationEstim.staticUpdater:None
EnvGratingComponent.durationEstim.val:
EnvGratingComponent.durationEstim.allowedTypes:[]
EnvGratingComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
EnvGratingComponent.durationEstim.allowedUpdates:None
EnvGratingComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.durationEstim.label:Expected duration (s)
EnvGratingComponent.envelope.default:'sin'
EnvGratingComponent.envelope.categ:Envelope
EnvGratingComponent.envelope.allowedVals:[]
EnvGratingComponent.envelope.readOnly:False
EnvGratingComponent.envelope.updates:constant
EnvGratingComponent.envelope.__dict__:{'staticUpdater': None, 'categ': 'Envelope', 'val': 'sin', 'hint': u'The (2D) texture of the envelope - can be sin, sqr, sinXsin... or a filename (including path)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Envelope Texture', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
EnvGratingComponent.envelope.__weakref__:None
EnvGratingComponent.envelope.valType:str
EnvGratingComponent.envelope.staticUpdater:None
EnvGratingComponent.envelope.val:sin
EnvGratingComponent.envelope.allowedTypes:[]
EnvGratingComponent.envelope.hint:The (2D) texture of the envelope - can be sin, sqr, sinXsin... or a filename (including path)
EnvGratingComponent.envelope.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.envelope.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.envelope.label:Envelope Texture
EnvGratingComponent.interpolate.default:'linear'
EnvGratingComponent.interpolate.categ:Carrier
EnvGratingComponent.interpolate.allowedVals:['linear', 'nearest']
EnvGratingComponent.interpolate.readOnly:False
EnvGratingComponent.interpolate.updates:constant
EnvGratingComponent.interpolate.__dict__:{'staticUpdater': None, 'categ': 'Carrier', 'val': 'linear', 'hint': u'How should the image be interpolated if/when rescaled', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': ['linear', 'nearest'], 'label': u'Interpolate', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
EnvGratingComponent.interpolate.__weakref__:None
EnvGratingComponent.interpolate.valType:str
EnvGratingComponent.interpolate.staticUpdater:None
EnvGratingComponent.interpolate.val:linear
EnvGratingComponent.interpolate.allowedTypes:[]
EnvGratingComponent.interpolate.hint:How should the image be interpolated if/when rescaled
EnvGratingComponent.interpolate.allowedUpdates:[]
EnvGratingComponent.interpolate.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.interpolate.label:Interpolate
EnvGratingComponent.startEstim.default:
EnvGratingComponent.startEstim.categ:Basic
EnvGratingComponent.startEstim.allowedVals:[]
EnvGratingComponent.startEstim.readOnly:False
EnvGratingComponent.startEstim.updates:None
EnvGratingComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
EnvGratingComponent.startEstim.__weakref__:None
EnvGratingComponent.startEstim.valType:code
EnvGratingComponent.startEstim.staticUpdater:None
EnvGratingComponent.startEstim.val:
EnvGratingComponent.startEstim.allowedTypes:[]
EnvGratingComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
EnvGratingComponent.startEstim.allowedUpdates:None
EnvGratingComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.startEstim.label:Expected start (s)
EnvGratingComponent.startType.default:'time (s)'
EnvGratingComponent.startType.categ:Basic
EnvGratingComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
EnvGratingComponent.startType.readOnly:False
EnvGratingComponent.startType.updates:None
EnvGratingComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
EnvGratingComponent.startType.__weakref__:None
EnvGratingComponent.startType.valType:str
EnvGratingComponent.startType.staticUpdater:None
EnvGratingComponent.startType.val:time (s)
EnvGratingComponent.startType.allowedTypes:[]
EnvGratingComponent.startType.hint:How do you want to define your start point?
EnvGratingComponent.startType.allowedUpdates:None
EnvGratingComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.startType.label:start type
EnvGratingComponent.ori.default:0
EnvGratingComponent.ori.categ:Carrier
EnvGratingComponent.ori.allowedVals:[]
EnvGratingComponent.ori.readOnly:False
EnvGratingComponent.ori.updates:constant
EnvGratingComponent.ori.__dict__:{'staticUpdater': None, 'categ': 'Carrier', 'val': 0, 'hint': u'Orientation of this stimulus (in deg)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Carrier Orientation', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
EnvGratingComponent.ori.__weakref__:None
EnvGratingComponent.ori.valType:code
EnvGratingComponent.ori.staticUpdater:None
EnvGratingComponent.ori.val:0
EnvGratingComponent.ori.allowedTypes:[]
EnvGratingComponent.ori.hint:Orientation of this stimulus (in deg)
EnvGratingComponent.ori.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.ori.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.ori.label:Carrier Orientation
EnvGratingComponent.phase.default:0.0
EnvGratingComponent.phase.categ:Carrier
EnvGratingComponent.phase.allowedVals:[]
EnvGratingComponent.phase.readOnly:False
EnvGratingComponent.phase.updates:constant
EnvGratingComponent.phase.__dict__:{'staticUpdater': None, 'categ': 'Carrier', 'val': 0.0, 'hint': u'Spatial positioning of the background carrier (wraps in range 0-1.0)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Carrier phase (in cycles)', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
EnvGratingComponent.phase.__weakref__:None
EnvGratingComponent.phase.valType:code
EnvGratingComponent.phase.staticUpdater:None
EnvGratingComponent.phase.val:0.0
EnvGratingComponent.phase.allowedTypes:[]
EnvGratingComponent.phase.hint:Spatial positioning of the background carrier (wraps in range 0-1.0)
EnvGratingComponent.phase.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.phase.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.phase.label:Carrier phase (in cycles)
EnvGratingComponent.texture resolution.default:128
EnvGratingComponent.texture resolution.categ:Carrier
EnvGratingComponent.texture resolution.allowedVals:['32', '64', '128', '256', '512']
EnvGratingComponent.texture resolution.readOnly:False
EnvGratingComponent.texture resolution.updates:constant
EnvGratingComponent.texture resolution.__dict__:{'staticUpdater': None, 'categ': 'Carrier', 'val': '128', 'hint': u'Resolution of the texture for standard ones such as sin, sqr etc. For most cases a value of 256 pixels will suffice', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': ['32', '64', '128', '256', '512'], 'label': u'Texture resolution', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
EnvGratingComponent.texture resolution.__weakref__:None
EnvGratingComponent.texture resolution.valType:code
EnvGratingComponent.texture resolution.staticUpdater:None
EnvGratingComponent.texture resolution.val:128
EnvGratingComponent.texture resolution.allowedTypes:[]
EnvGratingComponent.texture resolution.hint:Resolution of the texture for standard ones such as sin, sqr etc. For most cases a value of 256 pixels will suffice
EnvGratingComponent.texture resolution.allowedUpdates:[]
EnvGratingComponent.texture resolution.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.texture resolution.label:Texture resolution
EnvGratingComponent.name.default:env_grating
EnvGratingComponent.name.categ:Basic
EnvGratingComponent.name.allowedVals:[]
EnvGratingComponent.name.readOnly:False
EnvGratingComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'env_grating', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
EnvGratingComponent.name.__weakref__:None
EnvGratingComponent.name.valType:code
EnvGratingComponent.name.staticUpdater:None
EnvGratingComponent.name.val:env_grating
EnvGratingComponent.name.allowedTypes:[]
EnvGratingComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
EnvGratingComponent.name.allowedUpdates:None
EnvGratingComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.name.label:Name
EnvGratingComponent.envphase.default:0.0
EnvGratingComponent.envphase.categ:Envelope
EnvGratingComponent.envphase.allowedVals:[]
EnvGratingComponent.envphase.readOnly:False
EnvGratingComponent.envphase.updates:constant
EnvGratingComponent.envphase.__dict__:{'staticUpdater': None, 'categ': 'Envelope', 'val': 0.0, 'hint': u'Spatial positioning of the modulation envelope(wraps in range 0-1.0)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Envelope Phase', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
EnvGratingComponent.envphase.__weakref__:None
EnvGratingComponent.envphase.valType:code
EnvGratingComponent.envphase.staticUpdater:None
EnvGratingComponent.envphase.val:0.0
EnvGratingComponent.envphase.allowedTypes:[]
EnvGratingComponent.envphase.hint:Spatial positioning of the modulation envelope(wraps in range 0-1.0)
EnvGratingComponent.envphase.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.envphase.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.envphase.label:Envelope Phase
EnvGratingComponent.envsf.default:1.0
EnvGratingComponent.envsf.categ:Envelope
EnvGratingComponent.envsf.allowedVals:[]
EnvGratingComponent.envsf.readOnly:False
EnvGratingComponent.envsf.updates:constant
EnvGratingComponent.envsf.__dict__:{'staticUpdater': None, 'categ': 'Envelope', 'val': 1.0, 'hint': u'Spatial frequency of the modulation envelope repeats across the grating in 1 or 2 dimensions, e.g. 4 or [2,3]', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Envelope spatial frequecy', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
EnvGratingComponent.envsf.__weakref__:None
EnvGratingComponent.envsf.valType:code
EnvGratingComponent.envsf.staticUpdater:None
EnvGratingComponent.envsf.val:1.0
EnvGratingComponent.envsf.allowedTypes:[]
EnvGratingComponent.envsf.hint:Spatial frequency of the modulation envelope repeats across the grating in 1 or 2 dimensions, e.g. 4 or [2,3]
EnvGratingComponent.envsf.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.envsf.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.envsf.label:Envelope spatial frequecy
EnvGratingComponent.mask.default:'None'
EnvGratingComponent.mask.categ:Carrier
EnvGratingComponent.mask.allowedVals:[]
EnvGratingComponent.mask.readOnly:False
EnvGratingComponent.mask.updates:constant
EnvGratingComponent.mask.__dict__:{'staticUpdater': None, 'categ': 'Carrier', 'val': 'None', 'hint': u'An image to define the alpha mask (ie shape)- gauss, circle... or a filename (including path)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Mask', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
EnvGratingComponent.mask.__weakref__:None
EnvGratingComponent.mask.valType:str
EnvGratingComponent.mask.staticUpdater:None
EnvGratingComponent.mask.val:None
EnvGratingComponent.mask.allowedTypes:[]
EnvGratingComponent.mask.hint:An image to define the alpha mask (ie shape)- gauss, circle... or a filename (including path)
EnvGratingComponent.mask.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.mask.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.mask.label:Mask
EnvGratingComponent.carrier.default:'sin'
EnvGratingComponent.carrier.categ:Carrier
EnvGratingComponent.carrier.allowedVals:[]
EnvGratingComponent.carrier.readOnly:False
EnvGratingComponent.carrier.updates:constant
EnvGratingComponent.carrier.__dict__:{'staticUpdater': None, 'categ': 'Carrier', 'val': 'sin', 'hint': u'The (2D) texture of the background - can be sin, sqr, sinXsin... or a filename (including path)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Carrier texture', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
EnvGratingComponent.carrier.__weakref__:None
EnvGratingComponent.carrier.valType:str
EnvGratingComponent.carrier.staticUpdater:None
EnvGratingComponent.carrier.val:sin
EnvGratingComponent.carrier.allowedTypes:[]
EnvGratingComponent.carrier.hint:The (2D) texture of the background - can be sin, sqr, sinXsin... or a filename (including path)
EnvGratingComponent.carrier.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.carrier.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.carrier.label:Carrier texture
EnvGratingComponent.sf.default:1.0
EnvGratingComponent.sf.categ:Carrier
EnvGratingComponent.sf.allowedVals:[]
EnvGratingComponent.sf.readOnly:False
EnvGratingComponent.sf.updates:constant
EnvGratingComponent.sf.__dict__:{'staticUpdater': None, 'categ': 'Carrier', 'val': 1.0, 'hint': u'Spatial frequency of background carrier repeats across the grating in 1 or 2 dimensions, e.g. 4 or [2,3]', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Carrier spatial frequency', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
EnvGratingComponent.sf.__weakref__:None
EnvGratingComponent.sf.valType:code
EnvGratingComponent.sf.staticUpdater:None
EnvGratingComponent.sf.val:1.0
EnvGratingComponent.sf.allowedTypes:[]
EnvGratingComponent.sf.hint:Spatial frequency of background carrier repeats across the grating in 1 or 2 dimensions, e.g. 4 or [2,3]
EnvGratingComponent.sf.allowedUpdates:['constant', 'set every repeat', 'set every frame']
EnvGratingComponent.sf.__class__:<class 'psychopy.app.builder.experiment.Param'>
EnvGratingComponent.sf.label:Carrier spatial frequency
GratingComponent.order:['tex', 'mask']
GratingComponent.opacity.default:1
GratingComponent.opacity.categ:Basic
GratingComponent.opacity.allowedVals:[]
GratingComponent.opacity.readOnly:False
GratingComponent.opacity.updates:constant
GratingComponent.opacity.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1, 'hint': u'Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Opacity', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
GratingComponent.opacity.__weakref__:None
GratingComponent.opacity.valType:code
GratingComponent.opacity.staticUpdater:None
GratingComponent.opacity.val:1
GratingComponent.opacity.allowedTypes:[]
GratingComponent.opacity.hint:Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)
GratingComponent.opacity.allowedUpdates:['constant', 'set every repeat', 'set every frame']
GratingComponent.opacity.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.opacity.label:Opacity
GratingComponent.tex.default:'sin'
GratingComponent.tex.categ:Grating
GratingComponent.tex.allowedVals:[]
GratingComponent.tex.readOnly:False
GratingComponent.tex.updates:constant
GratingComponent.tex.__dict__:{'staticUpdater': None, 'categ': 'Grating', 'val': 'sin', 'hint': u'The (2D) texture of the grating - can be sin, sqr, sinXsin... or a filename (including path)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Texture', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
GratingComponent.tex.__weakref__:None
GratingComponent.tex.valType:str
GratingComponent.tex.staticUpdater:None
GratingComponent.tex.val:sin
GratingComponent.tex.allowedTypes:[]
GratingComponent.tex.hint:The (2D) texture of the grating - can be sin, sqr, sinXsin... or a filename (including path)
GratingComponent.tex.allowedUpdates:['constant', 'set every repeat', 'set every frame']
GratingComponent.tex.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.tex.label:Texture
GratingComponent.colorSpace.default:'rgb'
GratingComponent.colorSpace.categ:Basic
GratingComponent.colorSpace.allowedVals:['rgb', 'dkl', 'lms', 'hsv']
GratingComponent.colorSpace.readOnly:False
GratingComponent.colorSpace.updates:constant
GratingComponent.colorSpace.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'rgb', 'hint': u'Choice of color space for the color (rgb, dkl, lms, hsv)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['rgb', 'dkl', 'lms', 'hsv'], 'label': u'Color space', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
GratingComponent.colorSpace.__weakref__:None
GratingComponent.colorSpace.valType:str
GratingComponent.colorSpace.staticUpdater:None
GratingComponent.colorSpace.val:rgb
GratingComponent.colorSpace.allowedTypes:[]
GratingComponent.colorSpace.hint:Choice of color space for the color (rgb, dkl, lms, hsv)
GratingComponent.colorSpace.allowedUpdates:None
GratingComponent.colorSpace.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.colorSpace.label:Color space
GratingComponent.blendmode.default:'avg'
GratingComponent.blendmode.categ:Basic
GratingComponent.blendmode.allowedVals:[]
GratingComponent.blendmode.readOnly:False
GratingComponent.blendmode.updates:constant
GratingComponent.blendmode.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'avg', 'hint': u'OpenGL Blendmode [avg, add (avg is most common mode in PsychoPy, add is useful if combining a beat with the carrier image or numpy array at point of display)]', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'OpenGL blend mode', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
GratingComponent.blendmode.__weakref__:None
GratingComponent.blendmode.valType:str
GratingComponent.blendmode.staticUpdater:None
GratingComponent.blendmode.val:avg
GratingComponent.blendmode.allowedTypes:[]
GratingComponent.blendmode.hint:OpenGL Blendmode [avg, add (avg is most common mode in PsychoPy, add is useful if combining a beat with the carrier image or numpy array at point of display)]
GratingComponent.blendmode.allowedUpdates:['constant', 'set every repeat', 'set every frame']
GratingComponent.blendmode.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.blendmode.label:OpenGL blend mode
GratingComponent.name.default:grating
GratingComponent.name.categ:Basic
GratingComponent.name.allowedVals:[]
GratingComponent.name.readOnly:False
GratingComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'grating', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
GratingComponent.name.__weakref__:None
GratingComponent.name.valType:code
GratingComponent.name.staticUpdater:None
GratingComponent.name.val:grating
GratingComponent.name.allowedTypes:[]
GratingComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
GratingComponent.name.allowedUpdates:None
GratingComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.name.label:Name
GratingComponent.color.default:[1,1,1]
GratingComponent.color.categ:Basic
GratingComponent.color.allowedVals:[]
GratingComponent.color.readOnly:False
GratingComponent.color.updates:constant
GratingComponent.color.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '$[1,1,1]', 'hint': u'Color of this stimulus (e.g. $[1,1,0], red ); Right-click to bring up a color-picker (rgb only)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Color', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
GratingComponent.color.__weakref__:None
GratingComponent.color.valType:str
GratingComponent.color.staticUpdater:None
GratingComponent.color.val:$[1,1,1]
GratingComponent.color.allowedTypes:[]
GratingComponent.color.hint:Color of this stimulus (e.g. $[1,1,0], red ); Right-click to bring up a color-picker (rgb only)
GratingComponent.color.allowedUpdates:['constant', 'set every repeat', 'set every frame']
GratingComponent.color.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.color.label:Color
GratingComponent.stopVal.default:1.0
GratingComponent.stopVal.categ:Basic
GratingComponent.stopVal.allowedVals:[]
GratingComponent.stopVal.readOnly:False
GratingComponent.stopVal.updates:constant
GratingComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1.0, 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
GratingComponent.stopVal.__weakref__:None
GratingComponent.stopVal.valType:code
GratingComponent.stopVal.staticUpdater:None
GratingComponent.stopVal.val:1.0
GratingComponent.stopVal.allowedTypes:[]
GratingComponent.stopVal.hint:When does the component end? (blank is endless)
GratingComponent.stopVal.allowedUpdates:[]
GratingComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.stopVal.label:Stop
GratingComponent.durationEstim.default:
GratingComponent.durationEstim.categ:Basic
GratingComponent.durationEstim.allowedVals:[]
GratingComponent.durationEstim.readOnly:False
GratingComponent.durationEstim.updates:None
GratingComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
GratingComponent.durationEstim.__weakref__:None
GratingComponent.durationEstim.valType:code
GratingComponent.durationEstim.staticUpdater:None
GratingComponent.durationEstim.val:
GratingComponent.durationEstim.allowedTypes:[]
GratingComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
GratingComponent.durationEstim.allowedUpdates:None
GratingComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.durationEstim.label:Expected duration (s)
GratingComponent.mask.default:'None'
GratingComponent.mask.categ:Grating
GratingComponent.mask.allowedVals:[]
GratingComponent.mask.readOnly:False
GratingComponent.mask.updates:constant
GratingComponent.mask.__dict__:{'staticUpdater': None, 'categ': 'Grating', 'val': 'None', 'hint': u'An image to define the alpha mask (ie shape)- gauss, circle... or a filename (including path)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Mask', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
GratingComponent.mask.__weakref__:None
GratingComponent.mask.valType:str
GratingComponent.mask.staticUpdater:None
GratingComponent.mask.val:None
GratingComponent.mask.allowedTypes:[]
GratingComponent.mask.hint:An image to define the alpha mask (ie shape)- gauss, circle... or a filename (including path)
GratingComponent.mask.allowedUpdates:['constant', 'set every repeat', 'set every frame']
GratingComponent.mask.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.mask.label:Mask
GratingComponent.pos.default:(0, 0)
GratingComponent.pos.categ:Basic
GratingComponent.pos.allowedVals:[]
GratingComponent.pos.readOnly:False
GratingComponent.pos.updates:constant
GratingComponent.pos.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': (0, 0), 'hint': u'Position of this stimulus (e.g. [1,2] )', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Position [x,y]', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
GratingComponent.pos.__weakref__:None
GratingComponent.pos.valType:code
GratingComponent.pos.staticUpdater:None
GratingComponent.pos.val:(0, 0)
GratingComponent.pos.allowedTypes:[]
GratingComponent.pos.hint:Position of this stimulus (e.g. [1,2] )
GratingComponent.pos.allowedUpdates:['constant', 'set every repeat', 'set every frame']
GratingComponent.pos.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.pos.label:Position [x,y]
GratingComponent.interpolate.default:'linear'
GratingComponent.interpolate.categ:Grating
GratingComponent.interpolate.allowedVals:['linear', 'nearest']
GratingComponent.interpolate.readOnly:False
GratingComponent.interpolate.updates:constant
GratingComponent.interpolate.__dict__:{'staticUpdater': None, 'categ': 'Grating', 'val': 'linear', 'hint': u'How should the image be interpolated if/when rescaled', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': ['linear', 'nearest'], 'label': u'Interpolate', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
GratingComponent.interpolate.__weakref__:None
GratingComponent.interpolate.valType:str
GratingComponent.interpolate.staticUpdater:None
GratingComponent.interpolate.val:linear
GratingComponent.interpolate.allowedTypes:[]
GratingComponent.interpolate.hint:How should the image be interpolated if/when rescaled
GratingComponent.interpolate.allowedUpdates:[]
GratingComponent.interpolate.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.interpolate.label:Interpolate
GratingComponent.startEstim.default:
GratingComponent.startEstim.categ:Basic
GratingComponent.startEstim.allowedVals:[]
GratingComponent.startEstim.readOnly:False
GratingComponent.startEstim.updates:None
GratingComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
GratingComponent.startEstim.__weakref__:None
GratingComponent.startEstim.valType:code
GratingComponent.startEstim.staticUpdater:None
GratingComponent.startEstim.val:
GratingComponent.startEstim.allowedTypes:[]
GratingComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
GratingComponent.startEstim.allowedUpdates:None
GratingComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.startEstim.label:Expected start (s)
GratingComponent.units.default:'from exp settings'
GratingComponent.units.categ:Basic
GratingComponent.units.allowedVals:['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat']
GratingComponent.units.readOnly:False
GratingComponent.units.updates:None
GratingComponent.units.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'from exp settings', 'hint': u'Units of dimensions for this stimulus', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat'], 'label': u'Units', 'readOnly': False, 'updates': None, 'valType': 'str'}
GratingComponent.units.__weakref__:None
GratingComponent.units.valType:str
GratingComponent.units.staticUpdater:None
GratingComponent.units.val:from exp settings
GratingComponent.units.allowedTypes:[]
GratingComponent.units.hint:Units of dimensions for this stimulus
GratingComponent.units.allowedUpdates:None
GratingComponent.units.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.units.label:Units
GratingComponent.texture resolution.default:128
GratingComponent.texture resolution.categ:Grating
GratingComponent.texture resolution.allowedVals:['32', '64', '128', '256', '512']
GratingComponent.texture resolution.readOnly:False
GratingComponent.texture resolution.updates:constant
GratingComponent.texture resolution.__dict__:{'staticUpdater': None, 'categ': 'Grating', 'val': '128', 'hint': u'Resolution of the texture for standard ones such as sin, sqr etc. For most cases a value of 256 pixels will suffice', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': ['32', '64', '128', '256', '512'], 'label': u'Texture resolution', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
GratingComponent.texture resolution.__weakref__:None
GratingComponent.texture resolution.valType:code
GratingComponent.texture resolution.staticUpdater:None
GratingComponent.texture resolution.val:128
GratingComponent.texture resolution.allowedTypes:[]
GratingComponent.texture resolution.hint:Resolution of the texture for standard ones such as sin, sqr etc. For most cases a value of 256 pixels will suffice
GratingComponent.texture resolution.allowedUpdates:[]
GratingComponent.texture resolution.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.texture resolution.label:Texture resolution
GratingComponent.phase.default:0.0
GratingComponent.phase.categ:Grating
GratingComponent.phase.allowedVals:[]
GratingComponent.phase.readOnly:False
GratingComponent.phase.updates:constant
GratingComponent.phase.__dict__:{'staticUpdater': None, 'categ': 'Grating', 'val': 0.0, 'hint': u'Spatial positioning of the image on the grating (wraps in range 0-1.0)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Phase (in cycles)', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
GratingComponent.phase.__weakref__:None
GratingComponent.phase.valType:code
GratingComponent.phase.staticUpdater:None
GratingComponent.phase.val:0.0
GratingComponent.phase.allowedTypes:[]
GratingComponent.phase.hint:Spatial positioning of the image on the grating (wraps in range 0-1.0)
GratingComponent.phase.allowedUpdates:['constant', 'set every repeat', 'set every frame']
GratingComponent.phase.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.phase.label:Phase (in cycles)
GratingComponent.startType.default:'time (s)'
GratingComponent.startType.categ:Basic
GratingComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
GratingComponent.startType.readOnly:False
GratingComponent.startType.updates:None
GratingComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
GratingComponent.startType.__weakref__:None
GratingComponent.startType.valType:str
GratingComponent.startType.staticUpdater:None
GratingComponent.startType.val:time (s)
GratingComponent.startType.allowedTypes:[]
GratingComponent.startType.hint:How do you want to define your start point?
GratingComponent.startType.allowedUpdates:None
GratingComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.startType.label:start type
GratingComponent.ori.default:0
GratingComponent.ori.categ:Basic
GratingComponent.ori.allowedVals:[]
GratingComponent.ori.readOnly:False
GratingComponent.ori.updates:constant
GratingComponent.ori.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0, 'hint': u'Orientation of this stimulus (in deg)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Orientation', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
GratingComponent.ori.__weakref__:None
GratingComponent.ori.valType:code
GratingComponent.ori.staticUpdater:None
GratingComponent.ori.val:0
GratingComponent.ori.allowedTypes:[]
GratingComponent.ori.hint:Orientation of this stimulus (in deg)
GratingComponent.ori.allowedUpdates:['constant', 'set every repeat', 'set every frame']
GratingComponent.ori.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.ori.label:Orientation
GratingComponent.stopType.default:'duration (s)'
GratingComponent.stopType.categ:Basic
GratingComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
GratingComponent.stopType.readOnly:False
GratingComponent.stopType.updates:None
GratingComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
GratingComponent.stopType.__weakref__:None
GratingComponent.stopType.valType:str
GratingComponent.stopType.staticUpdater:None
GratingComponent.stopType.val:duration (s)
GratingComponent.stopType.allowedTypes:[]
GratingComponent.stopType.hint:How do you want to define your end point?
GratingComponent.stopType.allowedUpdates:None
GratingComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.stopType.label:stop type
GratingComponent.startVal.default:0.0
GratingComponent.startVal.categ:Basic
GratingComponent.startVal.allowedVals:[]
GratingComponent.startVal.readOnly:False
GratingComponent.startVal.updates:None
GratingComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
GratingComponent.startVal.__weakref__:None
GratingComponent.startVal.valType:code
GratingComponent.startVal.staticUpdater:None
GratingComponent.startVal.val:0.0
GratingComponent.startVal.allowedTypes:[]
GratingComponent.startVal.hint:When does the component start?
GratingComponent.startVal.allowedUpdates:None
GratingComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.startVal.label:Start
GratingComponent.sf.default:None
GratingComponent.sf.categ:Grating
GratingComponent.sf.allowedVals:[]
GratingComponent.sf.readOnly:False
GratingComponent.sf.updates:constant
GratingComponent.sf.__dict__:{'staticUpdater': None, 'categ': 'Grating', 'val': 'None', 'hint': u'Spatial frequency of image repeats across the grating in 1 or 2 dimensions, e.g. 4 or [2,3]', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Spatial frequency', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
GratingComponent.sf.__weakref__:None
GratingComponent.sf.valType:code
GratingComponent.sf.staticUpdater:None
GratingComponent.sf.val:None
GratingComponent.sf.allowedTypes:[]
GratingComponent.sf.hint:Spatial frequency of image repeats across the grating in 1 or 2 dimensions, e.g. 4 or [2,3]
GratingComponent.sf.allowedUpdates:['constant', 'set every repeat', 'set every frame']
GratingComponent.sf.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.sf.label:Spatial frequency
GratingComponent.size.default:(0.5, 0.5)
GratingComponent.size.categ:Basic
GratingComponent.size.allowedVals:[]
GratingComponent.size.readOnly:False
GratingComponent.size.updates:constant
GratingComponent.size.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': (0.5, 0.5), 'hint': u'Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Size [w,h]', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
GratingComponent.size.__weakref__:None
GratingComponent.size.valType:code
GratingComponent.size.staticUpdater:None
GratingComponent.size.val:(0.5, 0.5)
GratingComponent.size.allowedTypes:[]
GratingComponent.size.hint:Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2]
GratingComponent.size.allowedUpdates:['constant', 'set every repeat', 'set every frame']
GratingComponent.size.__class__:<class 'psychopy.app.builder.experiment.Param'>
GratingComponent.size.label:Size [w,h]
ImageComponent.order:['name', 'image', 'pos', 'size', 'ori', 'opacity']
ImageComponent.opacity.default:1
ImageComponent.opacity.categ:Basic
ImageComponent.opacity.allowedVals:[]
ImageComponent.opacity.readOnly:False
ImageComponent.opacity.updates:constant
ImageComponent.opacity.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1, 'hint': u'Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Opacity', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
ImageComponent.opacity.__weakref__:None
ImageComponent.opacity.valType:code
ImageComponent.opacity.staticUpdater:None
ImageComponent.opacity.val:1
ImageComponent.opacity.allowedTypes:[]
ImageComponent.opacity.hint:Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)
ImageComponent.opacity.allowedUpdates:['constant', 'set every repeat', 'set every frame']
ImageComponent.opacity.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.opacity.label:Opacity
ImageComponent.flipVert.default:False
ImageComponent.flipVert.categ:Advanced
ImageComponent.flipVert.allowedVals:[]
ImageComponent.flipVert.readOnly:False
ImageComponent.flipVert.updates:constant
ImageComponent.flipVert.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': False, 'hint': u'Should the image be flipped vertically (top to bottom)?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Flip vertically', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
ImageComponent.flipVert.__weakref__:None
ImageComponent.flipVert.valType:bool
ImageComponent.flipVert.staticUpdater:None
ImageComponent.flipVert.val:False
ImageComponent.flipVert.allowedTypes:[]
ImageComponent.flipVert.hint:Should the image be flipped vertically (top to bottom)?
ImageComponent.flipVert.allowedUpdates:[]
ImageComponent.flipVert.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.flipVert.label:Flip vertically
ImageComponent.colorSpace.default:'rgb'
ImageComponent.colorSpace.categ:Advanced
ImageComponent.colorSpace.allowedVals:['rgb', 'dkl', 'lms', 'hsv']
ImageComponent.colorSpace.readOnly:False
ImageComponent.colorSpace.updates:constant
ImageComponent.colorSpace.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 'rgb', 'hint': u'Choice of color space for the color (rgb, dkl, lms, hsv)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['rgb', 'dkl', 'lms', 'hsv'], 'label': u'Color space', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
ImageComponent.colorSpace.__weakref__:None
ImageComponent.colorSpace.valType:str
ImageComponent.colorSpace.staticUpdater:None
ImageComponent.colorSpace.val:rgb
ImageComponent.colorSpace.allowedTypes:[]
ImageComponent.colorSpace.hint:Choice of color space for the color (rgb, dkl, lms, hsv)
ImageComponent.colorSpace.allowedUpdates:None
ImageComponent.colorSpace.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.colorSpace.label:Color space
ImageComponent.flipHoriz.default:False
ImageComponent.flipHoriz.categ:Advanced
ImageComponent.flipHoriz.allowedVals:[]
ImageComponent.flipHoriz.readOnly:False
ImageComponent.flipHoriz.updates:constant
ImageComponent.flipHoriz.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': False, 'hint': u'Should the image be flipped horizontally (left to right)?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Flip horizontally', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
ImageComponent.flipHoriz.__weakref__:None
ImageComponent.flipHoriz.valType:bool
ImageComponent.flipHoriz.staticUpdater:None
ImageComponent.flipHoriz.val:False
ImageComponent.flipHoriz.allowedTypes:[]
ImageComponent.flipHoriz.hint:Should the image be flipped horizontally (left to right)?
ImageComponent.flipHoriz.allowedUpdates:[]
ImageComponent.flipHoriz.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.flipHoriz.label:Flip horizontally
ImageComponent.name.default:image
ImageComponent.name.categ:Basic
ImageComponent.name.allowedVals:[]
ImageComponent.name.readOnly:False
ImageComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'image', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
ImageComponent.name.__weakref__:None
ImageComponent.name.valType:code
ImageComponent.name.staticUpdater:None
ImageComponent.name.val:image
ImageComponent.name.allowedTypes:[]
ImageComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
ImageComponent.name.allowedUpdates:None
ImageComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.name.label:Name
ImageComponent.color.default:[1,1,1]
ImageComponent.color.categ:Advanced
ImageComponent.color.allowedVals:[]
ImageComponent.color.readOnly:False
ImageComponent.color.updates:constant
ImageComponent.color.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': '$[1,1,1]', 'hint': u'Color of this stimulus (e.g. $[1,1,0], red ); Right-click to bring up a color-picker (rgb only)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Color', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
ImageComponent.color.__weakref__:None
ImageComponent.color.valType:str
ImageComponent.color.staticUpdater:None
ImageComponent.color.val:$[1,1,1]
ImageComponent.color.allowedTypes:[]
ImageComponent.color.hint:Color of this stimulus (e.g. $[1,1,0], red ); Right-click to bring up a color-picker (rgb only)
ImageComponent.color.allowedUpdates:['constant', 'set every repeat', 'set every frame']
ImageComponent.color.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.color.label:Color
ImageComponent.stopVal.default:1.0
ImageComponent.stopVal.categ:Basic
ImageComponent.stopVal.allowedVals:[]
ImageComponent.stopVal.readOnly:False
ImageComponent.stopVal.updates:constant
ImageComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1.0, 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
ImageComponent.stopVal.__weakref__:None
ImageComponent.stopVal.valType:code
ImageComponent.stopVal.staticUpdater:None
ImageComponent.stopVal.val:1.0
ImageComponent.stopVal.allowedTypes:[]
ImageComponent.stopVal.hint:When does the component end? (blank is endless)
ImageComponent.stopVal.allowedUpdates:[]
ImageComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.stopVal.label:Stop
ImageComponent.durationEstim.default:
ImageComponent.durationEstim.categ:Basic
ImageComponent.durationEstim.allowedVals:[]
ImageComponent.durationEstim.readOnly:False
ImageComponent.durationEstim.updates:None
ImageComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
ImageComponent.durationEstim.__weakref__:None
ImageComponent.durationEstim.valType:code
ImageComponent.durationEstim.staticUpdater:None
ImageComponent.durationEstim.val:
ImageComponent.durationEstim.allowedTypes:[]
ImageComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
ImageComponent.durationEstim.allowedUpdates:None
ImageComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.durationEstim.label:Expected duration (s)
ImageComponent.mask.default:'None'
ImageComponent.mask.categ:Advanced
ImageComponent.mask.allowedVals:[]
ImageComponent.mask.readOnly:False
ImageComponent.mask.updates:constant
ImageComponent.mask.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 'None', 'hint': u'An image to define the alpha mask through which the image is seen - gauss, circle, None or a filename (including path)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Mask', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
ImageComponent.mask.__weakref__:None
ImageComponent.mask.valType:str
ImageComponent.mask.staticUpdater:None
ImageComponent.mask.val:None
ImageComponent.mask.allowedTypes:[]
ImageComponent.mask.hint:An image to define the alpha mask through which the image is seen - gauss, circle, None or a filename (including path)
ImageComponent.mask.allowedUpdates:['constant', 'set every repeat', 'set every frame']
ImageComponent.mask.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.mask.label:Mask
ImageComponent.pos.default:(0, 0)
ImageComponent.pos.categ:Basic
ImageComponent.pos.allowedVals:[]
ImageComponent.pos.readOnly:False
ImageComponent.pos.updates:constant
ImageComponent.pos.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': (0, 0), 'hint': u'Position of this stimulus (e.g. [1,2] )', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Position [x,y]', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
ImageComponent.pos.__weakref__:None
ImageComponent.pos.valType:code
ImageComponent.pos.staticUpdater:None
ImageComponent.pos.val:(0, 0)
ImageComponent.pos.allowedTypes:[]
ImageComponent.pos.hint:Position of this stimulus (e.g. [1,2] )
ImageComponent.pos.allowedUpdates:['constant', 'set every repeat', 'set every frame']
ImageComponent.pos.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.pos.label:Position [x,y]
ImageComponent.interpolate.default:'linear'
ImageComponent.interpolate.categ:Advanced
ImageComponent.interpolate.allowedVals:['linear', 'nearest']
ImageComponent.interpolate.readOnly:False
ImageComponent.interpolate.updates:constant
ImageComponent.interpolate.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 'linear', 'hint': u'How should the image be interpolated if/when rescaled', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': ['linear', 'nearest'], 'label': u'Interpolate', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
ImageComponent.interpolate.__weakref__:None
ImageComponent.interpolate.valType:str
ImageComponent.interpolate.staticUpdater:None
ImageComponent.interpolate.val:linear
ImageComponent.interpolate.allowedTypes:[]
ImageComponent.interpolate.hint:How should the image be interpolated if/when rescaled
ImageComponent.interpolate.allowedUpdates:[]
ImageComponent.interpolate.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.interpolate.label:Interpolate
ImageComponent.startEstim.default:
ImageComponent.startEstim.categ:Basic
ImageComponent.startEstim.allowedVals:[]
ImageComponent.startEstim.readOnly:False
ImageComponent.startEstim.updates:None
ImageComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
ImageComponent.startEstim.__weakref__:None
ImageComponent.startEstim.valType:code
ImageComponent.startEstim.staticUpdater:None
ImageComponent.startEstim.val:
ImageComponent.startEstim.allowedTypes:[]
ImageComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
ImageComponent.startEstim.allowedUpdates:None
ImageComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.startEstim.label:Expected start (s)
ImageComponent.units.default:'from exp settings'
ImageComponent.units.categ:Basic
ImageComponent.units.allowedVals:['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat']
ImageComponent.units.readOnly:False
ImageComponent.units.updates:None
ImageComponent.units.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'from exp settings', 'hint': u'Units of dimensions for this stimulus', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat'], 'label': u'Units', 'readOnly': False, 'updates': None, 'valType': 'str'}
ImageComponent.units.__weakref__:None
ImageComponent.units.valType:str
ImageComponent.units.staticUpdater:None
ImageComponent.units.val:from exp settings
ImageComponent.units.allowedTypes:[]
ImageComponent.units.hint:Units of dimensions for this stimulus
ImageComponent.units.allowedUpdates:None
ImageComponent.units.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.units.label:Units
ImageComponent.texture resolution.default:128
ImageComponent.texture resolution.categ:Advanced
ImageComponent.texture resolution.allowedVals:['32', '64', '128', '256', '512']
ImageComponent.texture resolution.readOnly:False
ImageComponent.texture resolution.updates:constant
ImageComponent.texture resolution.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': '128', 'hint': u'Resolution of the mask if one is used.', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': ['32', '64', '128', '256', '512'], 'label': u'Texture resolution', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
ImageComponent.texture resolution.__weakref__:None
ImageComponent.texture resolution.valType:code
ImageComponent.texture resolution.staticUpdater:None
ImageComponent.texture resolution.val:128
ImageComponent.texture resolution.allowedTypes:[]
ImageComponent.texture resolution.hint:Resolution of the mask if one is used.
ImageComponent.texture resolution.allowedUpdates:[]
ImageComponent.texture resolution.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.texture resolution.label:Texture resolution
ImageComponent.startType.default:'time (s)'
ImageComponent.startType.categ:Basic
ImageComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
ImageComponent.startType.readOnly:False
ImageComponent.startType.updates:None
ImageComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
ImageComponent.startType.__weakref__:None
ImageComponent.startType.valType:str
ImageComponent.startType.staticUpdater:None
ImageComponent.startType.val:time (s)
ImageComponent.startType.allowedTypes:[]
ImageComponent.startType.hint:How do you want to define your start point?
ImageComponent.startType.allowedUpdates:None
ImageComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.startType.label:start type
ImageComponent.ori.default:0
ImageComponent.ori.categ:Basic
ImageComponent.ori.allowedVals:[]
ImageComponent.ori.readOnly:False
ImageComponent.ori.updates:constant
ImageComponent.ori.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0, 'hint': u'Orientation of this stimulus (in deg)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Orientation', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
ImageComponent.ori.__weakref__:None
ImageComponent.ori.valType:code
ImageComponent.ori.staticUpdater:None
ImageComponent.ori.val:0
ImageComponent.ori.allowedTypes:[]
ImageComponent.ori.hint:Orientation of this stimulus (in deg)
ImageComponent.ori.allowedUpdates:['constant', 'set every repeat', 'set every frame']
ImageComponent.ori.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.ori.label:Orientation
ImageComponent.stopType.default:'duration (s)'
ImageComponent.stopType.categ:Basic
ImageComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
ImageComponent.stopType.readOnly:False
ImageComponent.stopType.updates:None
ImageComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
ImageComponent.stopType.__weakref__:None
ImageComponent.stopType.valType:str
ImageComponent.stopType.staticUpdater:None
ImageComponent.stopType.val:duration (s)
ImageComponent.stopType.allowedTypes:[]
ImageComponent.stopType.hint:How do you want to define your end point?
ImageComponent.stopType.allowedUpdates:None
ImageComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.stopType.label:stop type
ImageComponent.startVal.default:0.0
ImageComponent.startVal.categ:Basic
ImageComponent.startVal.allowedVals:[]
ImageComponent.startVal.readOnly:False
ImageComponent.startVal.updates:None
ImageComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
ImageComponent.startVal.__weakref__:None
ImageComponent.startVal.valType:code
ImageComponent.startVal.staticUpdater:None
ImageComponent.startVal.val:0.0
ImageComponent.startVal.allowedTypes:[]
ImageComponent.startVal.hint:When does the component start?
ImageComponent.startVal.allowedUpdates:None
ImageComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.startVal.label:Start
ImageComponent.image.default:''
ImageComponent.image.categ:Basic
ImageComponent.image.allowedVals:[]
ImageComponent.image.readOnly:False
ImageComponent.image.updates:constant
ImageComponent.image.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'The image to be displayed - a filename, including path', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Image', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
ImageComponent.image.__weakref__:None
ImageComponent.image.valType:str
ImageComponent.image.staticUpdater:None
ImageComponent.image.val:
ImageComponent.image.allowedTypes:[]
ImageComponent.image.hint:The image to be displayed - a filename, including path
ImageComponent.image.allowedUpdates:['constant', 'set every repeat', 'set every frame']
ImageComponent.image.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.image.label:Image
ImageComponent.size.default:(0.5, 0.5)
ImageComponent.size.categ:Basic
ImageComponent.size.allowedVals:[]
ImageComponent.size.readOnly:False
ImageComponent.size.updates:constant
ImageComponent.size.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': (0.5, 0.5), 'hint': u'Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Size [w,h]', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
ImageComponent.size.__weakref__:None
ImageComponent.size.valType:code
ImageComponent.size.staticUpdater:None
ImageComponent.size.val:(0.5, 0.5)
ImageComponent.size.allowedTypes:[]
ImageComponent.size.hint:Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2]
ImageComponent.size.allowedUpdates:['constant', 'set every repeat', 'set every frame']
ImageComponent.size.__class__:<class 'psychopy.app.builder.experiment.Param'>
ImageComponent.size.label:Size [w,h]
KeyboardComponent.order:['forceEndRoutine', 'allowedKeys', 'store', 'storeCorrect', 'correctAns']
KeyboardComponent.correctAns.default:''
KeyboardComponent.correctAns.categ:Basic
KeyboardComponent.correctAns.allowedVals:[]
KeyboardComponent.correctAns.readOnly:False
KeyboardComponent.correctAns.updates:constant
KeyboardComponent.correctAns.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u"What is the 'correct' key? Might be helpful to add a correctAns column and use $correctAns to compare to the key press.", 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Correct answer', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
KeyboardComponent.correctAns.__weakref__:None
KeyboardComponent.correctAns.valType:str
KeyboardComponent.correctAns.staticUpdater:None
KeyboardComponent.correctAns.val:
KeyboardComponent.correctAns.allowedTypes:[]
KeyboardComponent.correctAns.hint:What is the 'correct' key? Might be helpful to add a correctAns column and use $correctAns to compare to the key press.
KeyboardComponent.correctAns.allowedUpdates:[]
KeyboardComponent.correctAns.__class__:<class 'psychopy.app.builder.experiment.Param'>
KeyboardComponent.correctAns.label:Correct answer
KeyboardComponent.storeCorrect.default:False
KeyboardComponent.storeCorrect.categ:Basic
KeyboardComponent.storeCorrect.allowedVals:[]
KeyboardComponent.storeCorrect.readOnly:False
KeyboardComponent.storeCorrect.updates:constant
KeyboardComponent.storeCorrect.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': False, 'hint': u'Do you want to save the response as correct/incorrect?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Store correct', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
KeyboardComponent.storeCorrect.__weakref__:None
KeyboardComponent.storeCorrect.valType:bool
KeyboardComponent.storeCorrect.staticUpdater:None
KeyboardComponent.storeCorrect.val:False
KeyboardComponent.storeCorrect.allowedTypes:[]
KeyboardComponent.storeCorrect.hint:Do you want to save the response as correct/incorrect?
KeyboardComponent.storeCorrect.allowedUpdates:[]
KeyboardComponent.storeCorrect.__class__:<class 'psychopy.app.builder.experiment.Param'>
KeyboardComponent.storeCorrect.label:Store correct
KeyboardComponent.name.default:key_resp
KeyboardComponent.name.categ:Basic
KeyboardComponent.name.allowedVals:[]
KeyboardComponent.name.readOnly:False
KeyboardComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'key_resp', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
KeyboardComponent.name.__weakref__:None
KeyboardComponent.name.valType:code
KeyboardComponent.name.staticUpdater:None
KeyboardComponent.name.val:key_resp
KeyboardComponent.name.allowedTypes:[]
KeyboardComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
KeyboardComponent.name.allowedUpdates:None
KeyboardComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
KeyboardComponent.name.label:Name
KeyboardComponent.stopVal.default:
KeyboardComponent.stopVal.categ:Basic
KeyboardComponent.stopVal.allowedVals:[]
KeyboardComponent.stopVal.readOnly:False
KeyboardComponent.stopVal.updates:constant
KeyboardComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
KeyboardComponent.stopVal.__weakref__:None
KeyboardComponent.stopVal.valType:code
KeyboardComponent.stopVal.staticUpdater:None
KeyboardComponent.stopVal.val:
KeyboardComponent.stopVal.allowedTypes:[]
KeyboardComponent.stopVal.hint:When does the component end? (blank is endless)
KeyboardComponent.stopVal.allowedUpdates:[]
KeyboardComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
KeyboardComponent.stopVal.label:Stop
KeyboardComponent.durationEstim.default:
KeyboardComponent.durationEstim.categ:Basic
KeyboardComponent.durationEstim.allowedVals:[]
KeyboardComponent.durationEstim.readOnly:False
KeyboardComponent.durationEstim.updates:None
KeyboardComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
KeyboardComponent.durationEstim.__weakref__:None
KeyboardComponent.durationEstim.valType:code
KeyboardComponent.durationEstim.staticUpdater:None
KeyboardComponent.durationEstim.val:
KeyboardComponent.durationEstim.allowedTypes:[]
KeyboardComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
KeyboardComponent.durationEstim.allowedUpdates:None
KeyboardComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
KeyboardComponent.durationEstim.label:Expected duration (s)
KeyboardComponent.forceEndRoutine.default:True
KeyboardComponent.forceEndRoutine.categ:Basic
KeyboardComponent.forceEndRoutine.allowedVals:[]
KeyboardComponent.forceEndRoutine.readOnly:False
KeyboardComponent.forceEndRoutine.updates:constant
KeyboardComponent.forceEndRoutine.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': True, 'hint': u'Should a response force the end of the Routine (e.g end the trial)?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Force end of Routine', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
KeyboardComponent.forceEndRoutine.__weakref__:None
KeyboardComponent.forceEndRoutine.valType:bool
KeyboardComponent.forceEndRoutine.staticUpdater:None
KeyboardComponent.forceEndRoutine.val:True
KeyboardComponent.forceEndRoutine.allowedTypes:[]
KeyboardComponent.forceEndRoutine.hint:Should a response force the end of the Routine (e.g end the trial)?
KeyboardComponent.forceEndRoutine.allowedUpdates:[]
KeyboardComponent.forceEndRoutine.__class__:<class 'psychopy.app.builder.experiment.Param'>
KeyboardComponent.forceEndRoutine.label:Force end of Routine
KeyboardComponent.startEstim.default:
KeyboardComponent.startEstim.categ:Basic
KeyboardComponent.startEstim.allowedVals:[]
KeyboardComponent.startEstim.readOnly:False
KeyboardComponent.startEstim.updates:None
KeyboardComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
KeyboardComponent.startEstim.__weakref__:None
KeyboardComponent.startEstim.valType:code
KeyboardComponent.startEstim.staticUpdater:None
KeyboardComponent.startEstim.val:
KeyboardComponent.startEstim.allowedTypes:[]
KeyboardComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
KeyboardComponent.startEstim.allowedUpdates:None
KeyboardComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
KeyboardComponent.startEstim.label:Expected start (s)
KeyboardComponent.discard previous.default:True
KeyboardComponent.discard previous.categ:Basic
KeyboardComponent.discard previous.allowedVals:[]
KeyboardComponent.discard previous.readOnly:False
KeyboardComponent.discard previous.updates:constant
KeyboardComponent.discard previous.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': True, 'hint': u'Do you want to discard all responses occuring before the onset of this component?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Discard previous', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
KeyboardComponent.discard previous.__weakref__:None
KeyboardComponent.discard previous.valType:bool
KeyboardComponent.discard previous.staticUpdater:None
KeyboardComponent.discard previous.val:True
KeyboardComponent.discard previous.allowedTypes:[]
KeyboardComponent.discard previous.hint:Do you want to discard all responses occuring before the onset of this component?
KeyboardComponent.discard previous.allowedUpdates:[]
KeyboardComponent.discard previous.__class__:<class 'psychopy.app.builder.experiment.Param'>
KeyboardComponent.discard previous.label:Discard previous
KeyboardComponent.startType.default:'time (s)'
KeyboardComponent.startType.categ:Basic
KeyboardComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
KeyboardComponent.startType.readOnly:False
KeyboardComponent.startType.updates:None
KeyboardComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
KeyboardComponent.startType.__weakref__:None
KeyboardComponent.startType.valType:str
KeyboardComponent.startType.staticUpdater:None
KeyboardComponent.startType.val:time (s)
KeyboardComponent.startType.allowedTypes:[]
KeyboardComponent.startType.hint:How do you want to define your start point?
KeyboardComponent.startType.allowedUpdates:None
KeyboardComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
KeyboardComponent.startType.label:start type
KeyboardComponent.allowedKeys.default:'y','n','left','right','space'
KeyboardComponent.allowedKeys.categ:Basic
KeyboardComponent.allowedKeys.allowedVals:[]
KeyboardComponent.allowedKeys.readOnly:False
KeyboardComponent.allowedKeys.updates:constant
KeyboardComponent.allowedKeys.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': "'y','n','left','right','space'", 'hint': u"A comma-separated list of keys (with quotes), such as 'q','right','space','left'", 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat'], 'allowedVals': [], 'label': u'Allowed keys', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
KeyboardComponent.allowedKeys.__weakref__:None
KeyboardComponent.allowedKeys.valType:code
KeyboardComponent.allowedKeys.staticUpdater:None
KeyboardComponent.allowedKeys.val:'y','n','left','right','space'
KeyboardComponent.allowedKeys.allowedTypes:[]
KeyboardComponent.allowedKeys.hint:A comma-separated list of keys (with quotes), such as 'q','right','space','left'
KeyboardComponent.allowedKeys.allowedUpdates:['constant', 'set every repeat']
KeyboardComponent.allowedKeys.__class__:<class 'psychopy.app.builder.experiment.Param'>
KeyboardComponent.allowedKeys.label:Allowed keys
KeyboardComponent.stopType.default:'duration (s)'
KeyboardComponent.stopType.categ:Basic
KeyboardComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
KeyboardComponent.stopType.readOnly:False
KeyboardComponent.stopType.updates:None
KeyboardComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
KeyboardComponent.stopType.__weakref__:None
KeyboardComponent.stopType.valType:str
KeyboardComponent.stopType.staticUpdater:None
KeyboardComponent.stopType.val:duration (s)
KeyboardComponent.stopType.allowedTypes:[]
KeyboardComponent.stopType.hint:How do you want to define your end point?
KeyboardComponent.stopType.allowedUpdates:None
KeyboardComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
KeyboardComponent.stopType.label:stop type
KeyboardComponent.startVal.default:0.0
KeyboardComponent.startVal.categ:Basic
KeyboardComponent.startVal.allowedVals:[]
KeyboardComponent.startVal.readOnly:False
KeyboardComponent.startVal.updates:None
KeyboardComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
KeyboardComponent.startVal.__weakref__:None
KeyboardComponent.startVal.valType:code
KeyboardComponent.startVal.staticUpdater:None
KeyboardComponent.startVal.val:0.0
KeyboardComponent.startVal.allowedTypes:[]
KeyboardComponent.startVal.hint:When does the component start?
KeyboardComponent.startVal.allowedUpdates:None
KeyboardComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
KeyboardComponent.startVal.label:Start
KeyboardComponent.store.default:'last key'
KeyboardComponent.store.categ:Basic
KeyboardComponent.store.allowedVals:['last key', 'first key', 'all keys', 'nothing']
KeyboardComponent.store.readOnly:False
KeyboardComponent.store.updates:constant
KeyboardComponent.store.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'last key', 'hint': u'Choose which (if any) responses to store at the end of a trial', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': ['last key', 'first key', 'all keys', 'nothing'], 'label': u'Store', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
KeyboardComponent.store.__weakref__:None
KeyboardComponent.store.valType:str
KeyboardComponent.store.staticUpdater:None
KeyboardComponent.store.val:last key
KeyboardComponent.store.allowedTypes:[]
KeyboardComponent.store.hint:Choose which (if any) responses to store at the end of a trial
KeyboardComponent.store.allowedUpdates:[]
KeyboardComponent.store.__class__:<class 'psychopy.app.builder.experiment.Param'>
KeyboardComponent.store.label:Store
KeyboardComponent.syncScreenRefresh.default:True
KeyboardComponent.syncScreenRefresh.categ:Basic
KeyboardComponent.syncScreenRefresh.allowedVals:[]
KeyboardComponent.syncScreenRefresh.readOnly:False
KeyboardComponent.syncScreenRefresh.updates:constant
KeyboardComponent.syncScreenRefresh.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': True, 'hint': u'A reaction time to a visual stimulus should be based on when the screen flipped', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'sync RT with screen', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
KeyboardComponent.syncScreenRefresh.__weakref__:None
KeyboardComponent.syncScreenRefresh.valType:bool
KeyboardComponent.syncScreenRefresh.staticUpdater:None
KeyboardComponent.syncScreenRefresh.val:True
KeyboardComponent.syncScreenRefresh.allowedTypes:[]
KeyboardComponent.syncScreenRefresh.hint:A reaction time to a visual stimulus should be based on when the screen flipped
KeyboardComponent.syncScreenRefresh.allowedUpdates:[]
KeyboardComponent.syncScreenRefresh.__class__:<class 'psychopy.app.builder.experiment.Param'>
KeyboardComponent.syncScreenRefresh.label:sync RT with screen
MicrophoneComponent.order:['name']
MicrophoneComponent.stereo.default:False
MicrophoneComponent.stereo.categ:Basic
MicrophoneComponent.stereo.allowedVals:[]
MicrophoneComponent.stereo.readOnly:False
MicrophoneComponent.stereo.updates:None
MicrophoneComponent.stereo.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': False, 'hint': u'Record two channels (stereo) or one (mono, smaller file)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Stereo', 'readOnly': False, 'updates': None, 'valType': 'bool'}
MicrophoneComponent.stereo.__weakref__:None
MicrophoneComponent.stereo.valType:bool
MicrophoneComponent.stereo.staticUpdater:None
MicrophoneComponent.stereo.val:False
MicrophoneComponent.stereo.allowedTypes:[]
MicrophoneComponent.stereo.hint:Record two channels (stereo) or one (mono, smaller file)
MicrophoneComponent.stereo.allowedUpdates:None
MicrophoneComponent.stereo.__class__:<class 'psychopy.app.builder.experiment.Param'>
MicrophoneComponent.stereo.label:Stereo
MicrophoneComponent.name.default:mic_1
MicrophoneComponent.name.categ:Basic
MicrophoneComponent.name.allowedVals:[]
MicrophoneComponent.name.readOnly:False
MicrophoneComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'mic_1', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
MicrophoneComponent.name.__weakref__:None
MicrophoneComponent.name.valType:code
MicrophoneComponent.name.staticUpdater:None
MicrophoneComponent.name.val:mic_1
MicrophoneComponent.name.allowedTypes:[]
MicrophoneComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
MicrophoneComponent.name.allowedUpdates:None
MicrophoneComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
MicrophoneComponent.name.label:Name
MicrophoneComponent.stopVal.default:2.0
MicrophoneComponent.stopVal.categ:Basic
MicrophoneComponent.stopVal.allowedVals:[]
MicrophoneComponent.stopVal.readOnly:False
MicrophoneComponent.stopVal.updates:constant
MicrophoneComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 2.0, 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
MicrophoneComponent.stopVal.__weakref__:None
MicrophoneComponent.stopVal.valType:code
MicrophoneComponent.stopVal.staticUpdater:None
MicrophoneComponent.stopVal.val:2.0
MicrophoneComponent.stopVal.allowedTypes:[]
MicrophoneComponent.stopVal.hint:When does the component end? (blank is endless)
MicrophoneComponent.stopVal.allowedUpdates:[]
MicrophoneComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
MicrophoneComponent.stopVal.label:Stop
MicrophoneComponent.durationEstim.default:
MicrophoneComponent.durationEstim.categ:Basic
MicrophoneComponent.durationEstim.allowedVals:[]
MicrophoneComponent.durationEstim.readOnly:False
MicrophoneComponent.durationEstim.updates:None
MicrophoneComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
MicrophoneComponent.durationEstim.__weakref__:None
MicrophoneComponent.durationEstim.valType:code
MicrophoneComponent.durationEstim.staticUpdater:None
MicrophoneComponent.durationEstim.val:
MicrophoneComponent.durationEstim.allowedTypes:[]
MicrophoneComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
MicrophoneComponent.durationEstim.allowedUpdates:None
MicrophoneComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
MicrophoneComponent.durationEstim.label:Expected duration (s)
MicrophoneComponent.startEstim.default:
MicrophoneComponent.startEstim.categ:Basic
MicrophoneComponent.startEstim.allowedVals:[]
MicrophoneComponent.startEstim.readOnly:False
MicrophoneComponent.startEstim.updates:None
MicrophoneComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
MicrophoneComponent.startEstim.__weakref__:None
MicrophoneComponent.startEstim.valType:code
MicrophoneComponent.startEstim.staticUpdater:None
MicrophoneComponent.startEstim.val:
MicrophoneComponent.startEstim.allowedTypes:[]
MicrophoneComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
MicrophoneComponent.startEstim.allowedUpdates:None
MicrophoneComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
MicrophoneComponent.startEstim.label:Expected start (s)
MicrophoneComponent.startType.default:'time (s)'
MicrophoneComponent.startType.categ:Basic
MicrophoneComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
MicrophoneComponent.startType.readOnly:False
MicrophoneComponent.startType.updates:None
MicrophoneComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
MicrophoneComponent.startType.__weakref__:None
MicrophoneComponent.startType.valType:str
MicrophoneComponent.startType.staticUpdater:None
MicrophoneComponent.startType.val:time (s)
MicrophoneComponent.startType.allowedTypes:[]
MicrophoneComponent.startType.hint:How do you want to define your start point?
MicrophoneComponent.startType.allowedUpdates:None
MicrophoneComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
MicrophoneComponent.startType.label:start type
MicrophoneComponent.stopType.default:'duration (s)'
MicrophoneComponent.stopType.categ:Basic
MicrophoneComponent.stopType.allowedVals:['duration (s)']
MicrophoneComponent.stopType.readOnly:False
MicrophoneComponent.stopType.updates:None
MicrophoneComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'The duration of the recording in seconds; blank = 0 sec', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
MicrophoneComponent.stopType.__weakref__:None
MicrophoneComponent.stopType.valType:str
MicrophoneComponent.stopType.staticUpdater:None
MicrophoneComponent.stopType.val:duration (s)
MicrophoneComponent.stopType.allowedTypes:[]
MicrophoneComponent.stopType.hint:The duration of the recording in seconds; blank = 0 sec
MicrophoneComponent.stopType.allowedUpdates:None
MicrophoneComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
MicrophoneComponent.stopType.label:stop type
MicrophoneComponent.startVal.default:0.0
MicrophoneComponent.startVal.categ:Basic
MicrophoneComponent.startVal.allowedVals:[]
MicrophoneComponent.startVal.readOnly:False
MicrophoneComponent.startVal.updates:None
MicrophoneComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
MicrophoneComponent.startVal.__weakref__:None
MicrophoneComponent.startVal.valType:code
MicrophoneComponent.startVal.staticUpdater:None
MicrophoneComponent.startVal.val:0.0
MicrophoneComponent.startVal.allowedTypes:[]
MicrophoneComponent.startVal.hint:When does the component start?
MicrophoneComponent.startVal.allowedUpdates:None
MicrophoneComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
MicrophoneComponent.startVal.label:Start
MouseComponent.order:['name']
MouseComponent.name.default:mouse
MouseComponent.name.categ:Basic
MouseComponent.name.allowedVals:[]
MouseComponent.name.readOnly:False
MouseComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'mouse', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
MouseComponent.name.__weakref__:None
MouseComponent.name.valType:code
MouseComponent.name.staticUpdater:None
MouseComponent.name.val:mouse
MouseComponent.name.allowedTypes:[]
MouseComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
MouseComponent.name.allowedUpdates:None
MouseComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
MouseComponent.name.label:Name
MouseComponent.timeRelativeTo.default:'routine'
MouseComponent.timeRelativeTo.categ:Basic
MouseComponent.timeRelativeTo.allowedVals:['experiment', 'routine']
MouseComponent.timeRelativeTo.readOnly:False
MouseComponent.timeRelativeTo.updates:constant
MouseComponent.timeRelativeTo.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'routine', 'hint': u'What should the values of mouse.time should be relative to?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': ['experiment', 'routine'], 'label': u'Time relative to', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
MouseComponent.timeRelativeTo.__weakref__:None
MouseComponent.timeRelativeTo.valType:str
MouseComponent.timeRelativeTo.staticUpdater:None
MouseComponent.timeRelativeTo.val:routine
MouseComponent.timeRelativeTo.allowedTypes:[]
MouseComponent.timeRelativeTo.hint:What should the values of mouse.time should be relative to?
MouseComponent.timeRelativeTo.allowedUpdates:[]
MouseComponent.timeRelativeTo.__class__:<class 'psychopy.app.builder.experiment.Param'>
MouseComponent.timeRelativeTo.label:Time relative to
MouseComponent.stopVal.default:1.0
MouseComponent.stopVal.categ:Basic
MouseComponent.stopVal.allowedVals:[]
MouseComponent.stopVal.readOnly:False
MouseComponent.stopVal.updates:constant
MouseComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1.0, 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
MouseComponent.stopVal.__weakref__:None
MouseComponent.stopVal.valType:code
MouseComponent.stopVal.staticUpdater:None
MouseComponent.stopVal.val:1.0
MouseComponent.stopVal.allowedTypes:[]
MouseComponent.stopVal.hint:When does the component end? (blank is endless)
MouseComponent.stopVal.allowedUpdates:[]
MouseComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
MouseComponent.stopVal.label:Stop
MouseComponent.durationEstim.default:
MouseComponent.durationEstim.categ:Basic
MouseComponent.durationEstim.allowedVals:[]
MouseComponent.durationEstim.readOnly:False
MouseComponent.durationEstim.updates:None
MouseComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
MouseComponent.durationEstim.__weakref__:None
MouseComponent.durationEstim.valType:code
MouseComponent.durationEstim.staticUpdater:None
MouseComponent.durationEstim.val:
MouseComponent.durationEstim.allowedTypes:[]
MouseComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
MouseComponent.durationEstim.allowedUpdates:None
MouseComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
MouseComponent.durationEstim.label:Expected duration (s)
MouseComponent.forceEndRoutineOnPress.default:True
MouseComponent.forceEndRoutineOnPress.categ:Basic
MouseComponent.forceEndRoutineOnPress.allowedVals:[]
MouseComponent.forceEndRoutineOnPress.readOnly:False
MouseComponent.forceEndRoutineOnPress.updates:constant
MouseComponent.forceEndRoutineOnPress.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': True, 'hint': u'Should a button press force the end of the routine (e.g end the trial)?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'End Routine on press', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
MouseComponent.forceEndRoutineOnPress.__weakref__:None
MouseComponent.forceEndRoutineOnPress.valType:bool
MouseComponent.forceEndRoutineOnPress.staticUpdater:None
MouseComponent.forceEndRoutineOnPress.val:True
MouseComponent.forceEndRoutineOnPress.allowedTypes:[]
MouseComponent.forceEndRoutineOnPress.hint:Should a button press force the end of the routine (e.g end the trial)?
MouseComponent.forceEndRoutineOnPress.allowedUpdates:[]
MouseComponent.forceEndRoutineOnPress.__class__:<class 'psychopy.app.builder.experiment.Param'>
MouseComponent.forceEndRoutineOnPress.label:End Routine on press
MouseComponent.startEstim.default:
MouseComponent.startEstim.categ:Basic
MouseComponent.startEstim.allowedVals:[]
MouseComponent.startEstim.readOnly:False
MouseComponent.startEstim.updates:None
MouseComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
MouseComponent.startEstim.__weakref__:None
MouseComponent.startEstim.valType:code
MouseComponent.startEstim.staticUpdater:None
MouseComponent.startEstim.val:
MouseComponent.startEstim.allowedTypes:[]
MouseComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
MouseComponent.startEstim.allowedUpdates:None
MouseComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
MouseComponent.startEstim.label:Expected start (s)
MouseComponent.startType.default:'time (s)'
MouseComponent.startType.categ:Basic
MouseComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
MouseComponent.startType.readOnly:False
MouseComponent.startType.updates:None
MouseComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
MouseComponent.startType.__weakref__:None
MouseComponent.startType.valType:str
MouseComponent.startType.staticUpdater:None
MouseComponent.startType.val:time (s)
MouseComponent.startType.allowedTypes:[]
MouseComponent.startType.hint:How do you want to define your start point?
MouseComponent.startType.allowedUpdates:None
MouseComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
MouseComponent.startType.label:start type
MouseComponent.stopType.default:'duration (s)'
MouseComponent.stopType.categ:Basic
MouseComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
MouseComponent.stopType.readOnly:False
MouseComponent.stopType.updates:None
MouseComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
MouseComponent.stopType.__weakref__:None
MouseComponent.stopType.valType:str
MouseComponent.stopType.staticUpdater:None
MouseComponent.stopType.val:duration (s)
MouseComponent.stopType.allowedTypes:[]
MouseComponent.stopType.hint:How do you want to define your end point?
MouseComponent.stopType.allowedUpdates:None
MouseComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
MouseComponent.stopType.label:stop type
MouseComponent.startVal.default:0.0
MouseComponent.startVal.categ:Basic
MouseComponent.startVal.allowedVals:[]
MouseComponent.startVal.readOnly:False
MouseComponent.startVal.updates:None
MouseComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
MouseComponent.startVal.__weakref__:None
MouseComponent.startVal.valType:code
MouseComponent.startVal.staticUpdater:None
MouseComponent.startVal.val:0.0
MouseComponent.startVal.allowedTypes:[]
MouseComponent.startVal.hint:When does the component start?
MouseComponent.startVal.allowedUpdates:None
MouseComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
MouseComponent.startVal.label:Start
MouseComponent.saveMouseState.default:'final'
MouseComponent.saveMouseState.categ:Basic
MouseComponent.saveMouseState.allowedVals:['final', 'on click', 'every frame', 'never']
MouseComponent.saveMouseState.readOnly:False
MouseComponent.saveMouseState.updates:None
MouseComponent.saveMouseState.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'final', 'hint': u'How often should the mouse state (x,y,buttons) be stored? On every video frame, every click or just at the end of the Routine?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['final', 'on click', 'every frame', 'never'], 'label': u'Save mouse state', 'readOnly': False, 'updates': None, 'valType': 'str'}
MouseComponent.saveMouseState.__weakref__:None
MouseComponent.saveMouseState.valType:str
MouseComponent.saveMouseState.staticUpdater:None
MouseComponent.saveMouseState.val:final
MouseComponent.saveMouseState.allowedTypes:[]
MouseComponent.saveMouseState.hint:How often should the mouse state (x,y,buttons) be stored? On every video frame, every click or just at the end of the Routine?
MouseComponent.saveMouseState.allowedUpdates:None
MouseComponent.saveMouseState.__class__:<class 'psychopy.app.builder.experiment.Param'>
MouseComponent.saveMouseState.label:Save mouse state
MovieComponent.order:['forceEndRoutine']
MovieComponent.opacity.default:1
MovieComponent.opacity.categ:Basic
MovieComponent.opacity.allowedVals:[]
MovieComponent.opacity.readOnly:False
MovieComponent.opacity.updates:constant
MovieComponent.opacity.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1, 'hint': u'Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Opacity', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
MovieComponent.opacity.__weakref__:None
MovieComponent.opacity.valType:code
MovieComponent.opacity.staticUpdater:None
MovieComponent.opacity.val:1
MovieComponent.opacity.allowedTypes:[]
MovieComponent.opacity.hint:Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)
MovieComponent.opacity.allowedUpdates:['constant', 'set every repeat', 'set every frame']
MovieComponent.opacity.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.opacity.label:Opacity
MovieComponent.name.default:movie
MovieComponent.name.categ:Basic
MovieComponent.name.allowedVals:[]
MovieComponent.name.readOnly:False
MovieComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'movie', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
MovieComponent.name.__weakref__:None
MovieComponent.name.valType:code
MovieComponent.name.staticUpdater:None
MovieComponent.name.val:movie
MovieComponent.name.allowedTypes:[]
MovieComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
MovieComponent.name.allowedUpdates:None
MovieComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.name.label:Name
MovieComponent.movie.default:''
MovieComponent.movie.categ:Basic
MovieComponent.movie.allowedVals:[]
MovieComponent.movie.readOnly:False
MovieComponent.movie.updates:constant
MovieComponent.movie.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'A filename for the movie (including path)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat'], 'allowedVals': [], 'label': u'Movie file', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
MovieComponent.movie.__weakref__:None
MovieComponent.movie.valType:str
MovieComponent.movie.staticUpdater:None
MovieComponent.movie.val:
MovieComponent.movie.allowedTypes:[]
MovieComponent.movie.hint:A filename for the movie (including path)
MovieComponent.movie.allowedUpdates:['constant', 'set every repeat']
MovieComponent.movie.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.movie.label:Movie file
MovieComponent.stopVal.default:1.0
MovieComponent.stopVal.categ:Basic
MovieComponent.stopVal.allowedVals:[]
MovieComponent.stopVal.readOnly:False
MovieComponent.stopVal.updates:constant
MovieComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1.0, 'hint': u'When does the component end? (blank to use the duration of the media)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
MovieComponent.stopVal.__weakref__:None
MovieComponent.stopVal.valType:code
MovieComponent.stopVal.staticUpdater:None
MovieComponent.stopVal.val:1.0
MovieComponent.stopVal.allowedTypes:[]
MovieComponent.stopVal.hint:When does the component end? (blank to use the duration of the media)
MovieComponent.stopVal.allowedUpdates:[]
MovieComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.stopVal.label:Stop
MovieComponent.durationEstim.default:
MovieComponent.durationEstim.categ:Basic
MovieComponent.durationEstim.allowedVals:[]
MovieComponent.durationEstim.readOnly:False
MovieComponent.durationEstim.updates:None
MovieComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
MovieComponent.durationEstim.__weakref__:None
MovieComponent.durationEstim.valType:code
MovieComponent.durationEstim.staticUpdater:None
MovieComponent.durationEstim.val:
MovieComponent.durationEstim.allowedTypes:[]
MovieComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
MovieComponent.durationEstim.allowedUpdates:None
MovieComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.durationEstim.label:Expected duration (s)
MovieComponent.pos.default:(0, 0)
MovieComponent.pos.categ:Basic
MovieComponent.pos.allowedVals:[]
MovieComponent.pos.readOnly:False
MovieComponent.pos.updates:constant
MovieComponent.pos.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': (0, 0), 'hint': u'Position of this stimulus (e.g. [1,2] )', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Position [x,y]', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
MovieComponent.pos.__weakref__:None
MovieComponent.pos.valType:code
MovieComponent.pos.staticUpdater:None
MovieComponent.pos.val:(0, 0)
MovieComponent.pos.allowedTypes:[]
MovieComponent.pos.hint:Position of this stimulus (e.g. [1,2] )
MovieComponent.pos.allowedUpdates:['constant', 'set every repeat', 'set every frame']
MovieComponent.pos.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.pos.label:Position [x,y]
MovieComponent.forceEndRoutine.default:False
MovieComponent.forceEndRoutine.categ:Basic
MovieComponent.forceEndRoutine.allowedVals:[]
MovieComponent.forceEndRoutine.readOnly:False
MovieComponent.forceEndRoutine.updates:constant
MovieComponent.forceEndRoutine.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': False, 'hint': u'Should the end of the movie cause the end of the routine (e.g. trial)?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Force end of Routine', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
MovieComponent.forceEndRoutine.__weakref__:None
MovieComponent.forceEndRoutine.valType:bool
MovieComponent.forceEndRoutine.staticUpdater:None
MovieComponent.forceEndRoutine.val:False
MovieComponent.forceEndRoutine.allowedTypes:[]
MovieComponent.forceEndRoutine.hint:Should the end of the movie cause the end of the routine (e.g. trial)?
MovieComponent.forceEndRoutine.allowedUpdates:[]
MovieComponent.forceEndRoutine.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.forceEndRoutine.label:Force end of Routine
MovieComponent.startEstim.default:
MovieComponent.startEstim.categ:Basic
MovieComponent.startEstim.allowedVals:[]
MovieComponent.startEstim.readOnly:False
MovieComponent.startEstim.updates:None
MovieComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
MovieComponent.startEstim.__weakref__:None
MovieComponent.startEstim.valType:code
MovieComponent.startEstim.staticUpdater:None
MovieComponent.startEstim.val:
MovieComponent.startEstim.allowedTypes:[]
MovieComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
MovieComponent.startEstim.allowedUpdates:None
MovieComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.startEstim.label:Expected start (s)
MovieComponent.units.default:'from exp settings'
MovieComponent.units.categ:Basic
MovieComponent.units.allowedVals:['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat']
MovieComponent.units.readOnly:False
MovieComponent.units.updates:None
MovieComponent.units.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'from exp settings', 'hint': u'Units of dimensions for this stimulus', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat'], 'label': u'Units', 'readOnly': False, 'updates': None, 'valType': 'str'}
MovieComponent.units.__weakref__:None
MovieComponent.units.valType:str
MovieComponent.units.staticUpdater:None
MovieComponent.units.val:from exp settings
MovieComponent.units.allowedTypes:[]
MovieComponent.units.hint:Units of dimensions for this stimulus
MovieComponent.units.allowedUpdates:None
MovieComponent.units.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.units.label:Units
MovieComponent.No audio.default:False
MovieComponent.No audio.categ:Basic
MovieComponent.No audio.allowedVals:[]
MovieComponent.No audio.readOnly:False
MovieComponent.No audio.updates:None
MovieComponent.No audio.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': False, 'hint': 'Prevent the audio stream from being loaded/processed (moviepy and opencv only)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': 'No audio', 'readOnly': False, 'updates': None, 'valType': 'bool'}
MovieComponent.No audio.__weakref__:None
MovieComponent.No audio.valType:bool
MovieComponent.No audio.staticUpdater:None
MovieComponent.No audio.val:False
MovieComponent.No audio.allowedTypes:[]
MovieComponent.No audio.hint:Prevent the audio stream from being loaded/processed (moviepy and opencv only)
MovieComponent.No audio.allowedUpdates:None
MovieComponent.No audio.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.No audio.label:No audio
MovieComponent.startType.default:'time (s)'
MovieComponent.startType.categ:Basic
MovieComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
MovieComponent.startType.readOnly:False
MovieComponent.startType.updates:None
MovieComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
MovieComponent.startType.__weakref__:None
MovieComponent.startType.valType:str
MovieComponent.startType.staticUpdater:None
MovieComponent.startType.val:time (s)
MovieComponent.startType.allowedTypes:[]
MovieComponent.startType.hint:How do you want to define your start point?
MovieComponent.startType.allowedUpdates:None
MovieComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.startType.label:start type
MovieComponent.ori.default:0
MovieComponent.ori.categ:Basic
MovieComponent.ori.allowedVals:[]
MovieComponent.ori.readOnly:False
MovieComponent.ori.updates:constant
MovieComponent.ori.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0, 'hint': u'Orientation of this stimulus (in deg)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Orientation', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
MovieComponent.ori.__weakref__:None
MovieComponent.ori.valType:code
MovieComponent.ori.staticUpdater:None
MovieComponent.ori.val:0
MovieComponent.ori.allowedTypes:[]
MovieComponent.ori.hint:Orientation of this stimulus (in deg)
MovieComponent.ori.allowedUpdates:['constant', 'set every repeat', 'set every frame']
MovieComponent.ori.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.ori.label:Orientation
MovieComponent.stopType.default:'duration (s)'
MovieComponent.stopType.categ:Basic
MovieComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
MovieComponent.stopType.readOnly:False
MovieComponent.stopType.updates:None
MovieComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
MovieComponent.stopType.__weakref__:None
MovieComponent.stopType.valType:str
MovieComponent.stopType.staticUpdater:None
MovieComponent.stopType.val:duration (s)
MovieComponent.stopType.allowedTypes:[]
MovieComponent.stopType.hint:How do you want to define your end point?
MovieComponent.stopType.allowedUpdates:None
MovieComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.stopType.label:stop type
MovieComponent.startVal.default:0.0
MovieComponent.startVal.categ:Basic
MovieComponent.startVal.allowedVals:[]
MovieComponent.startVal.readOnly:False
MovieComponent.startVal.updates:None
MovieComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
MovieComponent.startVal.__weakref__:None
MovieComponent.startVal.valType:code
MovieComponent.startVal.staticUpdater:None
MovieComponent.startVal.val:0.0
MovieComponent.startVal.allowedTypes:[]
MovieComponent.startVal.hint:When does the component start?
MovieComponent.startVal.allowedUpdates:None
MovieComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.startVal.label:Start
MovieComponent.backend.default:'moviepy'
MovieComponent.backend.categ:Basic
MovieComponent.backend.allowedVals:['moviepy', 'avbin', 'opencv']
MovieComponent.backend.readOnly:False
MovieComponent.backend.updates:None
MovieComponent.backend.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'moviepy', 'hint': u'What underlying lib to use for loading movies', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['moviepy', 'avbin', 'opencv'], 'label': u'backend', 'readOnly': False, 'updates': None, 'valType': 'str'}
MovieComponent.backend.__weakref__:None
MovieComponent.backend.valType:str
MovieComponent.backend.staticUpdater:None
MovieComponent.backend.val:moviepy
MovieComponent.backend.allowedTypes:[]
MovieComponent.backend.hint:What underlying lib to use for loading movies
MovieComponent.backend.allowedUpdates:None
MovieComponent.backend.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.backend.label:backend
MovieComponent.size.default:
MovieComponent.size.categ:Basic
MovieComponent.size.allowedVals:[]
MovieComponent.size.readOnly:False
MovieComponent.size.updates:constant
MovieComponent.size.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Size [w,h]', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
MovieComponent.size.__weakref__:None
MovieComponent.size.valType:code
MovieComponent.size.staticUpdater:None
MovieComponent.size.val:
MovieComponent.size.allowedTypes:[]
MovieComponent.size.hint:Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2]
MovieComponent.size.allowedUpdates:['constant', 'set every repeat', 'set every frame']
MovieComponent.size.__class__:<class 'psychopy.app.builder.experiment.Param'>
MovieComponent.size.label:Size [w,h]
ParallelOutComponent.order:['address', 'startData', 'stopData']
ParallelOutComponent.name.default:p_port
ParallelOutComponent.name.categ:Basic
ParallelOutComponent.name.allowedVals:[]
ParallelOutComponent.name.readOnly:False
ParallelOutComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'p_port', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
ParallelOutComponent.name.__weakref__:None
ParallelOutComponent.name.valType:code
ParallelOutComponent.name.staticUpdater:None
ParallelOutComponent.name.val:p_port
ParallelOutComponent.name.allowedTypes:[]
ParallelOutComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
ParallelOutComponent.name.allowedUpdates:None
ParallelOutComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
ParallelOutComponent.name.label:Name
ParallelOutComponent.syncScreen.default:True
ParallelOutComponent.syncScreen.categ:Basic
ParallelOutComponent.syncScreen.allowedVals:[True, False]
ParallelOutComponent.syncScreen.readOnly:False
ParallelOutComponent.syncScreen.updates:constant
ParallelOutComponent.syncScreen.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': True, 'hint': u'If the parallel port data relates to visual stimuli then sync its pulse to the screen refresh', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [True, False], 'label': u'Sync to screen', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
ParallelOutComponent.syncScreen.__weakref__:None
ParallelOutComponent.syncScreen.valType:bool
ParallelOutComponent.syncScreen.staticUpdater:None
ParallelOutComponent.syncScreen.val:True
ParallelOutComponent.syncScreen.allowedTypes:[]
ParallelOutComponent.syncScreen.hint:If the parallel port data relates to visual stimuli then sync its pulse to the screen refresh
ParallelOutComponent.syncScreen.allowedUpdates:[]
ParallelOutComponent.syncScreen.__class__:<class 'psychopy.app.builder.experiment.Param'>
ParallelOutComponent.syncScreen.label:Sync to screen
ParallelOutComponent.stopData.default:0
ParallelOutComponent.stopData.categ:Basic
ParallelOutComponent.stopData.allowedVals:[]
ParallelOutComponent.stopData.readOnly:False
ParallelOutComponent.stopData.updates:None
ParallelOutComponent.stopData.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '0', 'hint': u"Data to be sent at 'end'", 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Stop data', 'readOnly': False, 'updates': None, 'valType': 'code'}
ParallelOutComponent.stopData.__weakref__:None
ParallelOutComponent.stopData.valType:code
ParallelOutComponent.stopData.staticUpdater:None
ParallelOutComponent.stopData.val:0
ParallelOutComponent.stopData.allowedTypes:[]
ParallelOutComponent.stopData.hint:Data to be sent at 'end'
ParallelOutComponent.stopData.allowedUpdates:None
ParallelOutComponent.stopData.__class__:<class 'psychopy.app.builder.experiment.Param'>
ParallelOutComponent.stopData.label:Stop data
ParallelOutComponent.stopVal.default:1.0
ParallelOutComponent.stopVal.categ:Basic
ParallelOutComponent.stopVal.allowedVals:[]
ParallelOutComponent.stopVal.readOnly:False
ParallelOutComponent.stopVal.updates:constant
ParallelOutComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1.0, 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
ParallelOutComponent.stopVal.__weakref__:None
ParallelOutComponent.stopVal.valType:code
ParallelOutComponent.stopVal.staticUpdater:None
ParallelOutComponent.stopVal.val:1.0
ParallelOutComponent.stopVal.allowedTypes:[]
ParallelOutComponent.stopVal.hint:When does the component end? (blank is endless)
ParallelOutComponent.stopVal.allowedUpdates:[]
ParallelOutComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
ParallelOutComponent.stopVal.label:Stop
ParallelOutComponent.durationEstim.default:
ParallelOutComponent.durationEstim.categ:Basic
ParallelOutComponent.durationEstim.allowedVals:[]
ParallelOutComponent.durationEstim.readOnly:False
ParallelOutComponent.durationEstim.updates:None
ParallelOutComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
ParallelOutComponent.durationEstim.__weakref__:None
ParallelOutComponent.durationEstim.valType:code
ParallelOutComponent.durationEstim.staticUpdater:None
ParallelOutComponent.durationEstim.val:
ParallelOutComponent.durationEstim.allowedTypes:[]
ParallelOutComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
ParallelOutComponent.durationEstim.allowedUpdates:None
ParallelOutComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
ParallelOutComponent.durationEstim.label:Expected duration (s)
ParallelOutComponent.startEstim.default:
ParallelOutComponent.startEstim.categ:Basic
ParallelOutComponent.startEstim.allowedVals:[]
ParallelOutComponent.startEstim.readOnly:False
ParallelOutComponent.startEstim.updates:None
ParallelOutComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
ParallelOutComponent.startEstim.__weakref__:None
ParallelOutComponent.startEstim.valType:code
ParallelOutComponent.startEstim.staticUpdater:None
ParallelOutComponent.startEstim.val:
ParallelOutComponent.startEstim.allowedTypes:[]
ParallelOutComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
ParallelOutComponent.startEstim.allowedUpdates:None
ParallelOutComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
ParallelOutComponent.startEstim.label:Expected start (s)
ParallelOutComponent.startType.default:'time (s)'
ParallelOutComponent.startType.categ:Basic
ParallelOutComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
ParallelOutComponent.startType.readOnly:False
ParallelOutComponent.startType.updates:None
ParallelOutComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
ParallelOutComponent.startType.__weakref__:None
ParallelOutComponent.startType.valType:str
ParallelOutComponent.startType.staticUpdater:None
ParallelOutComponent.startType.val:time (s)
ParallelOutComponent.startType.allowedTypes:[]
ParallelOutComponent.startType.hint:How do you want to define your start point?
ParallelOutComponent.startType.allowedUpdates:None
ParallelOutComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
ParallelOutComponent.startType.label:start type
ParallelOutComponent.address.default:u'0x0378'
ParallelOutComponent.address.categ:Basic
ParallelOutComponent.address.allowedVals:[u'0x0378', u'0x03BC', u'/dev/parport0', u'/dev/parport1', u'LabJack U3']
ParallelOutComponent.address.readOnly:False
ParallelOutComponent.address.updates:None
ParallelOutComponent.address.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': u'0x0378', 'hint': u'Parallel port to be used (you can change these options in preferences>general)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [u'0x0378', u'0x03BC', u'/dev/parport0', u'/dev/parport1', u'LabJack U3'], 'label': u'Port address', 'readOnly': False, 'updates': None, 'valType': 'str'}
ParallelOutComponent.address.__weakref__:None
ParallelOutComponent.address.valType:str
ParallelOutComponent.address.staticUpdater:None
ParallelOutComponent.address.val:0x0378
ParallelOutComponent.address.allowedTypes:[]
ParallelOutComponent.address.hint:Parallel port to be used (you can change these options in preferences>general)
ParallelOutComponent.address.allowedUpdates:None
ParallelOutComponent.address.__class__:<class 'psychopy.app.builder.experiment.Param'>
ParallelOutComponent.address.label:Port address
ParallelOutComponent.stopType.default:'duration (s)'
ParallelOutComponent.stopType.categ:Basic
ParallelOutComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
ParallelOutComponent.stopType.readOnly:False
ParallelOutComponent.stopType.updates:None
ParallelOutComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
ParallelOutComponent.stopType.__weakref__:None
ParallelOutComponent.stopType.valType:str
ParallelOutComponent.stopType.staticUpdater:None
ParallelOutComponent.stopType.val:duration (s)
ParallelOutComponent.stopType.allowedTypes:[]
ParallelOutComponent.stopType.hint:How do you want to define your end point?
ParallelOutComponent.stopType.allowedUpdates:None
ParallelOutComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
ParallelOutComponent.stopType.label:stop type
ParallelOutComponent.startVal.default:0.0
ParallelOutComponent.startVal.categ:Basic
ParallelOutComponent.startVal.allowedVals:[]
ParallelOutComponent.startVal.readOnly:False
ParallelOutComponent.startVal.updates:None
ParallelOutComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
ParallelOutComponent.startVal.__weakref__:None
ParallelOutComponent.startVal.valType:code
ParallelOutComponent.startVal.staticUpdater:None
ParallelOutComponent.startVal.val:0.0
ParallelOutComponent.startVal.allowedTypes:[]
ParallelOutComponent.startVal.hint:When does the component start?
ParallelOutComponent.startVal.allowedUpdates:None
ParallelOutComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
ParallelOutComponent.startVal.label:Start
ParallelOutComponent.startData.default:1
ParallelOutComponent.startData.categ:Basic
ParallelOutComponent.startData.allowedVals:[]
ParallelOutComponent.startData.readOnly:False
ParallelOutComponent.startData.updates:None
ParallelOutComponent.startData.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '1', 'hint': u"Data to be sent at 'start'", 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start data', 'readOnly': False, 'updates': None, 'valType': 'code'}
ParallelOutComponent.startData.__weakref__:None
ParallelOutComponent.startData.valType:code
ParallelOutComponent.startData.staticUpdater:None
ParallelOutComponent.startData.val:1
ParallelOutComponent.startData.allowedTypes:[]
ParallelOutComponent.startData.hint:Data to be sent at 'start'
ParallelOutComponent.startData.allowedUpdates:None
ParallelOutComponent.startData.__class__:<class 'psychopy.app.builder.experiment.Param'>
ParallelOutComponent.startData.label:Start data
PatchComponent.order:['name']
PatchComponent.opacity.default:1
PatchComponent.opacity.categ:Basic
PatchComponent.opacity.allowedVals:[]
PatchComponent.opacity.readOnly:False
PatchComponent.opacity.updates:constant
PatchComponent.opacity.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1, 'hint': u'Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Opacity', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
PatchComponent.opacity.__weakref__:None
PatchComponent.opacity.valType:code
PatchComponent.opacity.staticUpdater:None
PatchComponent.opacity.val:1
PatchComponent.opacity.allowedTypes:[]
PatchComponent.opacity.hint:Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)
PatchComponent.opacity.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PatchComponent.opacity.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.opacity.label:Opacity
PatchComponent.colorSpace.default:'rgb'
PatchComponent.colorSpace.categ:Advanced
PatchComponent.colorSpace.allowedVals:['rgb', 'dkl', 'lms', 'hsv']
PatchComponent.colorSpace.readOnly:False
PatchComponent.colorSpace.updates:constant
PatchComponent.colorSpace.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 'rgb', 'hint': u'Choice of color space for the color (rgb, dkl, lms, hsv)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['rgb', 'dkl', 'lms', 'hsv'], 'label': u'Color space', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
PatchComponent.colorSpace.__weakref__:None
PatchComponent.colorSpace.valType:str
PatchComponent.colorSpace.staticUpdater:None
PatchComponent.colorSpace.val:rgb
PatchComponent.colorSpace.allowedTypes:[]
PatchComponent.colorSpace.hint:Choice of color space for the color (rgb, dkl, lms, hsv)
PatchComponent.colorSpace.allowedUpdates:None
PatchComponent.colorSpace.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.colorSpace.label:Color space
PatchComponent.name.default:patch
PatchComponent.name.categ:Basic
PatchComponent.name.allowedVals:[]
PatchComponent.name.readOnly:False
PatchComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'patch', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
PatchComponent.name.__weakref__:None
PatchComponent.name.valType:code
PatchComponent.name.staticUpdater:None
PatchComponent.name.val:patch
PatchComponent.name.allowedTypes:[]
PatchComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
PatchComponent.name.allowedUpdates:None
PatchComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.name.label:Name
PatchComponent.color.default:[1,1,1]
PatchComponent.color.categ:Advanced
PatchComponent.color.allowedVals:[]
PatchComponent.color.readOnly:False
PatchComponent.color.updates:constant
PatchComponent.color.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': '$[1,1,1]', 'hint': u'Color of this stimulus (e.g. $[1,1,0], red ); Right-click to bring up a color-picker (rgb only)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Color', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
PatchComponent.color.__weakref__:None
PatchComponent.color.valType:str
PatchComponent.color.staticUpdater:None
PatchComponent.color.val:$[1,1,1]
PatchComponent.color.allowedTypes:[]
PatchComponent.color.hint:Color of this stimulus (e.g. $[1,1,0], red ); Right-click to bring up a color-picker (rgb only)
PatchComponent.color.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PatchComponent.color.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.color.label:Color
PatchComponent.stopVal.default:1.0
PatchComponent.stopVal.categ:Basic
PatchComponent.stopVal.allowedVals:[]
PatchComponent.stopVal.readOnly:False
PatchComponent.stopVal.updates:constant
PatchComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1.0, 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
PatchComponent.stopVal.__weakref__:None
PatchComponent.stopVal.valType:code
PatchComponent.stopVal.staticUpdater:None
PatchComponent.stopVal.val:1.0
PatchComponent.stopVal.allowedTypes:[]
PatchComponent.stopVal.hint:When does the component end? (blank is endless)
PatchComponent.stopVal.allowedUpdates:[]
PatchComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.stopVal.label:Stop
PatchComponent.durationEstim.default:
PatchComponent.durationEstim.categ:Basic
PatchComponent.durationEstim.allowedVals:[]
PatchComponent.durationEstim.readOnly:False
PatchComponent.durationEstim.updates:None
PatchComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
PatchComponent.durationEstim.__weakref__:None
PatchComponent.durationEstim.valType:code
PatchComponent.durationEstim.staticUpdater:None
PatchComponent.durationEstim.val:
PatchComponent.durationEstim.allowedTypes:[]
PatchComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
PatchComponent.durationEstim.allowedUpdates:None
PatchComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.durationEstim.label:Expected duration (s)
PatchComponent.mask.default:'None'
PatchComponent.mask.categ:Basic
PatchComponent.mask.allowedVals:[]
PatchComponent.mask.readOnly:False
PatchComponent.mask.updates:constant
PatchComponent.mask.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'None', 'hint': u'An image to define the alpha mask (ie shape)- gauss, circle... or a filename (including path)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Mask', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
PatchComponent.mask.__weakref__:None
PatchComponent.mask.valType:str
PatchComponent.mask.staticUpdater:None
PatchComponent.mask.val:None
PatchComponent.mask.allowedTypes:[]
PatchComponent.mask.hint:An image to define the alpha mask (ie shape)- gauss, circle... or a filename (including path)
PatchComponent.mask.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PatchComponent.mask.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.mask.label:Mask
PatchComponent.pos.default:(0, 0)
PatchComponent.pos.categ:Basic
PatchComponent.pos.allowedVals:[]
PatchComponent.pos.readOnly:False
PatchComponent.pos.updates:constant
PatchComponent.pos.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': (0, 0), 'hint': u'Position of this stimulus (e.g. [1,2] )', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Position [x,y]', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
PatchComponent.pos.__weakref__:None
PatchComponent.pos.valType:code
PatchComponent.pos.staticUpdater:None
PatchComponent.pos.val:(0, 0)
PatchComponent.pos.allowedTypes:[]
PatchComponent.pos.hint:Position of this stimulus (e.g. [1,2] )
PatchComponent.pos.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PatchComponent.pos.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.pos.label:Position [x,y]
PatchComponent.interpolate.default:'linear'
PatchComponent.interpolate.categ:Advanced
PatchComponent.interpolate.allowedVals:['linear', 'nearest']
PatchComponent.interpolate.readOnly:False
PatchComponent.interpolate.updates:constant
PatchComponent.interpolate.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 'linear', 'hint': u'How should the image be interpolated if/when rescaled', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': ['linear', 'nearest'], 'label': u'Interpolate', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
PatchComponent.interpolate.__weakref__:None
PatchComponent.interpolate.valType:str
PatchComponent.interpolate.staticUpdater:None
PatchComponent.interpolate.val:linear
PatchComponent.interpolate.allowedTypes:[]
PatchComponent.interpolate.hint:How should the image be interpolated if/when rescaled
PatchComponent.interpolate.allowedUpdates:[]
PatchComponent.interpolate.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.interpolate.label:Interpolate
PatchComponent.sf.default:None
PatchComponent.sf.categ:Advanced
PatchComponent.sf.allowedVals:[]
PatchComponent.sf.readOnly:False
PatchComponent.sf.updates:constant
PatchComponent.sf.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 'None', 'hint': u'Spatial frequency of image repeats across the patch, e.g. 4 or [2,3]', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Spatial frequency', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
PatchComponent.sf.__weakref__:None
PatchComponent.sf.valType:code
PatchComponent.sf.staticUpdater:None
PatchComponent.sf.val:None
PatchComponent.sf.allowedTypes:[]
PatchComponent.sf.hint:Spatial frequency of image repeats across the patch, e.g. 4 or [2,3]
PatchComponent.sf.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PatchComponent.sf.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.sf.label:Spatial frequency
PatchComponent.startEstim.default:
PatchComponent.startEstim.categ:Basic
PatchComponent.startEstim.allowedVals:[]
PatchComponent.startEstim.readOnly:False
PatchComponent.startEstim.updates:None
PatchComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
PatchComponent.startEstim.__weakref__:None
PatchComponent.startEstim.valType:code
PatchComponent.startEstim.staticUpdater:None
PatchComponent.startEstim.val:
PatchComponent.startEstim.allowedTypes:[]
PatchComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
PatchComponent.startEstim.allowedUpdates:None
PatchComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.startEstim.label:Expected start (s)
PatchComponent.units.default:'from exp settings'
PatchComponent.units.categ:Basic
PatchComponent.units.allowedVals:['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat']
PatchComponent.units.readOnly:False
PatchComponent.units.updates:None
PatchComponent.units.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'from exp settings', 'hint': u'Units of dimensions for this stimulus', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat'], 'label': u'Units', 'readOnly': False, 'updates': None, 'valType': 'str'}
PatchComponent.units.__weakref__:None
PatchComponent.units.valType:str
PatchComponent.units.staticUpdater:None
PatchComponent.units.val:from exp settings
PatchComponent.units.allowedTypes:[]
PatchComponent.units.hint:Units of dimensions for this stimulus
PatchComponent.units.allowedUpdates:None
PatchComponent.units.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.units.label:Units
PatchComponent.texture resolution.default:128
PatchComponent.texture resolution.categ:Advanced
PatchComponent.texture resolution.allowedVals:['32', '64', '128', '256', '512']
PatchComponent.texture resolution.readOnly:False
PatchComponent.texture resolution.updates:constant
PatchComponent.texture resolution.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': '128', 'hint': u'Resolution of the texture for standard ones such as sin, sqr etc. For most cases a value of 256 pixels will suffice', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': ['32', '64', '128', '256', '512'], 'label': u'Texture resolution', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
PatchComponent.texture resolution.__weakref__:None
PatchComponent.texture resolution.valType:code
PatchComponent.texture resolution.staticUpdater:None
PatchComponent.texture resolution.val:128
PatchComponent.texture resolution.allowedTypes:[]
PatchComponent.texture resolution.hint:Resolution of the texture for standard ones such as sin, sqr etc. For most cases a value of 256 pixels will suffice
PatchComponent.texture resolution.allowedUpdates:[]
PatchComponent.texture resolution.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.texture resolution.label:Texture resolution
PatchComponent.phase.default:0.0
PatchComponent.phase.categ:Advanced
PatchComponent.phase.allowedVals:[]
PatchComponent.phase.readOnly:False
PatchComponent.phase.updates:constant
PatchComponent.phase.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 0.0, 'hint': u'Spatial positioning of the image on the patch (in range 0-1.0)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Phase (in cycles)', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
PatchComponent.phase.__weakref__:None
PatchComponent.phase.valType:code
PatchComponent.phase.staticUpdater:None
PatchComponent.phase.val:0.0
PatchComponent.phase.allowedTypes:[]
PatchComponent.phase.hint:Spatial positioning of the image on the patch (in range 0-1.0)
PatchComponent.phase.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PatchComponent.phase.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.phase.label:Phase (in cycles)
PatchComponent.startType.default:'time (s)'
PatchComponent.startType.categ:Basic
PatchComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
PatchComponent.startType.readOnly:False
PatchComponent.startType.updates:None
PatchComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
PatchComponent.startType.__weakref__:None
PatchComponent.startType.valType:str
PatchComponent.startType.staticUpdater:None
PatchComponent.startType.val:time (s)
PatchComponent.startType.allowedTypes:[]
PatchComponent.startType.hint:How do you want to define your start point?
PatchComponent.startType.allowedUpdates:None
PatchComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.startType.label:start type
PatchComponent.ori.default:0
PatchComponent.ori.categ:Basic
PatchComponent.ori.allowedVals:[]
PatchComponent.ori.readOnly:False
PatchComponent.ori.updates:constant
PatchComponent.ori.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0, 'hint': u'Orientation of this stimulus (in deg)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Orientation', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
PatchComponent.ori.__weakref__:None
PatchComponent.ori.valType:code
PatchComponent.ori.staticUpdater:None
PatchComponent.ori.val:0
PatchComponent.ori.allowedTypes:[]
PatchComponent.ori.hint:Orientation of this stimulus (in deg)
PatchComponent.ori.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PatchComponent.ori.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.ori.label:Orientation
PatchComponent.stopType.default:'duration (s)'
PatchComponent.stopType.categ:Basic
PatchComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
PatchComponent.stopType.readOnly:False
PatchComponent.stopType.updates:None
PatchComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
PatchComponent.stopType.__weakref__:None
PatchComponent.stopType.valType:str
PatchComponent.stopType.staticUpdater:None
PatchComponent.stopType.val:duration (s)
PatchComponent.stopType.allowedTypes:[]
PatchComponent.stopType.hint:How do you want to define your end point?
PatchComponent.stopType.allowedUpdates:None
PatchComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.stopType.label:stop type
PatchComponent.startVal.default:0.0
PatchComponent.startVal.categ:Basic
PatchComponent.startVal.allowedVals:[]
PatchComponent.startVal.readOnly:False
PatchComponent.startVal.updates:None
PatchComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
PatchComponent.startVal.__weakref__:None
PatchComponent.startVal.valType:code
PatchComponent.startVal.staticUpdater:None
PatchComponent.startVal.val:0.0
PatchComponent.startVal.allowedTypes:[]
PatchComponent.startVal.hint:When does the component start?
PatchComponent.startVal.allowedUpdates:None
PatchComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.startVal.label:Start
PatchComponent.image.default:'sin'
PatchComponent.image.categ:Basic
PatchComponent.image.allowedVals:[]
PatchComponent.image.readOnly:False
PatchComponent.image.updates:constant
PatchComponent.image.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'sin', 'hint': u"The image to be displayed - 'sin','sqr'... or a filename (including path)", 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Image/tex', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
PatchComponent.image.__weakref__:None
PatchComponent.image.valType:str
PatchComponent.image.staticUpdater:None
PatchComponent.image.val:sin
PatchComponent.image.allowedTypes:[]
PatchComponent.image.hint:The image to be displayed - 'sin','sqr'... or a filename (including path)
PatchComponent.image.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PatchComponent.image.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.image.label:Image/tex
PatchComponent.size.default:(0.5, 0.5)
PatchComponent.size.categ:Basic
PatchComponent.size.allowedVals:[]
PatchComponent.size.readOnly:False
PatchComponent.size.updates:constant
PatchComponent.size.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': (0.5, 0.5), 'hint': u'Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Size [w,h]', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
PatchComponent.size.__weakref__:None
PatchComponent.size.valType:code
PatchComponent.size.staticUpdater:None
PatchComponent.size.val:(0.5, 0.5)
PatchComponent.size.allowedTypes:[]
PatchComponent.size.hint:Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2]
PatchComponent.size.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PatchComponent.size.__class__:<class 'psychopy.app.builder.experiment.Param'>
PatchComponent.size.label:Size [w,h]
PolygonComponent.order:['nVertices']
PolygonComponent.opacity.default:1
PolygonComponent.opacity.categ:Basic
PolygonComponent.opacity.allowedVals:[]
PolygonComponent.opacity.readOnly:False
PolygonComponent.opacity.updates:constant
PolygonComponent.opacity.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1, 'hint': u'Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Opacity', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
PolygonComponent.opacity.__weakref__:None
PolygonComponent.opacity.valType:code
PolygonComponent.opacity.staticUpdater:None
PolygonComponent.opacity.val:1
PolygonComponent.opacity.allowedTypes:[]
PolygonComponent.opacity.hint:Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)
PolygonComponent.opacity.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PolygonComponent.opacity.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.opacity.label:Opacity
PolygonComponent.fillColorSpace.default:'rgb'
PolygonComponent.fillColorSpace.categ:Advanced
PolygonComponent.fillColorSpace.allowedVals:['rgb', 'dkl', 'lms', 'hsv']
PolygonComponent.fillColorSpace.readOnly:False
PolygonComponent.fillColorSpace.updates:constant
PolygonComponent.fillColorSpace.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 'rgb', 'hint': u'Choice of color space for the fill color (rgb, dkl, lms, hsv)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['rgb', 'dkl', 'lms', 'hsv'], 'label': u'Fill color-space', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
PolygonComponent.fillColorSpace.__weakref__:None
PolygonComponent.fillColorSpace.valType:str
PolygonComponent.fillColorSpace.staticUpdater:None
PolygonComponent.fillColorSpace.val:rgb
PolygonComponent.fillColorSpace.allowedTypes:[]
PolygonComponent.fillColorSpace.hint:Choice of color space for the fill color (rgb, dkl, lms, hsv)
PolygonComponent.fillColorSpace.allowedUpdates:None
PolygonComponent.fillColorSpace.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.fillColorSpace.label:Fill color-space
PolygonComponent.name.default:polygon
PolygonComponent.name.categ:Basic
PolygonComponent.name.allowedVals:[]
PolygonComponent.name.readOnly:False
PolygonComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'polygon', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
PolygonComponent.name.__weakref__:None
PolygonComponent.name.valType:code
PolygonComponent.name.staticUpdater:None
PolygonComponent.name.val:polygon
PolygonComponent.name.allowedTypes:[]
PolygonComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
PolygonComponent.name.allowedUpdates:None
PolygonComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.name.label:Name
PolygonComponent.fillColor.default:[1,1,1]
PolygonComponent.fillColor.categ:Advanced
PolygonComponent.fillColor.allowedVals:[]
PolygonComponent.fillColor.readOnly:False
PolygonComponent.fillColor.updates:constant
PolygonComponent.fillColor.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': '$[1,1,1]', 'hint': u'Fill color of this shape; Right-click to bring up a color-picker (rgb only)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Fill color', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
PolygonComponent.fillColor.__weakref__:None
PolygonComponent.fillColor.valType:str
PolygonComponent.fillColor.staticUpdater:None
PolygonComponent.fillColor.val:$[1,1,1]
PolygonComponent.fillColor.allowedTypes:[]
PolygonComponent.fillColor.hint:Fill color of this shape; Right-click to bring up a color-picker (rgb only)
PolygonComponent.fillColor.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PolygonComponent.fillColor.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.fillColor.label:Fill color
PolygonComponent.stopVal.default:1.0
PolygonComponent.stopVal.categ:Basic
PolygonComponent.stopVal.allowedVals:[]
PolygonComponent.stopVal.readOnly:False
PolygonComponent.stopVal.updates:constant
PolygonComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1.0, 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
PolygonComponent.stopVal.__weakref__:None
PolygonComponent.stopVal.valType:code
PolygonComponent.stopVal.staticUpdater:None
PolygonComponent.stopVal.val:1.0
PolygonComponent.stopVal.allowedTypes:[]
PolygonComponent.stopVal.hint:When does the component end? (blank is endless)
PolygonComponent.stopVal.allowedUpdates:[]
PolygonComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.stopVal.label:Stop
PolygonComponent.durationEstim.default:
PolygonComponent.durationEstim.categ:Basic
PolygonComponent.durationEstim.allowedVals:[]
PolygonComponent.durationEstim.readOnly:False
PolygonComponent.durationEstim.updates:None
PolygonComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
PolygonComponent.durationEstim.__weakref__:None
PolygonComponent.durationEstim.valType:code
PolygonComponent.durationEstim.staticUpdater:None
PolygonComponent.durationEstim.val:
PolygonComponent.durationEstim.allowedTypes:[]
PolygonComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
PolygonComponent.durationEstim.allowedUpdates:None
PolygonComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.durationEstim.label:Expected duration (s)
PolygonComponent.pos.default:(0, 0)
PolygonComponent.pos.categ:Basic
PolygonComponent.pos.allowedVals:[]
PolygonComponent.pos.readOnly:False
PolygonComponent.pos.updates:constant
PolygonComponent.pos.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': (0, 0), 'hint': u'Position of this stimulus (e.g. [1,2] )', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Position [x,y]', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
PolygonComponent.pos.__weakref__:None
PolygonComponent.pos.valType:code
PolygonComponent.pos.staticUpdater:None
PolygonComponent.pos.val:(0, 0)
PolygonComponent.pos.allowedTypes:[]
PolygonComponent.pos.hint:Position of this stimulus (e.g. [1,2] )
PolygonComponent.pos.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PolygonComponent.pos.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.pos.label:Position [x,y]
PolygonComponent.interpolate.default:'linear'
PolygonComponent.interpolate.categ:Advanced
PolygonComponent.interpolate.allowedVals:['linear', 'nearest']
PolygonComponent.interpolate.readOnly:False
PolygonComponent.interpolate.updates:constant
PolygonComponent.interpolate.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 'linear', 'hint': u'How should the image be interpolated if/when rescaled', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': ['linear', 'nearest'], 'label': u'Interpolate', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
PolygonComponent.interpolate.__weakref__:None
PolygonComponent.interpolate.valType:str
PolygonComponent.interpolate.staticUpdater:None
PolygonComponent.interpolate.val:linear
PolygonComponent.interpolate.allowedTypes:[]
PolygonComponent.interpolate.hint:How should the image be interpolated if/when rescaled
PolygonComponent.interpolate.allowedUpdates:[]
PolygonComponent.interpolate.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.interpolate.label:Interpolate
PolygonComponent.lineWidth.default:1
PolygonComponent.lineWidth.categ:Basic
PolygonComponent.lineWidth.allowedVals:[]
PolygonComponent.lineWidth.readOnly:False
PolygonComponent.lineWidth.updates:constant
PolygonComponent.lineWidth.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1, 'hint': u"Width of the shape's line (always in pixels - this does NOT use 'units')", 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Line width', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
PolygonComponent.lineWidth.__weakref__:None
PolygonComponent.lineWidth.valType:code
PolygonComponent.lineWidth.staticUpdater:None
PolygonComponent.lineWidth.val:1
PolygonComponent.lineWidth.allowedTypes:[]
PolygonComponent.lineWidth.hint:Width of the shape's line (always in pixels - this does NOT use 'units')
PolygonComponent.lineWidth.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PolygonComponent.lineWidth.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.lineWidth.label:Line width
PolygonComponent.startEstim.default:
PolygonComponent.startEstim.categ:Basic
PolygonComponent.startEstim.allowedVals:[]
PolygonComponent.startEstim.readOnly:False
PolygonComponent.startEstim.updates:None
PolygonComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
PolygonComponent.startEstim.__weakref__:None
PolygonComponent.startEstim.valType:code
PolygonComponent.startEstim.staticUpdater:None
PolygonComponent.startEstim.val:
PolygonComponent.startEstim.allowedTypes:[]
PolygonComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
PolygonComponent.startEstim.allowedUpdates:None
PolygonComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.startEstim.label:Expected start (s)
PolygonComponent.units.default:'from exp settings'
PolygonComponent.units.categ:Basic
PolygonComponent.units.allowedVals:['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat']
PolygonComponent.units.readOnly:False
PolygonComponent.units.updates:None
PolygonComponent.units.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'from exp settings', 'hint': u'Units of dimensions for this stimulus', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat'], 'label': u'Units', 'readOnly': False, 'updates': None, 'valType': 'str'}
PolygonComponent.units.__weakref__:None
PolygonComponent.units.valType:str
PolygonComponent.units.staticUpdater:None
PolygonComponent.units.val:from exp settings
PolygonComponent.units.allowedTypes:[]
PolygonComponent.units.hint:Units of dimensions for this stimulus
PolygonComponent.units.allowedUpdates:None
PolygonComponent.units.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.units.label:Units
PolygonComponent.startType.default:'time (s)'
PolygonComponent.startType.categ:Basic
PolygonComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
PolygonComponent.startType.readOnly:False
PolygonComponent.startType.updates:None
PolygonComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
PolygonComponent.startType.__weakref__:None
PolygonComponent.startType.valType:str
PolygonComponent.startType.staticUpdater:None
PolygonComponent.startType.val:time (s)
PolygonComponent.startType.allowedTypes:[]
PolygonComponent.startType.hint:How do you want to define your start point?
PolygonComponent.startType.allowedUpdates:None
PolygonComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.startType.label:start type
PolygonComponent.lineColor.default:[1,1,1]
PolygonComponent.lineColor.categ:Advanced
PolygonComponent.lineColor.allowedVals:[]
PolygonComponent.lineColor.readOnly:False
PolygonComponent.lineColor.updates:constant
PolygonComponent.lineColor.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': '$[1,1,1]', 'hint': u'Line color of this shape; Right-click to bring up a color-picker (rgb only)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Line color', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
PolygonComponent.lineColor.__weakref__:None
PolygonComponent.lineColor.valType:str
PolygonComponent.lineColor.staticUpdater:None
PolygonComponent.lineColor.val:$[1,1,1]
PolygonComponent.lineColor.allowedTypes:[]
PolygonComponent.lineColor.hint:Line color of this shape; Right-click to bring up a color-picker (rgb only)
PolygonComponent.lineColor.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PolygonComponent.lineColor.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.lineColor.label:Line color
PolygonComponent.ori.default:0
PolygonComponent.ori.categ:Basic
PolygonComponent.ori.allowedVals:[]
PolygonComponent.ori.readOnly:False
PolygonComponent.ori.updates:constant
PolygonComponent.ori.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0, 'hint': u'Orientation of this stimulus (in deg)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Orientation', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
PolygonComponent.ori.__weakref__:None
PolygonComponent.ori.valType:code
PolygonComponent.ori.staticUpdater:None
PolygonComponent.ori.val:0
PolygonComponent.ori.allowedTypes:[]
PolygonComponent.ori.hint:Orientation of this stimulus (in deg)
PolygonComponent.ori.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PolygonComponent.ori.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.ori.label:Orientation
PolygonComponent.stopType.default:'duration (s)'
PolygonComponent.stopType.categ:Basic
PolygonComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
PolygonComponent.stopType.readOnly:False
PolygonComponent.stopType.updates:None
PolygonComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
PolygonComponent.stopType.__weakref__:None
PolygonComponent.stopType.valType:str
PolygonComponent.stopType.staticUpdater:None
PolygonComponent.stopType.val:duration (s)
PolygonComponent.stopType.allowedTypes:[]
PolygonComponent.stopType.hint:How do you want to define your end point?
PolygonComponent.stopType.allowedUpdates:None
PolygonComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.stopType.label:stop type
PolygonComponent.startVal.default:0.0
PolygonComponent.startVal.categ:Basic
PolygonComponent.startVal.allowedVals:[]
PolygonComponent.startVal.readOnly:False
PolygonComponent.startVal.updates:None
PolygonComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
PolygonComponent.startVal.__weakref__:None
PolygonComponent.startVal.valType:code
PolygonComponent.startVal.staticUpdater:None
PolygonComponent.startVal.val:0.0
PolygonComponent.startVal.allowedTypes:[]
PolygonComponent.startVal.hint:When does the component start?
PolygonComponent.startVal.allowedUpdates:None
PolygonComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.startVal.label:Start
PolygonComponent.lineColorSpace.default:'rgb'
PolygonComponent.lineColorSpace.categ:Advanced
PolygonComponent.lineColorSpace.allowedVals:['rgb', 'dkl', 'lms', 'hsv']
PolygonComponent.lineColorSpace.readOnly:False
PolygonComponent.lineColorSpace.updates:constant
PolygonComponent.lineColorSpace.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 'rgb', 'hint': u'Choice of color space for the fill color (rgb, dkl, lms, hsv)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['rgb', 'dkl', 'lms', 'hsv'], 'label': u'Line color-space', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
PolygonComponent.lineColorSpace.__weakref__:None
PolygonComponent.lineColorSpace.valType:str
PolygonComponent.lineColorSpace.staticUpdater:None
PolygonComponent.lineColorSpace.val:rgb
PolygonComponent.lineColorSpace.allowedTypes:[]
PolygonComponent.lineColorSpace.hint:Choice of color space for the fill color (rgb, dkl, lms, hsv)
PolygonComponent.lineColorSpace.allowedUpdates:None
PolygonComponent.lineColorSpace.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.lineColorSpace.label:Line color-space
PolygonComponent.nVertices.default:4
PolygonComponent.nVertices.categ:Basic
PolygonComponent.nVertices.allowedVals:[]
PolygonComponent.nVertices.readOnly:False
PolygonComponent.nVertices.updates:constant
PolygonComponent.nVertices.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 4, 'hint': u'How many vertices? 2=line, 3=triangle... (90 approximates a circle)', 'allowedTypes': [], 'allowedUpdates': ['constant'], 'allowedVals': [], 'label': u'Num. vertices', 'readOnly': False, 'updates': 'constant', 'valType': 'int'}
PolygonComponent.nVertices.__weakref__:None
PolygonComponent.nVertices.valType:int
PolygonComponent.nVertices.staticUpdater:None
PolygonComponent.nVertices.val:4
PolygonComponent.nVertices.allowedTypes:[]
PolygonComponent.nVertices.hint:How many vertices? 2=line, 3=triangle... (90 approximates a circle)
PolygonComponent.nVertices.allowedUpdates:['constant']
PolygonComponent.nVertices.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.nVertices.label:Num. vertices
PolygonComponent.size.default:(0.5, 0.5)
PolygonComponent.size.categ:Basic
PolygonComponent.size.allowedVals:[]
PolygonComponent.size.readOnly:False
PolygonComponent.size.updates:constant
PolygonComponent.size.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': (0.5, 0.5), 'hint': u'Size of this stimulus [w,h]. Note that for a line only the first value is used, for triangle and rect the [w,h] is as expected,\n but for higher-order polygons it represents the [w,h] of the ellipse that the polygon sits on!! ', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Size [w,h]', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
PolygonComponent.size.__weakref__:None
PolygonComponent.size.valType:code
PolygonComponent.size.staticUpdater:None
PolygonComponent.size.val:(0.5, 0.5)
PolygonComponent.size.allowedTypes:[]
PolygonComponent.size.hint:Size of this stimulus [w,h]. Note that for a line only the first value is used, for triangle and rect the [w,h] is as expected,
 but for higher-order polygons it represents the [w,h] of the ellipse that the polygon sits on!!
PolygonComponent.size.allowedUpdates:['constant', 'set every repeat', 'set every frame']
PolygonComponent.size.__class__:<class 'psychopy.app.builder.experiment.Param'>
PolygonComponent.size.label:Size [w,h]
RatingScaleComponent.order:['name', 'visualAnalogScale', 'categoryChoices', 'scaleDescription', 'low', 'high', 'labels', 'markerStart', 'size', 'pos', 'tickHeight']
RatingScaleComponent.labels.default:''
RatingScaleComponent.labels.categ:Basic
RatingScaleComponent.labels.allowedVals:[]
RatingScaleComponent.labels.readOnly:False
RatingScaleComponent.labels.updates:constant
RatingScaleComponent.labels.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'Labels for the ends of the scale, separated by commas', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Labels', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
RatingScaleComponent.labels.__weakref__:None
RatingScaleComponent.labels.valType:str
RatingScaleComponent.labels.staticUpdater:None
RatingScaleComponent.labels.val:
RatingScaleComponent.labels.allowedTypes:[]
RatingScaleComponent.labels.hint:Labels for the ends of the scale, separated by commas
RatingScaleComponent.labels.allowedUpdates:[]
RatingScaleComponent.labels.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.labels.label:Labels
RatingScaleComponent.pos.default:'0, -0.4'
RatingScaleComponent.pos.categ:Advanced
RatingScaleComponent.pos.allowedVals:[]
RatingScaleComponent.pos.readOnly:False
RatingScaleComponent.pos.updates:constant
RatingScaleComponent.pos.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': '0, -0.4', 'hint': u'x,y position on the screen', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Position [x,y]', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
RatingScaleComponent.pos.__weakref__:None
RatingScaleComponent.pos.valType:str
RatingScaleComponent.pos.staticUpdater:None
RatingScaleComponent.pos.val:0, -0.4
RatingScaleComponent.pos.allowedTypes:[]
RatingScaleComponent.pos.hint:x,y position on the screen
RatingScaleComponent.pos.allowedUpdates:[]
RatingScaleComponent.pos.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.pos.label:Position [x,y]
RatingScaleComponent.high.default:7
RatingScaleComponent.high.categ:Basic
RatingScaleComponent.high.allowedVals:[]
RatingScaleComponent.high.readOnly:False
RatingScaleComponent.high.updates:constant
RatingScaleComponent.high.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '7', 'hint': u'Highest rating (top end of the scale); not used for categories.', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Highest value', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
RatingScaleComponent.high.__weakref__:None
RatingScaleComponent.high.valType:code
RatingScaleComponent.high.staticUpdater:None
RatingScaleComponent.high.val:7
RatingScaleComponent.high.allowedTypes:[]
RatingScaleComponent.high.hint:Highest rating (top end of the scale); not used for categories.
RatingScaleComponent.high.allowedUpdates:[]
RatingScaleComponent.high.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.high.label:Highest value
RatingScaleComponent.storeRating.default:True
RatingScaleComponent.storeRating.categ:Advanced
RatingScaleComponent.storeRating.allowedVals:[]
RatingScaleComponent.storeRating.readOnly:False
RatingScaleComponent.storeRating.updates:constant
RatingScaleComponent.storeRating.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': True, 'hint': u'store the rating', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Store rating', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
RatingScaleComponent.storeRating.__weakref__:None
RatingScaleComponent.storeRating.valType:bool
RatingScaleComponent.storeRating.staticUpdater:None
RatingScaleComponent.storeRating.val:True
RatingScaleComponent.storeRating.allowedTypes:[]
RatingScaleComponent.storeRating.hint:store the rating
RatingScaleComponent.storeRating.allowedUpdates:[]
RatingScaleComponent.storeRating.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.storeRating.label:Store rating
RatingScaleComponent.marker.default:'triangle'
RatingScaleComponent.marker.categ:Basic
RatingScaleComponent.marker.allowedVals:[]
RatingScaleComponent.marker.readOnly:False
RatingScaleComponent.marker.updates:constant
RatingScaleComponent.marker.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'triangle', 'hint': u'Style for the marker: triangle, circle, glow, slider, hover', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Marker type', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
RatingScaleComponent.marker.__weakref__:None
RatingScaleComponent.marker.valType:str
RatingScaleComponent.marker.staticUpdater:None
RatingScaleComponent.marker.val:triangle
RatingScaleComponent.marker.allowedTypes:[]
RatingScaleComponent.marker.hint:Style for the marker: triangle, circle, glow, slider, hover
RatingScaleComponent.marker.allowedUpdates:[]
RatingScaleComponent.marker.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.marker.label:Marker type
RatingScaleComponent.startVal.default:0.0
RatingScaleComponent.startVal.categ:Basic
RatingScaleComponent.startVal.allowedVals:[]
RatingScaleComponent.startVal.readOnly:False
RatingScaleComponent.startVal.updates:None
RatingScaleComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '0.0', 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
RatingScaleComponent.startVal.__weakref__:None
RatingScaleComponent.startVal.valType:code
RatingScaleComponent.startVal.staticUpdater:None
RatingScaleComponent.startVal.val:0.0
RatingScaleComponent.startVal.allowedTypes:[]
RatingScaleComponent.startVal.hint:When does the component start?
RatingScaleComponent.startVal.allowedUpdates:None
RatingScaleComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.startVal.label:Start
RatingScaleComponent.markerStart.default:''
RatingScaleComponent.markerStart.categ:Basic
RatingScaleComponent.markerStart.allowedVals:[]
RatingScaleComponent.markerStart.readOnly:False
RatingScaleComponent.markerStart.updates:constant
RatingScaleComponent.markerStart.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'initial position for the marker', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Marker start', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
RatingScaleComponent.markerStart.__weakref__:None
RatingScaleComponent.markerStart.valType:str
RatingScaleComponent.markerStart.staticUpdater:None
RatingScaleComponent.markerStart.val:
RatingScaleComponent.markerStart.allowedTypes:[]
RatingScaleComponent.markerStart.hint:initial position for the marker
RatingScaleComponent.markerStart.allowedUpdates:[]
RatingScaleComponent.markerStart.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.markerStart.label:Marker start
RatingScaleComponent.disappear.default:False
RatingScaleComponent.disappear.categ:Advanced
RatingScaleComponent.disappear.allowedVals:[]
RatingScaleComponent.disappear.readOnly:False
RatingScaleComponent.disappear.updates:constant
RatingScaleComponent.disappear.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': False, 'hint': u'Hide the scale when a rating has been accepted; False to remain on-screen', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Disappear', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
RatingScaleComponent.disappear.__weakref__:None
RatingScaleComponent.disappear.valType:bool
RatingScaleComponent.disappear.staticUpdater:None
RatingScaleComponent.disappear.val:False
RatingScaleComponent.disappear.allowedTypes:[]
RatingScaleComponent.disappear.hint:Hide the scale when a rating has been accepted; False to remain on-screen
RatingScaleComponent.disappear.allowedUpdates:[]
RatingScaleComponent.disappear.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.disappear.label:Disappear
RatingScaleComponent.size.default:1.0
RatingScaleComponent.size.categ:Advanced
RatingScaleComponent.size.allowedVals:[]
RatingScaleComponent.size.readOnly:False
RatingScaleComponent.size.updates:constant
RatingScaleComponent.size.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': '1.0', 'hint': u'Relative size on the screen; size > 1 is larger than default; size < 1 is smaller', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Size', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
RatingScaleComponent.size.__weakref__:None
RatingScaleComponent.size.valType:code
RatingScaleComponent.size.staticUpdater:None
RatingScaleComponent.size.val:1.0
RatingScaleComponent.size.allowedTypes:[]
RatingScaleComponent.size.hint:Relative size on the screen; size > 1 is larger than default; size < 1 is smaller
RatingScaleComponent.size.allowedUpdates:[]
RatingScaleComponent.size.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.size.label:Size
RatingScaleComponent.tickHeight.default:''
RatingScaleComponent.tickHeight.categ:Advanced
RatingScaleComponent.tickHeight.allowedVals:[]
RatingScaleComponent.tickHeight.readOnly:False
RatingScaleComponent.tickHeight.updates:constant
RatingScaleComponent.tickHeight.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': '', 'hint': u'height of tick marks (1 is upward, 0 is hidden, -1 is downward)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Tick height', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
RatingScaleComponent.tickHeight.__weakref__:None
RatingScaleComponent.tickHeight.valType:str
RatingScaleComponent.tickHeight.staticUpdater:None
RatingScaleComponent.tickHeight.val:
RatingScaleComponent.tickHeight.allowedTypes:[]
RatingScaleComponent.tickHeight.hint:height of tick marks (1 is upward, 0 is hidden, -1 is downward)
RatingScaleComponent.tickHeight.allowedUpdates:[]
RatingScaleComponent.tickHeight.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.tickHeight.label:Tick height
RatingScaleComponent.showAccept.default:True
RatingScaleComponent.showAccept.categ:Advanced
RatingScaleComponent.showAccept.allowedVals:[]
RatingScaleComponent.showAccept.readOnly:False
RatingScaleComponent.showAccept.updates:constant
RatingScaleComponent.showAccept.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': True, 'hint': u'Should the accept button by visible?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Show accept', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
RatingScaleComponent.showAccept.__weakref__:None
RatingScaleComponent.showAccept.valType:bool
RatingScaleComponent.showAccept.staticUpdater:None
RatingScaleComponent.showAccept.val:True
RatingScaleComponent.showAccept.allowedTypes:[]
RatingScaleComponent.showAccept.hint:Should the accept button by visible?
RatingScaleComponent.showAccept.allowedUpdates:[]
RatingScaleComponent.showAccept.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.showAccept.label:Show accept
RatingScaleComponent.storeRatingTime.default:True
RatingScaleComponent.storeRatingTime.categ:Advanced
RatingScaleComponent.storeRatingTime.allowedVals:[]
RatingScaleComponent.storeRatingTime.readOnly:False
RatingScaleComponent.storeRatingTime.updates:constant
RatingScaleComponent.storeRatingTime.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': True, 'hint': u'store the time taken to make the choice (in seconds)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Store rating time', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
RatingScaleComponent.storeRatingTime.__weakref__:None
RatingScaleComponent.storeRatingTime.valType:bool
RatingScaleComponent.storeRatingTime.staticUpdater:None
RatingScaleComponent.storeRatingTime.val:True
RatingScaleComponent.storeRatingTime.allowedTypes:[]
RatingScaleComponent.storeRatingTime.hint:store the time taken to make the choice (in seconds)
RatingScaleComponent.storeRatingTime.allowedUpdates:[]
RatingScaleComponent.storeRatingTime.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.storeRatingTime.label:Store rating time
RatingScaleComponent.forceEndRoutine.default:True
RatingScaleComponent.forceEndRoutine.categ:Advanced
RatingScaleComponent.forceEndRoutine.allowedVals:[]
RatingScaleComponent.forceEndRoutine.readOnly:False
RatingScaleComponent.forceEndRoutine.updates:constant
RatingScaleComponent.forceEndRoutine.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': True, 'hint': u'Should accepting a rating cause the end of the routine (e.g. trial)?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Force end of Routine', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
RatingScaleComponent.forceEndRoutine.__weakref__:None
RatingScaleComponent.forceEndRoutine.valType:bool
RatingScaleComponent.forceEndRoutine.staticUpdater:None
RatingScaleComponent.forceEndRoutine.val:True
RatingScaleComponent.forceEndRoutine.allowedTypes:[]
RatingScaleComponent.forceEndRoutine.hint:Should accepting a rating cause the end of the routine (e.g. trial)?
RatingScaleComponent.forceEndRoutine.allowedUpdates:[]
RatingScaleComponent.forceEndRoutine.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.forceEndRoutine.label:Force end of Routine
RatingScaleComponent.low.default:1
RatingScaleComponent.low.categ:Basic
RatingScaleComponent.low.allowedVals:[]
RatingScaleComponent.low.readOnly:False
RatingScaleComponent.low.updates:constant
RatingScaleComponent.low.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '1', 'hint': u'Lowest rating (low end of the scale); not used for categories.', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Lowest value', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
RatingScaleComponent.low.__weakref__:None
RatingScaleComponent.low.valType:code
RatingScaleComponent.low.staticUpdater:None
RatingScaleComponent.low.val:1
RatingScaleComponent.low.allowedTypes:[]
RatingScaleComponent.low.hint:Lowest rating (low end of the scale); not used for categories.
RatingScaleComponent.low.allowedUpdates:[]
RatingScaleComponent.low.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.low.label:Lowest value
RatingScaleComponent.durationEstim.default:
RatingScaleComponent.durationEstim.categ:Basic
RatingScaleComponent.durationEstim.allowedVals:[]
RatingScaleComponent.durationEstim.readOnly:False
RatingScaleComponent.durationEstim.updates:None
RatingScaleComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
RatingScaleComponent.durationEstim.__weakref__:None
RatingScaleComponent.durationEstim.valType:code
RatingScaleComponent.durationEstim.staticUpdater:None
RatingScaleComponent.durationEstim.val:
RatingScaleComponent.durationEstim.allowedTypes:[]
RatingScaleComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
RatingScaleComponent.durationEstim.allowedUpdates:None
RatingScaleComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.durationEstim.label:Expected duration (s)
RatingScaleComponent.stopVal.default:
RatingScaleComponent.stopVal.categ:Basic
RatingScaleComponent.stopVal.allowedVals:[]
RatingScaleComponent.stopVal.readOnly:False
RatingScaleComponent.stopVal.updates:constant
RatingScaleComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
RatingScaleComponent.stopVal.__weakref__:None
RatingScaleComponent.stopVal.valType:code
RatingScaleComponent.stopVal.staticUpdater:None
RatingScaleComponent.stopVal.val:
RatingScaleComponent.stopVal.allowedTypes:[]
RatingScaleComponent.stopVal.hint:When does the component end? (blank is endless)
RatingScaleComponent.stopVal.allowedUpdates:[]
RatingScaleComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.stopVal.label:Stop
RatingScaleComponent.visualAnalogScale.default:False
RatingScaleComponent.visualAnalogScale.categ:Basic
RatingScaleComponent.visualAnalogScale.allowedVals:[]
RatingScaleComponent.visualAnalogScale.readOnly:False
RatingScaleComponent.visualAnalogScale.updates:constant
RatingScaleComponent.visualAnalogScale.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': False, 'hint': u'Show a continuous visual analog scale; returns 0.00 to 1.00; takes precedence over numeric scale or categorical choices', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Visual analog scale', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
RatingScaleComponent.visualAnalogScale.__weakref__:None
RatingScaleComponent.visualAnalogScale.valType:bool
RatingScaleComponent.visualAnalogScale.staticUpdater:None
RatingScaleComponent.visualAnalogScale.val:False
RatingScaleComponent.visualAnalogScale.allowedTypes:[]
RatingScaleComponent.visualAnalogScale.hint:Show a continuous visual analog scale; returns 0.00 to 1.00; takes precedence over numeric scale or categorical choices
RatingScaleComponent.visualAnalogScale.allowedUpdates:[]
RatingScaleComponent.visualAnalogScale.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.visualAnalogScale.label:Visual analog scale
RatingScaleComponent.startEstim.default:
RatingScaleComponent.startEstim.categ:Basic
RatingScaleComponent.startEstim.allowedVals:[]
RatingScaleComponent.startEstim.readOnly:False
RatingScaleComponent.startEstim.updates:None
RatingScaleComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
RatingScaleComponent.startEstim.__weakref__:None
RatingScaleComponent.startEstim.valType:code
RatingScaleComponent.startEstim.staticUpdater:None
RatingScaleComponent.startEstim.val:
RatingScaleComponent.startEstim.allowedTypes:[]
RatingScaleComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
RatingScaleComponent.startEstim.allowedUpdates:None
RatingScaleComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.startEstim.label:Expected start (s)
RatingScaleComponent.startType.default:'time (s)'
RatingScaleComponent.startType.categ:Basic
RatingScaleComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
RatingScaleComponent.startType.readOnly:False
RatingScaleComponent.startType.updates:None
RatingScaleComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
RatingScaleComponent.startType.__weakref__:None
RatingScaleComponent.startType.valType:str
RatingScaleComponent.startType.staticUpdater:None
RatingScaleComponent.startType.val:time (s)
RatingScaleComponent.startType.allowedTypes:[]
RatingScaleComponent.startType.hint:How do you want to define your start point?
RatingScaleComponent.startType.allowedUpdates:None
RatingScaleComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.startType.label:start type
RatingScaleComponent.stopType.default:'condition'
RatingScaleComponent.stopType.categ:Basic
RatingScaleComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
RatingScaleComponent.stopType.readOnly:False
RatingScaleComponent.stopType.updates:None
RatingScaleComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'condition', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
RatingScaleComponent.stopType.__weakref__:None
RatingScaleComponent.stopType.valType:str
RatingScaleComponent.stopType.staticUpdater:None
RatingScaleComponent.stopType.val:condition
RatingScaleComponent.stopType.allowedTypes:[]
RatingScaleComponent.stopType.hint:How do you want to define your end point?
RatingScaleComponent.stopType.allowedUpdates:None
RatingScaleComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.stopType.label:stop type
RatingScaleComponent.scaleDescription.default:''
RatingScaleComponent.scaleDescription.categ:Basic
RatingScaleComponent.scaleDescription.allowedVals:[]
RatingScaleComponent.scaleDescription.readOnly:False
RatingScaleComponent.scaleDescription.updates:constant
RatingScaleComponent.scaleDescription.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'Brief instructions, such as a description of the scale numbers as seen by the subject.', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Scale description', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
RatingScaleComponent.scaleDescription.__weakref__:None
RatingScaleComponent.scaleDescription.valType:str
RatingScaleComponent.scaleDescription.staticUpdater:None
RatingScaleComponent.scaleDescription.val:
RatingScaleComponent.scaleDescription.allowedTypes:[]
RatingScaleComponent.scaleDescription.hint:Brief instructions, such as a description of the scale numbers as seen by the subject.
RatingScaleComponent.scaleDescription.allowedUpdates:[]
RatingScaleComponent.scaleDescription.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.scaleDescription.label:Scale description
RatingScaleComponent.storeHistory.default:False
RatingScaleComponent.storeHistory.categ:Advanced
RatingScaleComponent.storeHistory.allowedVals:[]
RatingScaleComponent.storeHistory.readOnly:False
RatingScaleComponent.storeHistory.updates:constant
RatingScaleComponent.storeHistory.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': False, 'hint': u'store the history of (selection, time)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Store history', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
RatingScaleComponent.storeHistory.__weakref__:None
RatingScaleComponent.storeHistory.valType:bool
RatingScaleComponent.storeHistory.staticUpdater:None
RatingScaleComponent.storeHistory.val:False
RatingScaleComponent.storeHistory.allowedTypes:[]
RatingScaleComponent.storeHistory.hint:store the history of (selection, time)
RatingScaleComponent.storeHistory.allowedUpdates:[]
RatingScaleComponent.storeHistory.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.storeHistory.label:Store history
RatingScaleComponent.categoryChoices.default:''
RatingScaleComponent.categoryChoices.categ:Basic
RatingScaleComponent.categoryChoices.allowedVals:[]
RatingScaleComponent.categoryChoices.readOnly:False
RatingScaleComponent.categoryChoices.updates:constant
RatingScaleComponent.categoryChoices.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'A list of categories (non-numeric alternatives) to present, space or comma-separated; these take precedence over a numeric scale', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Category choices', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
RatingScaleComponent.categoryChoices.__weakref__:None
RatingScaleComponent.categoryChoices.valType:str
RatingScaleComponent.categoryChoices.staticUpdater:None
RatingScaleComponent.categoryChoices.val:
RatingScaleComponent.categoryChoices.allowedTypes:[]
RatingScaleComponent.categoryChoices.hint:A list of categories (non-numeric alternatives) to present, space or comma-separated; these take precedence over a numeric scale
RatingScaleComponent.categoryChoices.allowedUpdates:[]
RatingScaleComponent.categoryChoices.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.categoryChoices.label:Category choices
RatingScaleComponent.customize_everything.default:''
RatingScaleComponent.customize_everything.categ:Custom
RatingScaleComponent.customize_everything.allowedVals:[]
RatingScaleComponent.customize_everything.readOnly:False
RatingScaleComponent.customize_everything.updates:constant
RatingScaleComponent.customize_everything.__dict__:{'staticUpdater': None, 'categ': 'Custom', 'val': '', 'hint': u'Use this text to create the rating scale as you would in a code component; overrides all dialog settings except time parameters, forceEndRoutine, storeRatingTime, storeRating', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Customize everything :', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
RatingScaleComponent.customize_everything.__weakref__:None
RatingScaleComponent.customize_everything.valType:str
RatingScaleComponent.customize_everything.staticUpdater:None
RatingScaleComponent.customize_everything.val:
RatingScaleComponent.customize_everything.allowedTypes:[]
RatingScaleComponent.customize_everything.hint:Use this text to create the rating scale as you would in a code component; overrides all dialog settings except time parameters, forceEndRoutine, storeRatingTime, storeRating
RatingScaleComponent.customize_everything.allowedUpdates:[]
RatingScaleComponent.customize_everything.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.customize_everything.label:Customize everything :
RatingScaleComponent.name.default:rating
RatingScaleComponent.name.categ:Basic
RatingScaleComponent.name.allowedVals:[]
RatingScaleComponent.name.readOnly:False
RatingScaleComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'rating', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
RatingScaleComponent.name.__weakref__:None
RatingScaleComponent.name.valType:code
RatingScaleComponent.name.staticUpdater:None
RatingScaleComponent.name.val:rating
RatingScaleComponent.name.allowedTypes:[]
RatingScaleComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
RatingScaleComponent.name.allowedUpdates:None
RatingScaleComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.name.label:Name
RatingScaleComponent.singleClick.default:False
RatingScaleComponent.singleClick.categ:Advanced
RatingScaleComponent.singleClick.allowedVals:[]
RatingScaleComponent.singleClick.readOnly:False
RatingScaleComponent.singleClick.updates:constant
RatingScaleComponent.singleClick.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': False, 'hint': u"Should clicking the line accept that rating (without needing to confirm via 'accept')?", 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Single click', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
RatingScaleComponent.singleClick.__weakref__:None
RatingScaleComponent.singleClick.valType:bool
RatingScaleComponent.singleClick.staticUpdater:None
RatingScaleComponent.singleClick.val:False
RatingScaleComponent.singleClick.allowedTypes:[]
RatingScaleComponent.singleClick.hint:Should clicking the line accept that rating (without needing to confirm via 'accept')?
RatingScaleComponent.singleClick.allowedUpdates:[]
RatingScaleComponent.singleClick.__class__:<class 'psychopy.app.builder.experiment.Param'>
RatingScaleComponent.singleClick.label:Single click
SettingsComponent.order:['expName', 'Show info dlg', 'Experiment info', 'Data filename', 'Save excel file', 'Save csv file', 'Save wide csv file', 'Save psydat file', 'Save log file', 'logging level', 'Monitor', 'Screen', 'Full-screen window', 'Window size (pixels)', 'color', 'colorSpace', 'Units']
SettingsComponent.Monitor.default:'testMonitor'
SettingsComponent.Monitor.categ:Screen
SettingsComponent.Monitor.allowedVals:[]
SettingsComponent.Monitor.readOnly:False
SettingsComponent.Monitor.updates:None
SettingsComponent.Monitor.__dict__:{'staticUpdater': None, 'categ': 'Screen', 'val': 'testMonitor', 'hint': u'Name of the monitor (from Monitor Center). Right-click to go there, then copy & paste a monitor name here.', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Monitor', 'readOnly': False, 'updates': None, 'valType': 'str'}
SettingsComponent.Monitor.__weakref__:None
SettingsComponent.Monitor.valType:str
SettingsComponent.Monitor.staticUpdater:None
SettingsComponent.Monitor.val:testMonitor
SettingsComponent.Monitor.allowedTypes:[]
SettingsComponent.Monitor.hint:Name of the monitor (from Monitor Center). Right-click to go there, then copy & paste a monitor name here.
SettingsComponent.Monitor.allowedUpdates:None
SettingsComponent.Monitor.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Monitor.label:Monitor
SettingsComponent.color.default:[0,0,0]
SettingsComponent.color.categ:Screen
SettingsComponent.color.allowedVals:[]
SettingsComponent.color.readOnly:False
SettingsComponent.color.updates:None
SettingsComponent.color.__dict__:{'staticUpdater': None, 'categ': 'Screen', 'val': '$[0,0,0]', 'hint': u'Color of the screen (e.g. black, $[1.0,1.0,1.0], $variable. Right-click to bring up a color-picker.)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Color', 'readOnly': False, 'updates': None, 'valType': 'str'}
SettingsComponent.color.__weakref__:None
SettingsComponent.color.valType:str
SettingsComponent.color.staticUpdater:None
SettingsComponent.color.val:$[0,0,0]
SettingsComponent.color.allowedTypes:[]
SettingsComponent.color.hint:Color of the screen (e.g. black, $[1.0,1.0,1.0], $variable. Right-click to bring up a color-picker.)
SettingsComponent.color.allowedUpdates:None
SettingsComponent.color.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.color.label:Color
SettingsComponent.colorSpace.default:'rgb'
SettingsComponent.colorSpace.categ:Screen
SettingsComponent.colorSpace.allowedVals:['rgb', 'dkl', 'lms', 'hsv']
SettingsComponent.colorSpace.readOnly:False
SettingsComponent.colorSpace.updates:None
SettingsComponent.colorSpace.__dict__:{'staticUpdater': None, 'categ': 'Screen', 'val': 'rgb', 'hint': u'Needed if color is defined numerically (see PsychoPy documentation on color spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['rgb', 'dkl', 'lms', 'hsv'], 'label': u'Color space', 'readOnly': False, 'updates': None, 'valType': 'str'}
SettingsComponent.colorSpace.__weakref__:None
SettingsComponent.colorSpace.valType:str
SettingsComponent.colorSpace.staticUpdater:None
SettingsComponent.colorSpace.val:rgb
SettingsComponent.colorSpace.allowedTypes:[]
SettingsComponent.colorSpace.hint:Needed if color is defined numerically (see PsychoPy documentation on color spaces)
SettingsComponent.colorSpace.allowedUpdates:None
SettingsComponent.colorSpace.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.colorSpace.label:Color space
SettingsComponent.Experiment info.default:{'participant':'', 'session':'001'}
SettingsComponent.Experiment info.categ:Basic
SettingsComponent.Experiment info.allowedVals:[]
SettingsComponent.Experiment info.readOnly:False
SettingsComponent.Experiment info.updates:None
SettingsComponent.Experiment info.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': "{'participant':'', 'session':'001'}", 'hint': u'The info to present in a dialog box. Right-click to check syntax and preview the dialog box.', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Experiment info', 'readOnly': False, 'updates': None, 'valType': 'code'}
SettingsComponent.Experiment info.__weakref__:None
SettingsComponent.Experiment info.valType:code
SettingsComponent.Experiment info.staticUpdater:None
SettingsComponent.Experiment info.val:{'participant':'', 'session':'001'}
SettingsComponent.Experiment info.allowedTypes:[]
SettingsComponent.Experiment info.hint:The info to present in a dialog box. Right-click to check syntax and preview the dialog box.
SettingsComponent.Experiment info.allowedUpdates:None
SettingsComponent.Experiment info.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Experiment info.label:Experiment info
SettingsComponent.JS libs.default:'packaged'
SettingsComponent.JS libs.categ:Online
SettingsComponent.JS libs.allowedVals:['packaged']
SettingsComponent.JS libs.readOnly:False
SettingsComponent.JS libs.updates:None
SettingsComponent.JS libs.__dict__:{'staticUpdater': None, 'categ': 'Online', 'val': 'packaged', 'hint': u'Should we package a copy of the JS libs or useremote copies (http:/www.psychopy.org/js)?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['packaged'], 'label': 'JS libs', 'readOnly': False, 'updates': None, 'valType': 'str'}
SettingsComponent.JS libs.__weakref__:None
SettingsComponent.JS libs.valType:str
SettingsComponent.JS libs.staticUpdater:None
SettingsComponent.JS libs.val:packaged
SettingsComponent.JS libs.allowedTypes:[]
SettingsComponent.JS libs.hint:Should we package a copy of the JS libs or useremote copies (http:/www.psychopy.org/js)?
SettingsComponent.JS libs.allowedUpdates:None
SettingsComponent.JS libs.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.JS libs.label:JS libs
SettingsComponent.Units.default:'use prefs'
SettingsComponent.Units.categ:Screen
SettingsComponent.Units.allowedVals:['use prefs', 'deg', 'pix', 'cm', 'norm', 'height', 'degFlatPos', 'degFlat']
SettingsComponent.Units.readOnly:False
SettingsComponent.Units.updates:None
SettingsComponent.Units.__dict__:{'staticUpdater': None, 'categ': 'Screen', 'val': 'use prefs', 'hint': u'Units to use for window/stimulus coordinates (e.g. cm, pix, deg)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['use prefs', 'deg', 'pix', 'cm', 'norm', 'height', 'degFlatPos', 'degFlat'], 'label': u'Units', 'readOnly': False, 'updates': None, 'valType': 'str'}
SettingsComponent.Units.__weakref__:None
SettingsComponent.Units.valType:str
SettingsComponent.Units.staticUpdater:None
SettingsComponent.Units.val:use prefs
SettingsComponent.Units.allowedTypes:[]
SettingsComponent.Units.hint:Units to use for window/stimulus coordinates (e.g. cm, pix, deg)
SettingsComponent.Units.allowedUpdates:None
SettingsComponent.Units.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Units.label:Units
SettingsComponent.Save excel file.default:False
SettingsComponent.Save excel file.categ:Data
SettingsComponent.Save excel file.allowedVals:[]
SettingsComponent.Save excel file.readOnly:False
SettingsComponent.Save excel file.updates:None
SettingsComponent.Save excel file.__dict__:{'staticUpdater': None, 'categ': 'Data', 'val': False, 'hint': u'Save data from loops in Excel (.xlsx) format', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Save excel file', 'readOnly': False, 'updates': None, 'valType': 'bool'}
SettingsComponent.Save excel file.__weakref__:None
SettingsComponent.Save excel file.valType:bool
SettingsComponent.Save excel file.staticUpdater:None
SettingsComponent.Save excel file.val:False
SettingsComponent.Save excel file.allowedTypes:[]
SettingsComponent.Save excel file.hint:Save data from loops in Excel (.xlsx) format
SettingsComponent.Save excel file.allowedUpdates:None
SettingsComponent.Save excel file.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Save excel file.label:Save excel file
SettingsComponent.Enable Escape.default:True
SettingsComponent.Enable Escape.categ:Basic
SettingsComponent.Enable Escape.allowedVals:[]
SettingsComponent.Enable Escape.readOnly:False
SettingsComponent.Enable Escape.updates:None
SettingsComponent.Enable Escape.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': True, 'hint': u'Enable the <esc> key, to allow subjects to quit / break out of the experiment', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Enable Escape key', 'readOnly': False, 'updates': None, 'valType': 'bool'}
SettingsComponent.Enable Escape.__weakref__:None
SettingsComponent.Enable Escape.valType:bool
SettingsComponent.Enable Escape.staticUpdater:None
SettingsComponent.Enable Escape.val:True
SettingsComponent.Enable Escape.allowedTypes:[]
SettingsComponent.Enable Escape.hint:Enable the <esc> key, to allow subjects to quit / break out of the experiment
SettingsComponent.Enable Escape.allowedUpdates:None
SettingsComponent.Enable Escape.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Enable Escape.label:Enable Escape key
SettingsComponent.Save psydat file.default:True
SettingsComponent.Save psydat file.categ:Data
SettingsComponent.Save psydat file.allowedVals:[True]
SettingsComponent.Save psydat file.readOnly:False
SettingsComponent.Save psydat file.updates:None
SettingsComponent.Save psydat file.__dict__:{'staticUpdater': None, 'categ': 'Data', 'val': True, 'hint': u'Save data from loops in psydat format. This is useful for python programmers to generate analysis scripts.', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [True], 'label': u'Save psydat file', 'readOnly': False, 'updates': None, 'valType': 'bool'}
SettingsComponent.Save psydat file.__weakref__:None
SettingsComponent.Save psydat file.valType:bool
SettingsComponent.Save psydat file.staticUpdater:None
SettingsComponent.Save psydat file.val:True
SettingsComponent.Save psydat file.allowedTypes:[]
SettingsComponent.Save psydat file.hint:Save data from loops in psydat format. This is useful for python programmers to generate analysis scripts.
SettingsComponent.Save psydat file.allowedUpdates:None
SettingsComponent.Save psydat file.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Save psydat file.label:Save psydat file
SettingsComponent.Window size (pixels).default:(1024, 768)
SettingsComponent.Window size (pixels).categ:Screen
SettingsComponent.Window size (pixels).allowedVals:[]
SettingsComponent.Window size (pixels).readOnly:False
SettingsComponent.Window size (pixels).updates:None
SettingsComponent.Window size (pixels).__dict__:{'staticUpdater': None, 'categ': 'Screen', 'val': (1024, 768), 'hint': u'Size of window (if not fullscreen)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Window size (pixels)', 'readOnly': False, 'updates': None, 'valType': 'code'}
SettingsComponent.Window size (pixels).__weakref__:None
SettingsComponent.Window size (pixels).valType:code
SettingsComponent.Window size (pixels).staticUpdater:None
SettingsComponent.Window size (pixels).val:(1024, 768)
SettingsComponent.Window size (pixels).allowedTypes:[]
SettingsComponent.Window size (pixels).hint:Size of window (if not fullscreen)
SettingsComponent.Window size (pixels).allowedUpdates:None
SettingsComponent.Window size (pixels).__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Window size (pixels).label:Window size (pixels)
SettingsComponent.Full-screen window.default:True
SettingsComponent.Full-screen window.categ:Screen
SettingsComponent.Full-screen window.allowedVals:[]
SettingsComponent.Full-screen window.readOnly:False
SettingsComponent.Full-screen window.updates:None
SettingsComponent.Full-screen window.__dict__:{'staticUpdater': None, 'categ': 'Screen', 'val': True, 'hint': u'Run the experiment full-screen (recommended)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Full-screen window', 'readOnly': False, 'updates': None, 'valType': 'bool'}
SettingsComponent.Full-screen window.__weakref__:None
SettingsComponent.Full-screen window.valType:bool
SettingsComponent.Full-screen window.staticUpdater:None
SettingsComponent.Full-screen window.val:True
SettingsComponent.Full-screen window.allowedTypes:[]
SettingsComponent.Full-screen window.hint:Run the experiment full-screen (recommended)
SettingsComponent.Full-screen window.allowedUpdates:None
SettingsComponent.Full-screen window.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Full-screen window.label:Full-screen window
SettingsComponent.blendMode.default:'avg'
SettingsComponent.blendMode.categ:Screen
SettingsComponent.blendMode.allowedVals:['add', 'avg']
SettingsComponent.blendMode.readOnly:False
SettingsComponent.blendMode.updates:None
SettingsComponent.blendMode.__dict__:{'staticUpdater': None, 'categ': 'Screen', 'val': 'avg', 'hint': u'Should new stimuli be added or averaged with the stimuli that have been drawn already', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['add', 'avg'], 'label': u'Blend mode', 'readOnly': False, 'updates': None, 'valType': 'str'}
SettingsComponent.blendMode.__weakref__:None
SettingsComponent.blendMode.valType:str
SettingsComponent.blendMode.staticUpdater:None
SettingsComponent.blendMode.val:avg
SettingsComponent.blendMode.allowedTypes:[]
SettingsComponent.blendMode.hint:Should new stimuli be added or averaged with the stimuli that have been drawn already
SettingsComponent.blendMode.allowedUpdates:None
SettingsComponent.blendMode.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.blendMode.label:Blend mode
SettingsComponent.Use version.default:''
SettingsComponent.Use version.categ:Basic
SettingsComponent.Use version.allowedVals:['latest', '1', '1.85', '', '1.85.1']
SettingsComponent.Use version.readOnly:False
SettingsComponent.Use version.updates:None
SettingsComponent.Use version.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'The version of PsychoPy to use when running the experiment.', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['latest', '1', '1.85', '', '1.85.1'], 'label': u'Use PsychoPy version', 'readOnly': False, 'updates': None, 'valType': 'str'}
SettingsComponent.Use version.__weakref__:None
SettingsComponent.Use version.valType:str
SettingsComponent.Use version.staticUpdater:None
SettingsComponent.Use version.val:
SettingsComponent.Use version.allowedTypes:[]
SettingsComponent.Use version.hint:The version of PsychoPy to use when running the experiment.
SettingsComponent.Use version.allowedUpdates:None
SettingsComponent.Use version.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Use version.label:Use PsychoPy version
SettingsComponent.HTML path.default:'html'
SettingsComponent.HTML path.categ:Online
SettingsComponent.HTML path.allowedVals:[]
SettingsComponent.HTML path.readOnly:False
SettingsComponent.HTML path.updates:None
SettingsComponent.HTML path.__dict__:{'staticUpdater': None, 'categ': 'Online', 'val': 'html', 'hint': u'Place the HTML files will be saved locally ', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': 'Output path', 'readOnly': False, 'updates': None, 'valType': 'str'}
SettingsComponent.HTML path.__weakref__:None
SettingsComponent.HTML path.valType:str
SettingsComponent.HTML path.staticUpdater:None
SettingsComponent.HTML path.val:html
SettingsComponent.HTML path.allowedTypes:[]
SettingsComponent.HTML path.hint:Place the HTML files will be saved locally
SettingsComponent.HTML path.allowedUpdates:None
SettingsComponent.HTML path.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.HTML path.label:Output path
SettingsComponent.Save csv file.default:False
SettingsComponent.Save csv file.categ:Data
SettingsComponent.Save csv file.allowedVals:[]
SettingsComponent.Save csv file.readOnly:False
SettingsComponent.Save csv file.updates:None
SettingsComponent.Save csv file.__dict__:{'staticUpdater': None, 'categ': 'Data', 'val': False, 'hint': u'Save data from loops in comma-separated-value (.csv) format for maximum portability', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Save csv file (summaries)', 'readOnly': False, 'updates': None, 'valType': 'bool'}
SettingsComponent.Save csv file.__weakref__:None
SettingsComponent.Save csv file.valType:bool
SettingsComponent.Save csv file.staticUpdater:None
SettingsComponent.Save csv file.val:False
SettingsComponent.Save csv file.allowedTypes:[]
SettingsComponent.Save csv file.hint:Save data from loops in comma-separated-value (.csv) format for maximum portability
SettingsComponent.Save csv file.allowedUpdates:None
SettingsComponent.Save csv file.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Save csv file.label:Save csv file (summaries)
SettingsComponent.OSF Project ID.default:''
SettingsComponent.OSF Project ID.categ:Online
SettingsComponent.OSF Project ID.allowedVals:['']
SettingsComponent.OSF Project ID.readOnly:False
SettingsComponent.OSF Project ID.updates:None
SettingsComponent.OSF Project ID.__dict__:{'staticUpdater': None, 'categ': 'Online', 'val': '', 'hint': u'The ID of this project (e.g. 5bqpc)', 'allowedTypes': [], 'allowedUpdates': None, 'label': 'OSF Project ID', 'readOnly': False, 'updates': None, 'valType': 'str'}
SettingsComponent.OSF Project ID.__weakref__:None
SettingsComponent.OSF Project ID.valType:str
SettingsComponent.OSF Project ID.staticUpdater:None
SettingsComponent.OSF Project ID.val:
SettingsComponent.OSF Project ID.allowedTypes:[]
SettingsComponent.OSF Project ID.hint:The ID of this project (e.g. 5bqpc)
SettingsComponent.OSF Project ID.allowedUpdates:None
SettingsComponent.OSF Project ID.__class__:<class 'psychopy.app.builder.components.settings.ProjIDParam'>
SettingsComponent.OSF Project ID.label:OSF Project ID
SettingsComponent.Save log file.default:True
SettingsComponent.Save log file.categ:Data
SettingsComponent.Save log file.allowedVals:[]
SettingsComponent.Save log file.readOnly:False
SettingsComponent.Save log file.updates:None
SettingsComponent.Save log file.__dict__:{'staticUpdater': None, 'categ': 'Data', 'val': True, 'hint': u'Save a detailed log (more detailed than the excel/csv files) of the entire experiment', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Save log file', 'readOnly': False, 'updates': None, 'valType': 'bool'}
SettingsComponent.Save log file.__weakref__:None
SettingsComponent.Save log file.valType:bool
SettingsComponent.Save log file.staticUpdater:None
SettingsComponent.Save log file.val:True
SettingsComponent.Save log file.allowedTypes:[]
SettingsComponent.Save log file.hint:Save a detailed log (more detailed than the excel/csv files) of the entire experiment
SettingsComponent.Save log file.allowedUpdates:None
SettingsComponent.Save log file.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Save log file.label:Save log file
SettingsComponent.Save wide csv file.default:True
SettingsComponent.Save wide csv file.categ:Data
SettingsComponent.Save wide csv file.allowedVals:[]
SettingsComponent.Save wide csv file.readOnly:False
SettingsComponent.Save wide csv file.updates:None
SettingsComponent.Save wide csv file.__dict__:{'staticUpdater': None, 'categ': 'Data', 'val': True, 'hint': u'Save data from loops in comma-separated-value (.csv) format for maximum portability', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Save csv file (trial-by-trial)', 'readOnly': False, 'updates': None, 'valType': 'bool'}
SettingsComponent.Save wide csv file.__weakref__:None
SettingsComponent.Save wide csv file.valType:bool
SettingsComponent.Save wide csv file.staticUpdater:None
SettingsComponent.Save wide csv file.val:True
SettingsComponent.Save wide csv file.allowedTypes:[]
SettingsComponent.Save wide csv file.hint:Save data from loops in comma-separated-value (.csv) format for maximum portability
SettingsComponent.Save wide csv file.allowedUpdates:None
SettingsComponent.Save wide csv file.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Save wide csv file.label:Save csv file (trial-by-trial)
SettingsComponent.Show mouse.default:False
SettingsComponent.Show mouse.categ:Screen
SettingsComponent.Show mouse.allowedVals:[]
SettingsComponent.Show mouse.readOnly:False
SettingsComponent.Show mouse.updates:None
SettingsComponent.Show mouse.__dict__:{'staticUpdater': None, 'categ': 'Screen', 'val': False, 'hint': u'Should the mouse be visible on screen?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Show mouse', 'readOnly': False, 'updates': None, 'valType': 'bool'}
SettingsComponent.Show mouse.__weakref__:None
SettingsComponent.Show mouse.valType:bool
SettingsComponent.Show mouse.staticUpdater:None
SettingsComponent.Show mouse.val:False
SettingsComponent.Show mouse.allowedTypes:[]
SettingsComponent.Show mouse.hint:Should the mouse be visible on screen?
SettingsComponent.Show mouse.allowedUpdates:None
SettingsComponent.Show mouse.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Show mouse.label:Show mouse
SettingsComponent.Data filename.default:u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])
SettingsComponent.Data filename.categ:Data
SettingsComponent.Data filename.allowedVals:[]
SettingsComponent.Data filename.readOnly:False
SettingsComponent.Data filename.updates:None
SettingsComponent.Data filename.__dict__:{'staticUpdater': None, 'categ': 'Data', 'val': u"u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])", 'hint': u"Code to create your custom file name base. Don't give a file extension - this will be added.", 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Data filename', 'readOnly': False, 'updates': None, 'valType': 'code'}
SettingsComponent.Data filename.__weakref__:None
SettingsComponent.Data filename.valType:code
SettingsComponent.Data filename.staticUpdater:None
SettingsComponent.Data filename.val:u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])
SettingsComponent.Data filename.allowedTypes:[]
SettingsComponent.Data filename.hint:Code to create your custom file name base. Don't give a file extension - this will be added.
SettingsComponent.Data filename.allowedUpdates:None
SettingsComponent.Data filename.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Data filename.label:Data filename
SettingsComponent.Show info dlg.default:True
SettingsComponent.Show info dlg.categ:Basic
SettingsComponent.Show info dlg.allowedVals:[]
SettingsComponent.Show info dlg.readOnly:False
SettingsComponent.Show info dlg.updates:None
SettingsComponent.Show info dlg.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': True, 'hint': u'Start the experiment with a dialog to set info (e.g.participant or condition)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Show info dialog', 'readOnly': False, 'updates': None, 'valType': 'bool'}
SettingsComponent.Show info dlg.__weakref__:None
SettingsComponent.Show info dlg.valType:bool
SettingsComponent.Show info dlg.staticUpdater:None
SettingsComponent.Show info dlg.val:True
SettingsComponent.Show info dlg.allowedTypes:[]
SettingsComponent.Show info dlg.hint:Start the experiment with a dialog to set info (e.g.participant or condition)
SettingsComponent.Show info dlg.allowedUpdates:None
SettingsComponent.Show info dlg.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Show info dlg.label:Show info dialog
SettingsComponent.expName.default:''
SettingsComponent.expName.categ:Basic
SettingsComponent.expName.allowedVals:[]
SettingsComponent.expName.readOnly:False
SettingsComponent.expName.updates:None
SettingsComponent.expName.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'Name of the entire experiment (taken by default from the filename on save)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Experiment name', 'readOnly': False, 'updates': None, 'valType': 'str'}
SettingsComponent.expName.__weakref__:None
SettingsComponent.expName.valType:str
SettingsComponent.expName.staticUpdater:None
SettingsComponent.expName.val:
SettingsComponent.expName.allowedTypes:[]
SettingsComponent.expName.hint:Name of the entire experiment (taken by default from the filename on save)
SettingsComponent.expName.allowedUpdates:None
SettingsComponent.expName.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.expName.label:Experiment name
SettingsComponent.logging level.default:exp
SettingsComponent.logging level.categ:Data
SettingsComponent.logging level.allowedVals:['error', 'warning', 'data', 'exp', 'info', 'debug']
SettingsComponent.logging level.readOnly:False
SettingsComponent.logging level.updates:None
SettingsComponent.logging level.__dict__:{'staticUpdater': None, 'categ': 'Data', 'val': 'exp', 'hint': u"How much output do you want in the log files? ('error' is fewest messages, 'debug' is most)", 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['error', 'warning', 'data', 'exp', 'info', 'debug'], 'label': u'Logging level', 'readOnly': False, 'updates': None, 'valType': 'code'}
SettingsComponent.logging level.__weakref__:None
SettingsComponent.logging level.valType:code
SettingsComponent.logging level.staticUpdater:None
SettingsComponent.logging level.val:exp
SettingsComponent.logging level.allowedTypes:[]
SettingsComponent.logging level.hint:How much output do you want in the log files? ('error' is fewest messages, 'debug' is most)
SettingsComponent.logging level.allowedUpdates:None
SettingsComponent.logging level.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.logging level.label:Logging level
SettingsComponent.Screen.default:1.0
SettingsComponent.Screen.categ:Screen
SettingsComponent.Screen.allowedVals:[]
SettingsComponent.Screen.readOnly:False
SettingsComponent.Screen.updates:None
SettingsComponent.Screen.__dict__:{'staticUpdater': None, 'categ': 'Screen', 'val': 1, 'hint': u'Which physical screen to run on (1 or 2)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Screen', 'readOnly': False, 'updates': None, 'valType': 'num'}
SettingsComponent.Screen.__weakref__:None
SettingsComponent.Screen.valType:num
SettingsComponent.Screen.staticUpdater:None
SettingsComponent.Screen.val:1
SettingsComponent.Screen.allowedTypes:[]
SettingsComponent.Screen.hint:Which physical screen to run on (1 or 2)
SettingsComponent.Screen.allowedUpdates:None
SettingsComponent.Screen.__class__:<class 'psychopy.app.builder.experiment.Param'>
SettingsComponent.Screen.label:Screen
SoundComponent.order:['name']
SoundComponent.sound.default:'A'
SoundComponent.sound.categ:Basic
SoundComponent.sound.allowedVals:[]
SoundComponent.sound.readOnly:False
SoundComponent.sound.updates:constant
SoundComponent.sound.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'A', 'hint': u'A sound can be a note name (e.g. A or Bf), a number to specify Hz (e.g. 440) or a filename', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat'], 'allowedVals': [], 'label': u'Sound', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
SoundComponent.sound.__weakref__:None
SoundComponent.sound.valType:str
SoundComponent.sound.staticUpdater:None
SoundComponent.sound.val:A
SoundComponent.sound.allowedTypes:[]
SoundComponent.sound.hint:A sound can be a note name (e.g. A or Bf), a number to specify Hz (e.g. 440) or a filename
SoundComponent.sound.allowedUpdates:['constant', 'set every repeat']
SoundComponent.sound.__class__:<class 'psychopy.app.builder.experiment.Param'>
SoundComponent.sound.label:Sound
SoundComponent.volume.default:1
SoundComponent.volume.categ:Basic
SoundComponent.volume.allowedVals:[]
SoundComponent.volume.readOnly:False
SoundComponent.volume.updates:constant
SoundComponent.volume.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1, 'hint': u'The volume (in range 0 to 1)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Volume', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
SoundComponent.volume.__weakref__:None
SoundComponent.volume.valType:code
SoundComponent.volume.staticUpdater:None
SoundComponent.volume.val:1
SoundComponent.volume.allowedTypes:[]
SoundComponent.volume.hint:The volume (in range 0 to 1)
SoundComponent.volume.allowedUpdates:['constant', 'set every repeat', 'set every frame']
SoundComponent.volume.__class__:<class 'psychopy.app.builder.experiment.Param'>
SoundComponent.volume.label:Volume
SoundComponent.name.default:sound_1
SoundComponent.name.categ:Basic
SoundComponent.name.allowedVals:[]
SoundComponent.name.readOnly:False
SoundComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'sound_1', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
SoundComponent.name.__weakref__:None
SoundComponent.name.valType:code
SoundComponent.name.staticUpdater:None
SoundComponent.name.val:sound_1
SoundComponent.name.allowedTypes:[]
SoundComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
SoundComponent.name.allowedUpdates:None
SoundComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
SoundComponent.name.label:Name
SoundComponent.stopVal.default:1.0
SoundComponent.stopVal.categ:Basic
SoundComponent.stopVal.allowedVals:[]
SoundComponent.stopVal.readOnly:False
SoundComponent.stopVal.updates:constant
SoundComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '1.0', 'hint': u'When does the component end? (blank to use the duration of the media)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
SoundComponent.stopVal.__weakref__:None
SoundComponent.stopVal.valType:code
SoundComponent.stopVal.staticUpdater:None
SoundComponent.stopVal.val:1.0
SoundComponent.stopVal.allowedTypes:[]
SoundComponent.stopVal.hint:When does the component end? (blank to use the duration of the media)
SoundComponent.stopVal.allowedUpdates:[]
SoundComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
SoundComponent.stopVal.label:Stop
SoundComponent.durationEstim.default:
SoundComponent.durationEstim.categ:Basic
SoundComponent.durationEstim.allowedVals:[]
SoundComponent.durationEstim.readOnly:False
SoundComponent.durationEstim.updates:None
SoundComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
SoundComponent.durationEstim.__weakref__:None
SoundComponent.durationEstim.valType:code
SoundComponent.durationEstim.staticUpdater:None
SoundComponent.durationEstim.val:
SoundComponent.durationEstim.allowedTypes:[]
SoundComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
SoundComponent.durationEstim.allowedUpdates:None
SoundComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
SoundComponent.durationEstim.label:Expected duration (s)
SoundComponent.startEstim.default:
SoundComponent.startEstim.categ:Basic
SoundComponent.startEstim.allowedVals:[]
SoundComponent.startEstim.readOnly:False
SoundComponent.startEstim.updates:None
SoundComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
SoundComponent.startEstim.__weakref__:None
SoundComponent.startEstim.valType:code
SoundComponent.startEstim.staticUpdater:None
SoundComponent.startEstim.val:
SoundComponent.startEstim.allowedTypes:[]
SoundComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
SoundComponent.startEstim.allowedUpdates:None
SoundComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
SoundComponent.startEstim.label:Expected start (s)
SoundComponent.startType.default:'time (s)'
SoundComponent.startType.categ:Basic
SoundComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
SoundComponent.startType.readOnly:False
SoundComponent.startType.updates:None
SoundComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
SoundComponent.startType.__weakref__:None
SoundComponent.startType.valType:str
SoundComponent.startType.staticUpdater:None
SoundComponent.startType.val:time (s)
SoundComponent.startType.allowedTypes:[]
SoundComponent.startType.hint:How do you want to define your start point?
SoundComponent.startType.allowedUpdates:None
SoundComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
SoundComponent.startType.label:start type
SoundComponent.stopType.default:'duration (s)'
SoundComponent.stopType.categ:Basic
SoundComponent.stopType.allowedVals:['duration (s)']
SoundComponent.stopType.readOnly:False
SoundComponent.stopType.updates:None
SoundComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'The maximum duration of a sound in seconds', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
SoundComponent.stopType.__weakref__:None
SoundComponent.stopType.valType:str
SoundComponent.stopType.staticUpdater:None
SoundComponent.stopType.val:duration (s)
SoundComponent.stopType.allowedTypes:[]
SoundComponent.stopType.hint:The maximum duration of a sound in seconds
SoundComponent.stopType.allowedUpdates:None
SoundComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
SoundComponent.stopType.label:stop type
SoundComponent.startVal.default:0.0
SoundComponent.startVal.categ:Basic
SoundComponent.startVal.allowedVals:[]
SoundComponent.startVal.readOnly:False
SoundComponent.startVal.updates:None
SoundComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '0.0', 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
SoundComponent.startVal.__weakref__:None
SoundComponent.startVal.valType:code
SoundComponent.startVal.staticUpdater:None
SoundComponent.startVal.val:0.0
SoundComponent.startVal.allowedTypes:[]
SoundComponent.startVal.hint:When does the component start?
SoundComponent.startVal.allowedUpdates:None
SoundComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
SoundComponent.startVal.label:Start
StaticComponent.order:['name']
StaticComponent.code.default:
StaticComponent.code.categ:Basic
StaticComponent.code.allowedVals:[]
StaticComponent.code.readOnly:False
StaticComponent.code.updates:None
StaticComponent.code.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'Custom code to be run during the static period (after updates)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Custom code', 'readOnly': False, 'updates': None, 'valType': 'code'}
StaticComponent.code.__weakref__:None
StaticComponent.code.valType:code
StaticComponent.code.staticUpdater:None
StaticComponent.code.val:
StaticComponent.code.allowedTypes:[]
StaticComponent.code.hint:Custom code to be run during the static period (after updates)
StaticComponent.code.allowedUpdates:None
StaticComponent.code.__class__:<class 'psychopy.app.builder.experiment.Param'>
StaticComponent.code.label:Custom code
StaticComponent.name.default:ISI
StaticComponent.name.categ:Basic
StaticComponent.name.allowedVals:[]
StaticComponent.name.readOnly:False
StaticComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'ISI', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
StaticComponent.name.__weakref__:None
StaticComponent.name.valType:code
StaticComponent.name.staticUpdater:None
StaticComponent.name.val:ISI
StaticComponent.name.allowedTypes:[]
StaticComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
StaticComponent.name.allowedUpdates:None
StaticComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
StaticComponent.name.label:Name
StaticComponent.stopVal.default:0.5
StaticComponent.stopVal.categ:Basic
StaticComponent.stopVal.allowedVals:[]
StaticComponent.stopVal.readOnly:False
StaticComponent.stopVal.updates:constant
StaticComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.5, 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': '', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
StaticComponent.stopVal.__weakref__:None
StaticComponent.stopVal.valType:code
StaticComponent.stopVal.staticUpdater:None
StaticComponent.stopVal.val:0.5
StaticComponent.stopVal.allowedTypes:[]
StaticComponent.stopVal.hint:When does the component end? (blank is endless)
StaticComponent.stopVal.allowedUpdates:[]
StaticComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
StaticComponent.stopVal.label:
StaticComponent.durationEstim.default:
StaticComponent.durationEstim.categ:Basic
StaticComponent.durationEstim.allowedVals:[]
StaticComponent.durationEstim.readOnly:False
StaticComponent.durationEstim.updates:None
StaticComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': '', 'readOnly': False, 'updates': None, 'valType': 'code'}
StaticComponent.durationEstim.__weakref__:None
StaticComponent.durationEstim.valType:code
StaticComponent.durationEstim.staticUpdater:None
StaticComponent.durationEstim.val:
StaticComponent.durationEstim.allowedTypes:[]
StaticComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
StaticComponent.durationEstim.allowedUpdates:None
StaticComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
StaticComponent.durationEstim.label:
StaticComponent.startEstim.default:
StaticComponent.startEstim.categ:Basic
StaticComponent.startEstim.allowedVals:[]
StaticComponent.startEstim.readOnly:False
StaticComponent.startEstim.updates:None
StaticComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': '', 'readOnly': False, 'updates': None, 'valType': 'code'}
StaticComponent.startEstim.__weakref__:None
StaticComponent.startEstim.valType:code
StaticComponent.startEstim.staticUpdater:None
StaticComponent.startEstim.val:
StaticComponent.startEstim.allowedTypes:[]
StaticComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
StaticComponent.startEstim.allowedUpdates:None
StaticComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
StaticComponent.startEstim.label:
StaticComponent.startType.default:'time (s)'
StaticComponent.startType.categ:Basic
StaticComponent.startType.allowedVals:['time (s)', 'frame N']
StaticComponent.startType.readOnly:False
StaticComponent.startType.updates:None
StaticComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N'], 'label': '', 'readOnly': False, 'updates': None, 'valType': 'str'}
StaticComponent.startType.__weakref__:None
StaticComponent.startType.valType:str
StaticComponent.startType.staticUpdater:None
StaticComponent.startType.val:time (s)
StaticComponent.startType.allowedTypes:[]
StaticComponent.startType.hint:How do you want to define your start point?
StaticComponent.startType.allowedUpdates:None
StaticComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
StaticComponent.startType.label:
StaticComponent.stopType.default:'duration (s)'
StaticComponent.stopType.categ:Basic
StaticComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N']
StaticComponent.stopType.readOnly:False
StaticComponent.stopType.updates:None
StaticComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N'], 'label': '', 'readOnly': False, 'updates': None, 'valType': 'str'}
StaticComponent.stopType.__weakref__:None
StaticComponent.stopType.valType:str
StaticComponent.stopType.staticUpdater:None
StaticComponent.stopType.val:duration (s)
StaticComponent.stopType.allowedTypes:[]
StaticComponent.stopType.hint:How do you want to define your end point?
StaticComponent.stopType.allowedUpdates:None
StaticComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
StaticComponent.stopType.label:
StaticComponent.startVal.default:0.0
StaticComponent.startVal.categ:Basic
StaticComponent.startVal.allowedVals:[]
StaticComponent.startVal.readOnly:False
StaticComponent.startVal.updates:None
StaticComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': '', 'readOnly': False, 'updates': None, 'valType': 'code'}
StaticComponent.startVal.__weakref__:None
StaticComponent.startVal.valType:code
StaticComponent.startVal.staticUpdater:None
StaticComponent.startVal.val:0.0
StaticComponent.startVal.allowedTypes:[]
StaticComponent.startVal.hint:When does the component start?
StaticComponent.startVal.allowedUpdates:None
StaticComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
StaticComponent.startVal.label:
TextComponent.order:['name']
TextComponent.opacity.default:1
TextComponent.opacity.categ:Advanced
TextComponent.opacity.allowedVals:[]
TextComponent.opacity.readOnly:False
TextComponent.opacity.updates:constant
TextComponent.opacity.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 1, 'hint': u'Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Opacity', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
TextComponent.opacity.__weakref__:None
TextComponent.opacity.valType:code
TextComponent.opacity.staticUpdater:None
TextComponent.opacity.val:1
TextComponent.opacity.allowedTypes:[]
TextComponent.opacity.hint:Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent)
TextComponent.opacity.allowedUpdates:['constant', 'set every repeat', 'set every frame']
TextComponent.opacity.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.opacity.label:Opacity
TextComponent.colorSpace.default:'rgb'
TextComponent.colorSpace.categ:Advanced
TextComponent.colorSpace.allowedVals:['rgb', 'dkl', 'lms', 'hsv']
TextComponent.colorSpace.readOnly:False
TextComponent.colorSpace.updates:constant
TextComponent.colorSpace.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 'rgb', 'hint': u'Choice of color space for the color (rgb, dkl, lms, hsv)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['rgb', 'dkl', 'lms', 'hsv'], 'label': u'Color space', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
TextComponent.colorSpace.__weakref__:None
TextComponent.colorSpace.valType:str
TextComponent.colorSpace.staticUpdater:None
TextComponent.colorSpace.val:rgb
TextComponent.colorSpace.allowedTypes:[]
TextComponent.colorSpace.hint:Choice of color space for the color (rgb, dkl, lms, hsv)
TextComponent.colorSpace.allowedUpdates:None
TextComponent.colorSpace.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.colorSpace.label:Color space
TextComponent.name.default:text
TextComponent.name.categ:Basic
TextComponent.name.allowedVals:[]
TextComponent.name.readOnly:False
TextComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'text', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
TextComponent.name.__weakref__:None
TextComponent.name.valType:code
TextComponent.name.staticUpdater:None
TextComponent.name.val:text
TextComponent.name.allowedTypes:[]
TextComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
TextComponent.name.allowedUpdates:None
TextComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.name.label:Name
TextComponent.wrapWidth.default:
TextComponent.wrapWidth.categ:Advanced
TextComponent.wrapWidth.allowedVals:[]
TextComponent.wrapWidth.readOnly:False
TextComponent.wrapWidth.updates:constant
TextComponent.wrapWidth.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': '', 'hint': u'How wide should the text get when it wraps? (in the specified units)', 'allowedTypes': [], 'allowedUpdates': ['constant'], 'allowedVals': [], 'label': u'Wrap width', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
TextComponent.wrapWidth.__weakref__:None
TextComponent.wrapWidth.valType:code
TextComponent.wrapWidth.staticUpdater:None
TextComponent.wrapWidth.val:
TextComponent.wrapWidth.allowedTypes:[]
TextComponent.wrapWidth.hint:How wide should the text get when it wraps? (in the specified units)
TextComponent.wrapWidth.allowedUpdates:['constant']
TextComponent.wrapWidth.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.wrapWidth.label:Wrap width
TextComponent.color.default:'white'
TextComponent.color.categ:Basic
TextComponent.color.allowedVals:[]
TextComponent.color.readOnly:False
TextComponent.color.updates:constant
TextComponent.color.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'white', 'hint': u'Color of this stimulus (e.g. $[1,1,0], red ); Right-click to bring up a color-picker (rgb only)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Color', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
TextComponent.color.__weakref__:None
TextComponent.color.valType:str
TextComponent.color.staticUpdater:None
TextComponent.color.val:white
TextComponent.color.allowedTypes:[]
TextComponent.color.hint:Color of this stimulus (e.g. $[1,1,0], red ); Right-click to bring up a color-picker (rgb only)
TextComponent.color.allowedUpdates:['constant', 'set every repeat', 'set every frame']
TextComponent.color.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.color.label:Color
TextComponent.text.default:u'Any text\n\nincluding line breaks'
TextComponent.text.categ:Basic
TextComponent.text.allowedVals:[]
TextComponent.text.readOnly:False
TextComponent.text.updates:constant
TextComponent.text.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': u'Any text\n\nincluding line breaks', 'hint': u'The text to be displayed', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Text', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
TextComponent.text.__weakref__:None
TextComponent.text.valType:str
TextComponent.text.staticUpdater:None
TextComponent.text.val:Any text

including line breaks
TextComponent.text.allowedTypes:[]
TextComponent.text.hint:The text to be displayed
TextComponent.text.allowedUpdates:['constant', 'set every repeat', 'set every frame']
TextComponent.text.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.text.label:Text
TextComponent.stopVal.default:1.0
TextComponent.stopVal.categ:Basic
TextComponent.stopVal.allowedVals:[]
TextComponent.stopVal.readOnly:False
TextComponent.stopVal.updates:constant
TextComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1.0, 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
TextComponent.stopVal.__weakref__:None
TextComponent.stopVal.valType:code
TextComponent.stopVal.staticUpdater:None
TextComponent.stopVal.val:1.0
TextComponent.stopVal.allowedTypes:[]
TextComponent.stopVal.hint:When does the component end? (blank is endless)
TextComponent.stopVal.allowedUpdates:[]
TextComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.stopVal.label:Stop
TextComponent.durationEstim.default:
TextComponent.durationEstim.categ:Basic
TextComponent.durationEstim.allowedVals:[]
TextComponent.durationEstim.readOnly:False
TextComponent.durationEstim.updates:None
TextComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
TextComponent.durationEstim.__weakref__:None
TextComponent.durationEstim.valType:code
TextComponent.durationEstim.staticUpdater:None
TextComponent.durationEstim.val:
TextComponent.durationEstim.allowedTypes:[]
TextComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
TextComponent.durationEstim.allowedUpdates:None
TextComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.durationEstim.label:Expected duration (s)
TextComponent.pos.default:(0, 0)
TextComponent.pos.categ:Basic
TextComponent.pos.allowedVals:[]
TextComponent.pos.readOnly:False
TextComponent.pos.updates:constant
TextComponent.pos.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': (0, 0), 'hint': u'Position of this stimulus (e.g. [1,2] )', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Position [x,y]', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
TextComponent.pos.__weakref__:None
TextComponent.pos.valType:code
TextComponent.pos.staticUpdater:None
TextComponent.pos.val:(0, 0)
TextComponent.pos.allowedTypes:[]
TextComponent.pos.hint:Position of this stimulus (e.g. [1,2] )
TextComponent.pos.allowedUpdates:['constant', 'set every repeat', 'set every frame']
TextComponent.pos.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.pos.label:Position [x,y]
TextComponent.flip.default:''
TextComponent.flip.categ:Advanced
TextComponent.flip.allowedVals:[]
TextComponent.flip.readOnly:False
TextComponent.flip.updates:constant
TextComponent.flip.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': '', 'hint': u'horiz = left-right reversed; vert = up-down reversed; $var = variable', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Flip (mirror)', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
TextComponent.flip.__weakref__:None
TextComponent.flip.valType:str
TextComponent.flip.staticUpdater:None
TextComponent.flip.val:
TextComponent.flip.allowedTypes:[]
TextComponent.flip.hint:horiz = left-right reversed; vert = up-down reversed; $var = variable
TextComponent.flip.allowedUpdates:['constant', 'set every repeat', 'set every frame']
TextComponent.flip.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.flip.label:Flip (mirror)
TextComponent.startEstim.default:
TextComponent.startEstim.categ:Basic
TextComponent.startEstim.allowedVals:[]
TextComponent.startEstim.readOnly:False
TextComponent.startEstim.updates:None
TextComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
TextComponent.startEstim.__weakref__:None
TextComponent.startEstim.valType:code
TextComponent.startEstim.staticUpdater:None
TextComponent.startEstim.val:
TextComponent.startEstim.allowedTypes:[]
TextComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
TextComponent.startEstim.allowedUpdates:None
TextComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.startEstim.label:Expected start (s)
TextComponent.units.default:'from exp settings'
TextComponent.units.categ:Advanced
TextComponent.units.allowedVals:['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat']
TextComponent.units.readOnly:False
TextComponent.units.updates:None
TextComponent.units.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 'from exp settings', 'hint': u'Units of dimensions for this stimulus', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['from exp settings', 'deg', 'cm', 'pix', 'norm', 'height', 'degFlatPos', 'degFlat'], 'label': u'Units', 'readOnly': False, 'updates': None, 'valType': 'str'}
TextComponent.units.__weakref__:None
TextComponent.units.valType:str
TextComponent.units.staticUpdater:None
TextComponent.units.val:from exp settings
TextComponent.units.allowedTypes:[]
TextComponent.units.hint:Units of dimensions for this stimulus
TextComponent.units.allowedUpdates:None
TextComponent.units.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.units.label:Units
TextComponent.startType.default:'time (s)'
TextComponent.startType.categ:Basic
TextComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
TextComponent.startType.readOnly:False
TextComponent.startType.updates:None
TextComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
TextComponent.startType.__weakref__:None
TextComponent.startType.valType:str
TextComponent.startType.staticUpdater:None
TextComponent.startType.val:time (s)
TextComponent.startType.allowedTypes:[]
TextComponent.startType.hint:How do you want to define your start point?
TextComponent.startType.allowedUpdates:None
TextComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.startType.label:start type
TextComponent.ori.default:0
TextComponent.ori.categ:Advanced
TextComponent.ori.allowedVals:[]
TextComponent.ori.readOnly:False
TextComponent.ori.updates:constant
TextComponent.ori.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 0, 'hint': u'Orientation of this stimulus (in deg)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Orientation', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
TextComponent.ori.__weakref__:None
TextComponent.ori.valType:code
TextComponent.ori.staticUpdater:None
TextComponent.ori.val:0
TextComponent.ori.allowedTypes:[]
TextComponent.ori.hint:Orientation of this stimulus (in deg)
TextComponent.ori.allowedUpdates:['constant', 'set every repeat', 'set every frame']
TextComponent.ori.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.ori.label:Orientation
TextComponent.stopType.default:'duration (s)'
TextComponent.stopType.categ:Basic
TextComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
TextComponent.stopType.readOnly:False
TextComponent.stopType.updates:None
TextComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
TextComponent.stopType.__weakref__:None
TextComponent.stopType.valType:str
TextComponent.stopType.staticUpdater:None
TextComponent.stopType.val:duration (s)
TextComponent.stopType.allowedTypes:[]
TextComponent.stopType.hint:How do you want to define your end point?
TextComponent.stopType.allowedUpdates:None
TextComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.stopType.label:stop type
TextComponent.startVal.default:0.0
TextComponent.startVal.categ:Basic
TextComponent.startVal.allowedVals:[]
TextComponent.startVal.readOnly:False
TextComponent.startVal.updates:None
TextComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
TextComponent.startVal.__weakref__:None
TextComponent.startVal.valType:code
TextComponent.startVal.staticUpdater:None
TextComponent.startVal.val:0.0
TextComponent.startVal.allowedTypes:[]
TextComponent.startVal.hint:When does the component start?
TextComponent.startVal.allowedUpdates:None
TextComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.startVal.label:Start
TextComponent.font.default:'Arial'
TextComponent.font.categ:Basic
TextComponent.font.allowedVals:[]
TextComponent.font.readOnly:False
TextComponent.font.updates:constant
TextComponent.font.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'Arial', 'hint': u'The font name (e.g. Comic Sans)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Font', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
TextComponent.font.__weakref__:None
TextComponent.font.valType:str
TextComponent.font.staticUpdater:None
TextComponent.font.val:Arial
TextComponent.font.allowedTypes:[]
TextComponent.font.hint:The font name (e.g. Comic Sans)
TextComponent.font.allowedUpdates:['constant', 'set every repeat', 'set every frame']
TextComponent.font.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.font.label:Font
TextComponent.letterHeight.default:0.1
TextComponent.letterHeight.categ:Basic
TextComponent.letterHeight.allowedVals:[]
TextComponent.letterHeight.readOnly:False
TextComponent.letterHeight.updates:constant
TextComponent.letterHeight.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.1, 'hint': u'Specifies the height of the letter (the width is then determined by the font)', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat', 'set every frame'], 'allowedVals': [], 'label': u'Letter height', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
TextComponent.letterHeight.__weakref__:None
TextComponent.letterHeight.valType:code
TextComponent.letterHeight.staticUpdater:None
TextComponent.letterHeight.val:0.1
TextComponent.letterHeight.allowedTypes:[]
TextComponent.letterHeight.hint:Specifies the height of the letter (the width is then determined by the font)
TextComponent.letterHeight.allowedUpdates:['constant', 'set every repeat', 'set every frame']
TextComponent.letterHeight.__class__:<class 'psychopy.app.builder.experiment.Param'>
TextComponent.letterHeight.label:Letter height
UnknownComponent.order:['name']
UnknownComponent.name.default:
UnknownComponent.name.categ:Basic
UnknownComponent.name.allowedVals:[]
UnknownComponent.name.readOnly:False
UnknownComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
UnknownComponent.name.__weakref__:None
UnknownComponent.name.valType:code
UnknownComponent.name.staticUpdater:None
UnknownComponent.name.val:
UnknownComponent.name.allowedTypes:[]
UnknownComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
UnknownComponent.name.allowedUpdates:None
UnknownComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
UnknownComponent.name.label:Name
cedrusButtonBoxComponent.order:['forceEndRoutine', 'allowedKeys', 'store', 'storeCorrect', 'correctAns']
cedrusButtonBoxComponent.correctAns.default:
cedrusButtonBoxComponent.correctAns.categ:Basic
cedrusButtonBoxComponent.correctAns.allowedVals:[]
cedrusButtonBoxComponent.correctAns.readOnly:False
cedrusButtonBoxComponent.correctAns.updates:constant
cedrusButtonBoxComponent.correctAns.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u"What is the 'correct' response? NB, buttons are labelled 0 to 6 on a 7-button box. Enter 'None' (no quotes) if withholding a response is correct. Might be helpful to add a correctAns column and use $correctAns to compare to the key press.", 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Correct answer', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
cedrusButtonBoxComponent.correctAns.__weakref__:None
cedrusButtonBoxComponent.correctAns.valType:code
cedrusButtonBoxComponent.correctAns.staticUpdater:None
cedrusButtonBoxComponent.correctAns.val:
cedrusButtonBoxComponent.correctAns.allowedTypes:[]
cedrusButtonBoxComponent.correctAns.hint:What is the 'correct' response? NB, buttons are labelled 0 to 6 on a 7-button box. Enter 'None' (no quotes) if withholding a response is correct. Might be helpful to add a correctAns column and use $correctAns to compare to the key press.
cedrusButtonBoxComponent.correctAns.allowedUpdates:[]
cedrusButtonBoxComponent.correctAns.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.correctAns.label:Correct answer
cedrusButtonBoxComponent.storeCorrect.default:False
cedrusButtonBoxComponent.storeCorrect.categ:Basic
cedrusButtonBoxComponent.storeCorrect.allowedVals:[]
cedrusButtonBoxComponent.storeCorrect.readOnly:False
cedrusButtonBoxComponent.storeCorrect.updates:constant
cedrusButtonBoxComponent.storeCorrect.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': False, 'hint': u'Do you want to save the response as correct/incorrect?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Store correct', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
cedrusButtonBoxComponent.storeCorrect.__weakref__:None
cedrusButtonBoxComponent.storeCorrect.valType:bool
cedrusButtonBoxComponent.storeCorrect.staticUpdater:None
cedrusButtonBoxComponent.storeCorrect.val:False
cedrusButtonBoxComponent.storeCorrect.allowedTypes:[]
cedrusButtonBoxComponent.storeCorrect.hint:Do you want to save the response as correct/incorrect?
cedrusButtonBoxComponent.storeCorrect.allowedUpdates:[]
cedrusButtonBoxComponent.storeCorrect.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.storeCorrect.label:Store correct
cedrusButtonBoxComponent.name.default:buttonBox
cedrusButtonBoxComponent.name.categ:Basic
cedrusButtonBoxComponent.name.allowedVals:[]
cedrusButtonBoxComponent.name.readOnly:False
cedrusButtonBoxComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'buttonBox', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
cedrusButtonBoxComponent.name.__weakref__:None
cedrusButtonBoxComponent.name.valType:code
cedrusButtonBoxComponent.name.staticUpdater:None
cedrusButtonBoxComponent.name.val:buttonBox
cedrusButtonBoxComponent.name.allowedTypes:[]
cedrusButtonBoxComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
cedrusButtonBoxComponent.name.allowedUpdates:None
cedrusButtonBoxComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.name.label:Name
cedrusButtonBoxComponent.deviceNumber.default:0
cedrusButtonBoxComponent.deviceNumber.categ:Advanced
cedrusButtonBoxComponent.deviceNumber.allowedVals:[]
cedrusButtonBoxComponent.deviceNumber.readOnly:False
cedrusButtonBoxComponent.deviceNumber.updates:constant
cedrusButtonBoxComponent.deviceNumber.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': 0, 'hint': u'Device number, if you have multiple devices which one do you want (0, 1, 2...)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Device number', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
cedrusButtonBoxComponent.deviceNumber.__weakref__:None
cedrusButtonBoxComponent.deviceNumber.valType:code
cedrusButtonBoxComponent.deviceNumber.staticUpdater:None
cedrusButtonBoxComponent.deviceNumber.val:0
cedrusButtonBoxComponent.deviceNumber.allowedTypes:[]
cedrusButtonBoxComponent.deviceNumber.hint:Device number, if you have multiple devices which one do you want (0, 1, 2...)
cedrusButtonBoxComponent.deviceNumber.allowedUpdates:[]
cedrusButtonBoxComponent.deviceNumber.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.deviceNumber.label:Device number
cedrusButtonBoxComponent.stopVal.default:1.0
cedrusButtonBoxComponent.stopVal.categ:Basic
cedrusButtonBoxComponent.stopVal.allowedVals:[]
cedrusButtonBoxComponent.stopVal.readOnly:False
cedrusButtonBoxComponent.stopVal.updates:constant
cedrusButtonBoxComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1.0, 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
cedrusButtonBoxComponent.stopVal.__weakref__:None
cedrusButtonBoxComponent.stopVal.valType:code
cedrusButtonBoxComponent.stopVal.staticUpdater:None
cedrusButtonBoxComponent.stopVal.val:1.0
cedrusButtonBoxComponent.stopVal.allowedTypes:[]
cedrusButtonBoxComponent.stopVal.hint:When does the component end? (blank is endless)
cedrusButtonBoxComponent.stopVal.allowedUpdates:[]
cedrusButtonBoxComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.stopVal.label:Stop
cedrusButtonBoxComponent.durationEstim.default:
cedrusButtonBoxComponent.durationEstim.categ:Basic
cedrusButtonBoxComponent.durationEstim.allowedVals:[]
cedrusButtonBoxComponent.durationEstim.readOnly:False
cedrusButtonBoxComponent.durationEstim.updates:None
cedrusButtonBoxComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
cedrusButtonBoxComponent.durationEstim.__weakref__:None
cedrusButtonBoxComponent.durationEstim.valType:code
cedrusButtonBoxComponent.durationEstim.staticUpdater:None
cedrusButtonBoxComponent.durationEstim.val:
cedrusButtonBoxComponent.durationEstim.allowedTypes:[]
cedrusButtonBoxComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
cedrusButtonBoxComponent.durationEstim.allowedUpdates:None
cedrusButtonBoxComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.durationEstim.label:Expected duration (s)
cedrusButtonBoxComponent.useBoxTimer.default:False
cedrusButtonBoxComponent.useBoxTimer.categ:Advanced
cedrusButtonBoxComponent.useBoxTimer.allowedVals:[True, False]
cedrusButtonBoxComponent.useBoxTimer.readOnly:False
cedrusButtonBoxComponent.useBoxTimer.updates:constant
cedrusButtonBoxComponent.useBoxTimer.__dict__:{'staticUpdater': None, 'categ': 'Advanced', 'val': False, 'hint': u'According to Cedrus the response box timer has a drift - use with caution!', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [True, False], 'label': u'Use box timer', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
cedrusButtonBoxComponent.useBoxTimer.__weakref__:None
cedrusButtonBoxComponent.useBoxTimer.valType:bool
cedrusButtonBoxComponent.useBoxTimer.staticUpdater:None
cedrusButtonBoxComponent.useBoxTimer.val:False
cedrusButtonBoxComponent.useBoxTimer.allowedTypes:[]
cedrusButtonBoxComponent.useBoxTimer.hint:According to Cedrus the response box timer has a drift - use with caution!
cedrusButtonBoxComponent.useBoxTimer.allowedUpdates:[]
cedrusButtonBoxComponent.useBoxTimer.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.useBoxTimer.label:Use box timer
cedrusButtonBoxComponent.forceEndRoutine.default:True
cedrusButtonBoxComponent.forceEndRoutine.categ:Basic
cedrusButtonBoxComponent.forceEndRoutine.allowedVals:[]
cedrusButtonBoxComponent.forceEndRoutine.readOnly:False
cedrusButtonBoxComponent.forceEndRoutine.updates:constant
cedrusButtonBoxComponent.forceEndRoutine.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': True, 'hint': u'Should a response force the end of the Routine (e.g end the trial)?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Force end of Routine', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
cedrusButtonBoxComponent.forceEndRoutine.__weakref__:None
cedrusButtonBoxComponent.forceEndRoutine.valType:bool
cedrusButtonBoxComponent.forceEndRoutine.staticUpdater:None
cedrusButtonBoxComponent.forceEndRoutine.val:True
cedrusButtonBoxComponent.forceEndRoutine.allowedTypes:[]
cedrusButtonBoxComponent.forceEndRoutine.hint:Should a response force the end of the Routine (e.g end the trial)?
cedrusButtonBoxComponent.forceEndRoutine.allowedUpdates:[]
cedrusButtonBoxComponent.forceEndRoutine.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.forceEndRoutine.label:Force end of Routine
cedrusButtonBoxComponent.startEstim.default:
cedrusButtonBoxComponent.startEstim.categ:Basic
cedrusButtonBoxComponent.startEstim.allowedVals:[]
cedrusButtonBoxComponent.startEstim.readOnly:False
cedrusButtonBoxComponent.startEstim.updates:None
cedrusButtonBoxComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
cedrusButtonBoxComponent.startEstim.__weakref__:None
cedrusButtonBoxComponent.startEstim.valType:code
cedrusButtonBoxComponent.startEstim.staticUpdater:None
cedrusButtonBoxComponent.startEstim.val:
cedrusButtonBoxComponent.startEstim.allowedTypes:[]
cedrusButtonBoxComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
cedrusButtonBoxComponent.startEstim.allowedUpdates:None
cedrusButtonBoxComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.startEstim.label:Expected start (s)
cedrusButtonBoxComponent.discard previous.default:True
cedrusButtonBoxComponent.discard previous.categ:Basic
cedrusButtonBoxComponent.discard previous.allowedVals:[]
cedrusButtonBoxComponent.discard previous.readOnly:False
cedrusButtonBoxComponent.discard previous.updates:constant
cedrusButtonBoxComponent.discard previous.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': True, 'hint': u'Do you want to discard all responses occuring before the onset of this component?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Discard previous', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
cedrusButtonBoxComponent.discard previous.__weakref__:None
cedrusButtonBoxComponent.discard previous.valType:bool
cedrusButtonBoxComponent.discard previous.staticUpdater:None
cedrusButtonBoxComponent.discard previous.val:True
cedrusButtonBoxComponent.discard previous.allowedTypes:[]
cedrusButtonBoxComponent.discard previous.hint:Do you want to discard all responses occuring before the onset of this component?
cedrusButtonBoxComponent.discard previous.allowedUpdates:[]
cedrusButtonBoxComponent.discard previous.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.discard previous.label:Discard previous
cedrusButtonBoxComponent.startType.default:'time (s)'
cedrusButtonBoxComponent.startType.categ:Basic
cedrusButtonBoxComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
cedrusButtonBoxComponent.startType.readOnly:False
cedrusButtonBoxComponent.startType.updates:None
cedrusButtonBoxComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
cedrusButtonBoxComponent.startType.__weakref__:None
cedrusButtonBoxComponent.startType.valType:str
cedrusButtonBoxComponent.startType.staticUpdater:None
cedrusButtonBoxComponent.startType.val:time (s)
cedrusButtonBoxComponent.startType.allowedTypes:[]
cedrusButtonBoxComponent.startType.hint:How do you want to define your start point?
cedrusButtonBoxComponent.startType.allowedUpdates:None
cedrusButtonBoxComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.startType.label:start type
cedrusButtonBoxComponent.allowedKeys.default:
cedrusButtonBoxComponent.allowedKeys.categ:Basic
cedrusButtonBoxComponent.allowedKeys.allowedVals:[]
cedrusButtonBoxComponent.allowedKeys.readOnly:False
cedrusButtonBoxComponent.allowedKeys.updates:constant
cedrusButtonBoxComponent.allowedKeys.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'Keys to be read (blank for any) or key numbers separated by commas', 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat'], 'allowedVals': [], 'label': u'Allowed keys', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
cedrusButtonBoxComponent.allowedKeys.__weakref__:None
cedrusButtonBoxComponent.allowedKeys.valType:code
cedrusButtonBoxComponent.allowedKeys.staticUpdater:None
cedrusButtonBoxComponent.allowedKeys.val:
cedrusButtonBoxComponent.allowedKeys.allowedTypes:[]
cedrusButtonBoxComponent.allowedKeys.hint:Keys to be read (blank for any) or key numbers separated by commas
cedrusButtonBoxComponent.allowedKeys.allowedUpdates:['constant', 'set every repeat']
cedrusButtonBoxComponent.allowedKeys.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.allowedKeys.label:Allowed keys
cedrusButtonBoxComponent.stopType.default:'duration (s)'
cedrusButtonBoxComponent.stopType.categ:Basic
cedrusButtonBoxComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
cedrusButtonBoxComponent.stopType.readOnly:False
cedrusButtonBoxComponent.stopType.updates:None
cedrusButtonBoxComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
cedrusButtonBoxComponent.stopType.__weakref__:None
cedrusButtonBoxComponent.stopType.valType:str
cedrusButtonBoxComponent.stopType.staticUpdater:None
cedrusButtonBoxComponent.stopType.val:duration (s)
cedrusButtonBoxComponent.stopType.allowedTypes:[]
cedrusButtonBoxComponent.stopType.hint:How do you want to define your end point?
cedrusButtonBoxComponent.stopType.allowedUpdates:None
cedrusButtonBoxComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.stopType.label:stop type
cedrusButtonBoxComponent.startVal.default:0.0
cedrusButtonBoxComponent.startVal.categ:Basic
cedrusButtonBoxComponent.startVal.allowedVals:[]
cedrusButtonBoxComponent.startVal.readOnly:False
cedrusButtonBoxComponent.startVal.updates:None
cedrusButtonBoxComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
cedrusButtonBoxComponent.startVal.__weakref__:None
cedrusButtonBoxComponent.startVal.valType:code
cedrusButtonBoxComponent.startVal.staticUpdater:None
cedrusButtonBoxComponent.startVal.val:0.0
cedrusButtonBoxComponent.startVal.allowedTypes:[]
cedrusButtonBoxComponent.startVal.hint:When does the component start?
cedrusButtonBoxComponent.startVal.allowedUpdates:None
cedrusButtonBoxComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.startVal.label:Start
cedrusButtonBoxComponent.store.default:'first key'
cedrusButtonBoxComponent.store.categ:Basic
cedrusButtonBoxComponent.store.allowedVals:['last key', 'first key', 'all keys', 'nothing']
cedrusButtonBoxComponent.store.readOnly:False
cedrusButtonBoxComponent.store.updates:constant
cedrusButtonBoxComponent.store.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'first key', 'hint': u'Choose which (if any) responses to store at the end of a trial', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': ['last key', 'first key', 'all keys', 'nothing'], 'label': u'Store', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
cedrusButtonBoxComponent.store.__weakref__:None
cedrusButtonBoxComponent.store.valType:str
cedrusButtonBoxComponent.store.staticUpdater:None
cedrusButtonBoxComponent.store.val:first key
cedrusButtonBoxComponent.store.allowedTypes:[]
cedrusButtonBoxComponent.store.hint:Choose which (if any) responses to store at the end of a trial
cedrusButtonBoxComponent.store.allowedUpdates:[]
cedrusButtonBoxComponent.store.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.store.label:Store
cedrusButtonBoxComponent.syncScreenRefresh.default:True
cedrusButtonBoxComponent.syncScreenRefresh.categ:Basic
cedrusButtonBoxComponent.syncScreenRefresh.allowedVals:[]
cedrusButtonBoxComponent.syncScreenRefresh.readOnly:False
cedrusButtonBoxComponent.syncScreenRefresh.updates:constant
cedrusButtonBoxComponent.syncScreenRefresh.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': True, 'hint': u'A reaction time to a visual stimulus should be based on when the screen flipped', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'sync RT with screen', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
cedrusButtonBoxComponent.syncScreenRefresh.__weakref__:None
cedrusButtonBoxComponent.syncScreenRefresh.valType:bool
cedrusButtonBoxComponent.syncScreenRefresh.staticUpdater:None
cedrusButtonBoxComponent.syncScreenRefresh.val:True
cedrusButtonBoxComponent.syncScreenRefresh.allowedTypes:[]
cedrusButtonBoxComponent.syncScreenRefresh.hint:A reaction time to a visual stimulus should be based on when the screen flipped
cedrusButtonBoxComponent.syncScreenRefresh.allowedUpdates:[]
cedrusButtonBoxComponent.syncScreenRefresh.__class__:<class 'psychopy.app.builder.experiment.Param'>
cedrusButtonBoxComponent.syncScreenRefresh.label:sync RT with screen
ioLabsButtonBoxComponent.order:['forceEndRoutine', 'active', 'lights', 'store', 'storeCorrect', 'correctAns']
ioLabsButtonBoxComponent.correctAns.default:'0'
ioLabsButtonBoxComponent.correctAns.categ:Basic
ioLabsButtonBoxComponent.correctAns.allowedVals:[]
ioLabsButtonBoxComponent.correctAns.readOnly:False
ioLabsButtonBoxComponent.correctAns.updates:constant
ioLabsButtonBoxComponent.correctAns.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '0', 'hint': u"What is the 'correct' response? NB, buttons are labelled 0 to 7 on a 8-button box. Enter 'None' (no quotes) if withholding a response is correct. Might be helpful to add a correctAns column and use $correctAns to compare to the key press.", 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Correct answer', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
ioLabsButtonBoxComponent.correctAns.__weakref__:None
ioLabsButtonBoxComponent.correctAns.valType:str
ioLabsButtonBoxComponent.correctAns.staticUpdater:None
ioLabsButtonBoxComponent.correctAns.val:0
ioLabsButtonBoxComponent.correctAns.allowedTypes:[]
ioLabsButtonBoxComponent.correctAns.hint:What is the 'correct' response? NB, buttons are labelled 0 to 7 on a 8-button box. Enter 'None' (no quotes) if withholding a response is correct. Might be helpful to add a correctAns column and use $correctAns to compare to the key press.
ioLabsButtonBoxComponent.correctAns.allowedUpdates:[]
ioLabsButtonBoxComponent.correctAns.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.correctAns.label:Correct answer
ioLabsButtonBoxComponent.storeCorrect.default:False
ioLabsButtonBoxComponent.storeCorrect.categ:Basic
ioLabsButtonBoxComponent.storeCorrect.allowedVals:[]
ioLabsButtonBoxComponent.storeCorrect.readOnly:False
ioLabsButtonBoxComponent.storeCorrect.updates:constant
ioLabsButtonBoxComponent.storeCorrect.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': False, 'hint': u'Do you want to save the response as correct/incorrect?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Store correct', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
ioLabsButtonBoxComponent.storeCorrect.__weakref__:None
ioLabsButtonBoxComponent.storeCorrect.valType:bool
ioLabsButtonBoxComponent.storeCorrect.staticUpdater:None
ioLabsButtonBoxComponent.storeCorrect.val:False
ioLabsButtonBoxComponent.storeCorrect.allowedTypes:[]
ioLabsButtonBoxComponent.storeCorrect.hint:Do you want to save the response as correct/incorrect?
ioLabsButtonBoxComponent.storeCorrect.allowedUpdates:[]
ioLabsButtonBoxComponent.storeCorrect.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.storeCorrect.label:Store correct
ioLabsButtonBoxComponent.name.default:bbox
ioLabsButtonBoxComponent.name.categ:Basic
ioLabsButtonBoxComponent.name.allowedVals:[]
ioLabsButtonBoxComponent.name.readOnly:False
ioLabsButtonBoxComponent.name.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'bbox', 'hint': u'Name of this component (alpha-numeric or _, no spaces)', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Name', 'readOnly': False, 'updates': None, 'valType': 'code'}
ioLabsButtonBoxComponent.name.__weakref__:None
ioLabsButtonBoxComponent.name.valType:code
ioLabsButtonBoxComponent.name.staticUpdater:None
ioLabsButtonBoxComponent.name.val:bbox
ioLabsButtonBoxComponent.name.allowedTypes:[]
ioLabsButtonBoxComponent.name.hint:Name of this component (alpha-numeric or _, no spaces)
ioLabsButtonBoxComponent.name.allowedUpdates:None
ioLabsButtonBoxComponent.name.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.name.label:Name
ioLabsButtonBoxComponent.lights.default:True
ioLabsButtonBoxComponent.lights.categ:Basic
ioLabsButtonBoxComponent.lights.allowedVals:[]
ioLabsButtonBoxComponent.lights.readOnly:False
ioLabsButtonBoxComponent.lights.updates:constant
ioLabsButtonBoxComponent.lights.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': True, 'hint': u'Turn ON the lights for the active buttons?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Lights', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
ioLabsButtonBoxComponent.lights.__weakref__:None
ioLabsButtonBoxComponent.lights.valType:bool
ioLabsButtonBoxComponent.lights.staticUpdater:None
ioLabsButtonBoxComponent.lights.val:True
ioLabsButtonBoxComponent.lights.allowedTypes:[]
ioLabsButtonBoxComponent.lights.hint:Turn ON the lights for the active buttons?
ioLabsButtonBoxComponent.lights.allowedUpdates:[]
ioLabsButtonBoxComponent.lights.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.lights.label:Lights
ioLabsButtonBoxComponent.stopVal.default:1.0
ioLabsButtonBoxComponent.stopVal.categ:Basic
ioLabsButtonBoxComponent.stopVal.allowedVals:[]
ioLabsButtonBoxComponent.stopVal.readOnly:False
ioLabsButtonBoxComponent.stopVal.updates:constant
ioLabsButtonBoxComponent.stopVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 1.0, 'hint': u'When does the component end? (blank is endless)', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Stop', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
ioLabsButtonBoxComponent.stopVal.__weakref__:None
ioLabsButtonBoxComponent.stopVal.valType:code
ioLabsButtonBoxComponent.stopVal.staticUpdater:None
ioLabsButtonBoxComponent.stopVal.val:1.0
ioLabsButtonBoxComponent.stopVal.allowedTypes:[]
ioLabsButtonBoxComponent.stopVal.hint:When does the component end? (blank is endless)
ioLabsButtonBoxComponent.stopVal.allowedUpdates:[]
ioLabsButtonBoxComponent.stopVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.stopVal.label:Stop
ioLabsButtonBoxComponent.durationEstim.default:
ioLabsButtonBoxComponent.durationEstim.categ:Basic
ioLabsButtonBoxComponent.durationEstim.allowedVals:[]
ioLabsButtonBoxComponent.durationEstim.readOnly:False
ioLabsButtonBoxComponent.durationEstim.updates:None
ioLabsButtonBoxComponent.durationEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected duration (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected duration (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
ioLabsButtonBoxComponent.durationEstim.__weakref__:None
ioLabsButtonBoxComponent.durationEstim.valType:code
ioLabsButtonBoxComponent.durationEstim.staticUpdater:None
ioLabsButtonBoxComponent.durationEstim.val:
ioLabsButtonBoxComponent.durationEstim.allowedTypes:[]
ioLabsButtonBoxComponent.durationEstim.hint:(Optional) expected duration (s), purely for representing in the timeline
ioLabsButtonBoxComponent.durationEstim.allowedUpdates:None
ioLabsButtonBoxComponent.durationEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.durationEstim.label:Expected duration (s)
ioLabsButtonBoxComponent.forceEndRoutine.default:True
ioLabsButtonBoxComponent.forceEndRoutine.categ:Basic
ioLabsButtonBoxComponent.forceEndRoutine.allowedVals:[]
ioLabsButtonBoxComponent.forceEndRoutine.readOnly:False
ioLabsButtonBoxComponent.forceEndRoutine.updates:constant
ioLabsButtonBoxComponent.forceEndRoutine.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': True, 'hint': u'Should a response force the end of the Routine (e.g end the trial)?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Force end of Routine', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
ioLabsButtonBoxComponent.forceEndRoutine.__weakref__:None
ioLabsButtonBoxComponent.forceEndRoutine.valType:bool
ioLabsButtonBoxComponent.forceEndRoutine.staticUpdater:None
ioLabsButtonBoxComponent.forceEndRoutine.val:True
ioLabsButtonBoxComponent.forceEndRoutine.allowedTypes:[]
ioLabsButtonBoxComponent.forceEndRoutine.hint:Should a response force the end of the Routine (e.g end the trial)?
ioLabsButtonBoxComponent.forceEndRoutine.allowedUpdates:[]
ioLabsButtonBoxComponent.forceEndRoutine.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.forceEndRoutine.label:Force end of Routine
ioLabsButtonBoxComponent.startEstim.default:
ioLabsButtonBoxComponent.startEstim.categ:Basic
ioLabsButtonBoxComponent.startEstim.allowedVals:[]
ioLabsButtonBoxComponent.startEstim.readOnly:False
ioLabsButtonBoxComponent.startEstim.updates:None
ioLabsButtonBoxComponent.startEstim.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '', 'hint': u'(Optional) expected start (s), purely for representing in the timeline', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Expected start (s)', 'readOnly': False, 'updates': None, 'valType': 'code'}
ioLabsButtonBoxComponent.startEstim.__weakref__:None
ioLabsButtonBoxComponent.startEstim.valType:code
ioLabsButtonBoxComponent.startEstim.staticUpdater:None
ioLabsButtonBoxComponent.startEstim.val:
ioLabsButtonBoxComponent.startEstim.allowedTypes:[]
ioLabsButtonBoxComponent.startEstim.hint:(Optional) expected start (s), purely for representing in the timeline
ioLabsButtonBoxComponent.startEstim.allowedUpdates:None
ioLabsButtonBoxComponent.startEstim.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.startEstim.label:Expected start (s)
ioLabsButtonBoxComponent.discard previous.default:True
ioLabsButtonBoxComponent.discard previous.categ:Basic
ioLabsButtonBoxComponent.discard previous.allowedVals:[]
ioLabsButtonBoxComponent.discard previous.readOnly:False
ioLabsButtonBoxComponent.discard previous.updates:constant
ioLabsButtonBoxComponent.discard previous.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': True, 'hint': u'Do you want to discard all responses occuring before the onset of this component?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Discard previous', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
ioLabsButtonBoxComponent.discard previous.__weakref__:None
ioLabsButtonBoxComponent.discard previous.valType:bool
ioLabsButtonBoxComponent.discard previous.staticUpdater:None
ioLabsButtonBoxComponent.discard previous.val:True
ioLabsButtonBoxComponent.discard previous.allowedTypes:[]
ioLabsButtonBoxComponent.discard previous.hint:Do you want to discard all responses occuring before the onset of this component?
ioLabsButtonBoxComponent.discard previous.allowedUpdates:[]
ioLabsButtonBoxComponent.discard previous.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.discard previous.label:Discard previous
ioLabsButtonBoxComponent.startType.default:'time (s)'
ioLabsButtonBoxComponent.startType.categ:Basic
ioLabsButtonBoxComponent.startType.allowedVals:['time (s)', 'frame N', 'condition']
ioLabsButtonBoxComponent.startType.readOnly:False
ioLabsButtonBoxComponent.startType.updates:None
ioLabsButtonBoxComponent.startType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'time (s)', 'hint': u'How do you want to define your start point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['time (s)', 'frame N', 'condition'], 'label': u'start type', 'readOnly': False, 'updates': None, 'valType': 'str'}
ioLabsButtonBoxComponent.startType.__weakref__:None
ioLabsButtonBoxComponent.startType.valType:str
ioLabsButtonBoxComponent.startType.staticUpdater:None
ioLabsButtonBoxComponent.startType.val:time (s)
ioLabsButtonBoxComponent.startType.allowedTypes:[]
ioLabsButtonBoxComponent.startType.hint:How do you want to define your start point?
ioLabsButtonBoxComponent.startType.allowedUpdates:None
ioLabsButtonBoxComponent.startType.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.startType.label:start type
ioLabsButtonBoxComponent.lights off.default:False
ioLabsButtonBoxComponent.lights off.categ:Basic
ioLabsButtonBoxComponent.lights off.allowedVals:[]
ioLabsButtonBoxComponent.lights off.readOnly:False
ioLabsButtonBoxComponent.lights off.updates:constant
ioLabsButtonBoxComponent.lights off.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': False, 'hint': u'Turn OFF all lights at the end of each routine?', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'Lights off', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
ioLabsButtonBoxComponent.lights off.__weakref__:None
ioLabsButtonBoxComponent.lights off.valType:bool
ioLabsButtonBoxComponent.lights off.staticUpdater:None
ioLabsButtonBoxComponent.lights off.val:False
ioLabsButtonBoxComponent.lights off.allowedTypes:[]
ioLabsButtonBoxComponent.lights off.hint:Turn OFF all lights at the end of each routine?
ioLabsButtonBoxComponent.lights off.allowedUpdates:[]
ioLabsButtonBoxComponent.lights off.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.lights off.label:Lights off
ioLabsButtonBoxComponent.stopType.default:'duration (s)'
ioLabsButtonBoxComponent.stopType.categ:Basic
ioLabsButtonBoxComponent.stopType.allowedVals:['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition']
ioLabsButtonBoxComponent.stopType.readOnly:False
ioLabsButtonBoxComponent.stopType.updates:None
ioLabsButtonBoxComponent.stopType.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'duration (s)', 'hint': u'How do you want to define your end point?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': ['duration (s)', 'duration (frames)', 'time (s)', 'frame N', 'condition'], 'label': u'stop type', 'readOnly': False, 'updates': None, 'valType': 'str'}
ioLabsButtonBoxComponent.stopType.__weakref__:None
ioLabsButtonBoxComponent.stopType.valType:str
ioLabsButtonBoxComponent.stopType.staticUpdater:None
ioLabsButtonBoxComponent.stopType.val:duration (s)
ioLabsButtonBoxComponent.stopType.allowedTypes:[]
ioLabsButtonBoxComponent.stopType.hint:How do you want to define your end point?
ioLabsButtonBoxComponent.stopType.allowedUpdates:None
ioLabsButtonBoxComponent.stopType.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.stopType.label:stop type
ioLabsButtonBoxComponent.startVal.default:0.0
ioLabsButtonBoxComponent.startVal.categ:Basic
ioLabsButtonBoxComponent.startVal.allowedVals:[]
ioLabsButtonBoxComponent.startVal.readOnly:False
ioLabsButtonBoxComponent.startVal.updates:None
ioLabsButtonBoxComponent.startVal.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 0.0, 'hint': u'When does the component start?', 'allowedTypes': [], 'allowedUpdates': None, 'allowedVals': [], 'label': u'Start', 'readOnly': False, 'updates': None, 'valType': 'code'}
ioLabsButtonBoxComponent.startVal.__weakref__:None
ioLabsButtonBoxComponent.startVal.valType:code
ioLabsButtonBoxComponent.startVal.staticUpdater:None
ioLabsButtonBoxComponent.startVal.val:0.0
ioLabsButtonBoxComponent.startVal.allowedTypes:[]
ioLabsButtonBoxComponent.startVal.hint:When does the component start?
ioLabsButtonBoxComponent.startVal.allowedUpdates:None
ioLabsButtonBoxComponent.startVal.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.startVal.label:Start
ioLabsButtonBoxComponent.active.default:(0,1,2,3,4,5,6,7)
ioLabsButtonBoxComponent.active.categ:Basic
ioLabsButtonBoxComponent.active.allowedVals:[]
ioLabsButtonBoxComponent.active.readOnly:False
ioLabsButtonBoxComponent.active.updates:constant
ioLabsButtonBoxComponent.active.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': '(0,1,2,3,4,5,6,7)', 'hint': u"Active buttons, such as '1,6', '(1,2,5,6)' or '0' (without quotes)", 'allowedTypes': [], 'allowedUpdates': ['constant', 'set every repeat'], 'allowedVals': [], 'label': u'Active buttons', 'readOnly': False, 'updates': 'constant', 'valType': 'code'}
ioLabsButtonBoxComponent.active.__weakref__:None
ioLabsButtonBoxComponent.active.valType:code
ioLabsButtonBoxComponent.active.staticUpdater:None
ioLabsButtonBoxComponent.active.val:(0,1,2,3,4,5,6,7)
ioLabsButtonBoxComponent.active.allowedTypes:[]
ioLabsButtonBoxComponent.active.hint:Active buttons, such as '1,6', '(1,2,5,6)' or '0' (without quotes)
ioLabsButtonBoxComponent.active.allowedUpdates:['constant', 'set every repeat']
ioLabsButtonBoxComponent.active.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.active.label:Active buttons
ioLabsButtonBoxComponent.store.default:'first button'
ioLabsButtonBoxComponent.store.categ:Basic
ioLabsButtonBoxComponent.store.allowedVals:['last button', 'first button', 'all buttons', 'nothing']
ioLabsButtonBoxComponent.store.readOnly:False
ioLabsButtonBoxComponent.store.updates:constant
ioLabsButtonBoxComponent.store.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': 'first button', 'hint': u'Choose which (if any) responses to store at end of a trial', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': ['last button', 'first button', 'all buttons', 'nothing'], 'label': u'Store', 'readOnly': False, 'updates': 'constant', 'valType': 'str'}
ioLabsButtonBoxComponent.store.__weakref__:None
ioLabsButtonBoxComponent.store.valType:str
ioLabsButtonBoxComponent.store.staticUpdater:None
ioLabsButtonBoxComponent.store.val:first button
ioLabsButtonBoxComponent.store.allowedTypes:[]
ioLabsButtonBoxComponent.store.hint:Choose which (if any) responses to store at end of a trial
ioLabsButtonBoxComponent.store.allowedUpdates:[]
ioLabsButtonBoxComponent.store.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.store.label:Store
ioLabsButtonBoxComponent.syncScreenRefresh.default:True
ioLabsButtonBoxComponent.syncScreenRefresh.categ:Basic
ioLabsButtonBoxComponent.syncScreenRefresh.allowedVals:[]
ioLabsButtonBoxComponent.syncScreenRefresh.readOnly:False
ioLabsButtonBoxComponent.syncScreenRefresh.updates:constant
ioLabsButtonBoxComponent.syncScreenRefresh.__dict__:{'staticUpdater': None, 'categ': 'Basic', 'val': True, 'hint': u'A reaction time to a visual stimulus should be based on when the screen flipped', 'allowedTypes': [], 'allowedUpdates': [], 'allowedVals': [], 'label': u'sync RT with screen', 'readOnly': False, 'updates': 'constant', 'valType': 'bool'}
ioLabsButtonBoxComponent.syncScreenRefresh.__weakref__:None
ioLabsButtonBoxComponent.syncScreenRefresh.valType:bool
ioLabsButtonBoxComponent.syncScreenRefresh.staticUpdater:None
ioLabsButtonBoxComponent.syncScreenRefresh.val:True
ioLabsButtonBoxComponent.syncScreenRefresh.allowedTypes:[]
ioLabsButtonBoxComponent.syncScreenRefresh.hint:A reaction time to a visual stimulus should be based on when the screen flipped
ioLabsButtonBoxComponent.syncScreenRefresh.allowedUpdates:[]
ioLabsButtonBoxComponent.syncScreenRefresh.__class__:<class 'psychopy.app.builder.experiment.Param'>
ioLabsButtonBoxComponent.syncScreenRefresh.label:sync RT with screen
